{"file_contents":{"README.md":{"content":"# SAK Constructions - Premium Plans Platform\n\nA modern house plans platform built with React, TypeScript, and Node.js.\n\n## üöÄ Quick Start\n\n### Prerequisites\n- Node.js 18+ \n- npm or yarn\n- PostgreSQL database\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd sak-planhouse\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   cd client && npm install\n   cd ../server && npm install\n   ```\n\n3. **Environment Setup**\n   \n   Create a `.env` file in the root directory with the following variables:\n   \n   ```env\n   # Database\n   DATABASE_URL=postgresql://username:password@localhost:5432/sak_planhouse\n   \n   # Paystack Payment Gateway (Optional for demo mode)\n   PAYSTACK_SECRET_KEY=your_paystack_secret_key\n   PAYSTACK_PUBLIC_KEY=your_paystack_public_key\n   \n   # Session\n   SESSION_SECRET=your_session_secret\n   \n   # Supabase (if using)\n   SUPABASE_URL=your_supabase_url\n   SUPABASE_ANON_KEY=your_supabase_anon_key\n   ```\n\n   **Note:** If you don't have Paystack credentials, the system will automatically use demo mode for payments.\n\n4. **Database Setup**\n   ```bash\n   # Run migrations\n   npm run db:migrate\n   \n   # Seed sample data (optional)\n   npm run db:seed\n   ```\n\n5. **Start Development Servers**\n   ```bash\n   # Terminal 1: Start backend server\n   npm run dev:server\n   \n   # Terminal 2: Start frontend\n   npm run dev:client\n   ```\n\n## üîß Features\n\n- **House Plans Management**: Upload, categorize, and manage architectural plans\n- **User Authentication**: Secure login and registration system\n- **Payment Integration**: Paystack payment gateway with demo mode\n- **Plan Comparison**: Side-by-side comparison of different house plans\n- **User Reviews**: Customer feedback and rating system\n- **3D Viewer**: Interactive plan visualization (placeholder)\n- **Admin Panel**: Comprehensive admin dashboard and analytics\n- **Responsive Design**: Mobile-first, modern UI built with Tailwind CSS\n\n## üéØ Demo Mode\n\nThe platform includes a comprehensive demo mode that allows you to:\n- Browse sample house plans\n- Test the payment flow without real transactions\n- Explore all features without external service dependencies\n\n## üìÅ Project Structure\n\n```\nsak-planhouse/\n‚îú‚îÄ‚îÄ client/                 # React frontend\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/    # Reusable UI components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/         # Page components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/         # Custom React hooks\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ lib/           # Utilities and API client\n‚îú‚îÄ‚îÄ server/                 # Node.js backend\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts          # API endpoints\n‚îÇ   ‚îú‚îÄ‚îÄ storage.ts         # Database operations\n‚îÇ   ‚îî‚îÄ‚îÄ paystack.ts        # Payment service\n‚îú‚îÄ‚îÄ shared/                 # Shared types and schemas\n‚îú‚îÄ‚îÄ supabase/               # Database migrations\n‚îî‚îÄ‚îÄ uploads/                # File uploads\n```\n\n## üõ†Ô∏è Development\n\n### Available Scripts\n\n- `npm run dev` - Start both frontend and backend\n- `npm run dev:client` - Start frontend only\n- `npm run dev:server` - Start backend only\n- `npm run build` - Build for production\n- `npm run db:migrate` - Run database migrations\n- `npm run db:seed` - Seed database with sample data\n\n### Tech Stack\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS, Radix UI\n- **Backend**: Node.js, Express, Drizzle ORM\n- **Database**: PostgreSQL\n- **Payment**: Paystack (with demo fallback)\n- **File Uploads**: Multer\n- **Build Tools**: Vite, esbuild\n\n## üö® Troubleshooting\n\n### Common Issues\n\n1. **Payment Initialization Fails**\n   - Check if `PAYSTACK_SECRET_KEY` is set in `.env`\n   - If not set, the system will use demo mode automatically\n\n2. **Database Connection Issues**\n   - Verify `DATABASE_URL` in `.env`\n   - Ensure PostgreSQL is running\n   - Run migrations: `npm run db:migrate`\n\n3. **Build Errors**\n   - Clear node_modules and reinstall: `rm -rf node_modules && npm install`\n   - Check TypeScript compilation: `npm run type-check`\n\n## üìù License\n\nThis project is licensed under the MIT License.\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests if applicable\n5. Submit a pull request\n\n## üìû Support\n\nFor support or questions, please open an issue in the repository.\n","size_bytes":4303},"VERCEL_DEPLOYMENT.md":{"content":"# Vercel Deployment Guide - UPDATED\n\nThis application is now properly configured for deployment on Vercel with both frontend and backend support.\n\n## What Was Fixed\n\n1. **Client Build Process**: Added proper client package.json and build configuration\n2. **File Copying**: Fixed build script to copy files to correct location\n3. **Static Serving**: Updated server to serve files from root directory\n4. **Vercel Configuration**: Simplified vercel.json to handle routing correctly\n\n## Prerequisites\n\n1. **Vercel Account**: Sign up at [vercel.com](https://vercel.com)\n2. **Vercel CLI** (optional): `npm i -g vercel`\n\n## Environment Variables\n\nCreate a `.env` file in your Vercel project with these variables:\n\n```env\nDATABASE_URL=your_supabase_database_connection_string\nPAYSTACK_SECRET_KEY=your_paystack_secret_key\nNODE_ENV=production\n```\n\n## Deployment Steps\n\n### Option 1: Vercel Dashboard (Recommended)\n\n1. **Connect Repository**:\n   - Go to [vercel.com/new](https://vercel.com/new)\n   - Import your GitHub/GitLab repository\n   - Vercel will automatically detect the configuration\n\n2. **Configure Project**:\n   - Framework Preset: `Other`\n   - Root Directory: `./` (root of the project)\n   - Build Command: `npm run build:vercel`\n   - Output Directory: `./`\n   - Install Command: `npm install`\n\n3. **Environment Variables**:\n   - Add all required environment variables in the Vercel dashboard:\n     - `DATABASE_URL`\n     - `PAYSTACK_SECRET_KEY`\n     - `NODE_ENV=production`\n\n4. **Deploy**:\n   - Click \"Deploy\"\n   - Vercel will build and deploy your application\n\n### Option 2: Vercel CLI\n\n1. **Install Vercel CLI**:\n   ```bash\n   npm i -g vercel\n   ```\n\n2. **Login to Vercel**:\n   ```bash\n   vercel login\n   ```\n\n3. **Deploy**:\n   ```bash\n   vercel --prod\n   ```\n\n## How It Works Now\n\n### Build Process\n1. **Client Build**: The `build:vercel` script builds the React app using Vite\n2. **File Copy**: Built files are copied to the root directory for Vercel to serve\n3. **Server Build**: Vercel builds the Node.js server as serverless functions\n\n### Routing\n- **API Routes** (`/api/*`): Handled by the Express server (serverless functions)\n- **Static Files** (`/uploads/*`): Handled by the Express server\n- **Frontend Routes** (`/*`): Served as static files, with React Router handling client-side routing\n\n### File Structure After Build\n```\n/\n‚îú‚îÄ‚îÄ index.html          # React app entry point\n‚îú‚îÄ‚îÄ assets/            # Built JavaScript/CSS files\n‚îú‚îÄ‚îÄ server/            # Server source code (built by Vercel)\n‚îú‚îÄ‚îÄ shared/            # Shared schemas and types\n‚îú‚îÄ‚îÄ vercel.json        # Vercel configuration\n‚îî‚îÄ‚îÄ build-client.js    # Build script\n```\n\n## Build Scripts\n\nThe project now has these build scripts:\n\n- `npm run build:vercel`: Builds client and prepares for Vercel deployment\n- `npm run build:client`: Builds only the client\n- `npm run build`: Builds both client and server for local deployment\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Build Failures**:\n   - Check environment variables are set correctly\n   - Verify all dependencies are in `package.json`\n   - Check build logs in Vercel dashboard\n\n2. **Frontend Not Loading**:\n   - Ensure `build:vercel` script ran successfully\n   - Verify `index.html` exists in the root after build\n   - Check Vercel build logs for client build errors\n\n3. **API Routes Not Working**:\n   - Ensure `DATABASE_URL` is set correctly\n   - Check function logs for database connection errors\n   - Verify database is accessible from Vercel's servers\n\n4. **404 Errors**:\n   - Check that the build process completed successfully\n   - Verify all static files were copied to root\n   - Check Vercel routing configuration\n\n### Debug Mode\n\nTo enable debug logging, add this to your environment variables:\n```env\nDEBUG=*\nNODE_ENV=development\n```\n\n## Performance Optimization\n\n1. **Function Optimization**:\n   - Keep functions lightweight\n   - Use connection pooling for database connections\n   - Implement proper caching strategies\n\n2. **Frontend Optimization**:\n   - Enable Vite's build optimizations\n   - Use code splitting for better loading performance\n   - Implement proper caching headers\n\n## Security Considerations\n\n1. **Environment Variables**: Never commit sensitive data to your repository\n2. **CORS**: Configure CORS properly for production\n3. **Rate Limiting**: Implement rate limiting for API endpoints\n4. **Input Validation**: Validate all user inputs on the server side\n\n## Support\n\n- **Vercel Documentation**: [vercel.com/docs](https://vercel.com/docs)\n- **Vercel Community**: [github.com/vercel/vercel/discussions](https://github.com/vercel/vercel/discussions)\n- **Project Issues**: Check your repository's issue tracker\n\n## Next Steps After Deployment\n\n1. **Test the Application**: Verify all routes work correctly\n2. **Check API Endpoints**: Test database connections and payment processing\n3. **Monitor Performance**: Use Vercel analytics to monitor function performance\n4. **Set Up Custom Domain**: Configure your custom domain if needed\n","size_bytes":5021},"build-client.js":{"content":"import { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconsole.log('Building client for Vercel...');\n\ntry {\n  const rootPath = __dirname;\n  \n  // Install dependencies if node_modules doesn't exist\n  if (!fs.existsSync('node_modules')) {\n    console.log('Installing root dependencies...');\n    execSync('npm install', { stdio: 'inherit' });\n  }\n  \n  // Change to client directory and install its dependencies\n  process.chdir('client');\n  if (!fs.existsSync('node_modules')) {\n    console.log('Installing client dependencies...');\n    execSync('npm install', { stdio: 'inherit' });\n  }\n  \n  // Build the client\n  console.log('Building client with Vite...');\n  execSync('npm run build', { stdio: 'inherit' });\n  \n  // Copy the built files to the root for Vercel\n  console.log('Copying built files to root...');\n  const distPath = path.join(process.cwd(), 'dist');\n  const rootDistPath = path.join(rootPath, 'dist');\n  \n  // Create root dist directory\n  if (fs.existsSync(rootDistPath)) {\n    fs.rmSync(rootDistPath, { recursive: true, force: true });\n  }\n  fs.mkdirSync(rootDistPath, { recursive: true });\n  \n  // Copy dist contents to root dist\n  if (fs.existsSync(distPath)) {\n    const files = fs.readdirSync(distPath);\n    files.forEach(file => {\n      const sourcePath = path.join(distPath, file);\n      const destPath = path.join(rootDistPath, file);\n      \n      if (fs.statSync(sourcePath).isDirectory()) {\n        fs.cpSync(sourcePath, destPath, { recursive: true });\n      } else {\n        fs.copyFileSync(sourcePath, destPath);\n      }\n    });\n    console.log('Client build completed successfully!');\n  } else {\n    throw new Error('Client build failed - dist directory not found');\n  }\n  \n} catch (error) {\n  console.error('Build failed:', error.message);\n  process.exit(1);\n}\n","size_bytes":1953},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"export-env.js":{"content":"\n// Run this script to see your current environment variables\n// Copy the output to create your .env file\n\nconsole.log('# Environment Variables');\nconsole.log('# Copy these to your .env file in your new environment\\n');\n\nconst envVars = [\n  'DATABASE_URL',\n  'PAYSTACK_SECRET_KEY', \n  'PAYSTACK_PUBLIC_KEY',\n  'SESSION_SECRET',\n  'SUPABASE_URL',\n  'SUPABASE_ANON_KEY'\n];\n\nenvVars.forEach(varName => {\n  const value = process.env[varName];\n  if (value) {\n    console.log(`${varName}=${value}`);\n  } else {\n    console.log(`${varName}=# NOT_SET`);\n  }\n});\n","size_bytes":554},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nSAK Constructions is a premium house plans platform that allows users to browse, purchase, and download professional architectural plans. The platform serves as a marketplace for construction plans featuring villas, bungalows, townhouses, and other residential designs. Users can select from different package tiers (Basic, Standard, Premium) and make secure payments through Paystack integration. The system includes both customer-facing features and administrative capabilities for managing plans, orders, and users.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Technology Stack**: React 18 with TypeScript, built using Vite for fast development and optimized builds\n- **UI Framework**: Shadcn/ui components with Radix UI primitives, styled using Tailwind CSS with a custom design system\n- **State Management**: React Context for authentication state, TanStack Query for server state management and caching\n- **Routing**: React Router for client-side navigation with protected routes for admin and user dashboards\n- **Build Configuration**: Monorepo structure with separate client and server directories, shared TypeScript configuration\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database Layer**: Drizzle ORM with PostgreSQL database, using connection pooling for scalability\n- **Authentication**: Session-based authentication with secure session management\n- **File Handling**: Multer middleware for file uploads with organized storage structure for plan files and images\n- **API Design**: RESTful API structure with comprehensive error handling and logging middleware\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL with structured schemas for users, profiles, plans, orders, and downloads\n- **Schema Management**: Drizzle-kit for database migrations and schema evolution\n- **File Storage**: Local file system with organized directory structure for uploaded plan files and images\n- **Session Storage**: Database-backed session storage using connect-pg-simple\n\n## Authentication and Authorization\n- **User Authentication**: Email/password based authentication with secure password hashing\n- **Role-Based Access**: Three-tier system (user, admin, super_admin) with route-level protection\n- **Session Management**: Secure server-side sessions with configurable expiration\n- **Admin Protection**: Dedicated admin routes with role verification middleware\n\n## External Dependencies\n\n### Payment Processing\n- **Paystack Integration**: Primary payment gateway for processing transactions in Ghana\n- **Demo Mode**: Fallback system when Paystack credentials are not configured\n- **Payment Verification**: Server-side payment verification with order status updates\n\n### Database Services\n- **PostgreSQL**: Primary database with connection string configuration\n- **Optional Supabase**: Alternative database hosting option (configuration present but not required)\n\n### Development and Deployment\n- **Vercel Deployment**: Configured for seamless deployment with custom build scripts\n- **Environment Configuration**: Comprehensive environment variable management for different deployment stages\n- **Build System**: Custom build scripts for handling client-server coordination in deployment\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom theme configuration\n- **Radix UI**: Accessible component primitives for complex UI interactions\n- **Custom Design System**: Brand-specific color palette and component styling focused on construction/architecture theme\n\n### File Processing\n- **Multer**: File upload handling with type validation and size limits\n- **Image Processing**: Support for various image formats with organized storage\n- **Plan File Management**: Structured storage system for different plan file types and tiers","size_bytes":3900},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vercel-build.sh":{"content":"#!/bin/bash\n\necho \"Starting Vercel build process...\"\n\n# Install dependencies\necho \"Installing dependencies...\"\nnpm install\n\n# Build client\necho \"Building client...\"\ncd client\nnpm install\nnpm run build\ncd ..\n\n# Copy built files to root\necho \"Copying built files to root...\"\nnode build-client.js\n\necho \"Build completed successfully!\"\n","size_bytes":332},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":551},"client/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"..\", \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"..\", \"attached_assets\"),\n    },\n  },\n  build: {\n    outDir: \"dist\",\n    emptyOutDir: true,\n    rollupOptions: {\n      output: {\n        manualChunks: undefined\n      }\n    }\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    hmr: {\n      port: 5000,\n    },\n  },\n});\n","size_bytes":629},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from '../shared/schema';\nimport 'dotenv/config';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL is not set');\n}\n\n// Create the connection\nconst client = postgres(process.env.DATABASE_URL);\nexport const db = drizzle(client, { schema });\n\nexport * from '../shared/schema';","size_bytes":392},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000 for development\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = process.env.PORT || 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n\n// Export for Vercel serverless functions\nexport default app;\n","size_bytes":2023},"server/paystack.ts":{"content":"\n// Paystack service using direct HTTP API calls\n// Based on official Paystack API documentation: https://api.paystack.co/transaction/initialize\n\nexport interface PaymentData {\n  email: string;\n  amount: number; // Amount in kobo (multiply by 100)\n  reference?: string;\n  callback_url?: string;\n  metadata?: Record<string, any>;\n  planId?: string;\n  packageType?: string;\n}\n\nexport interface PaymentVerification {\n  status: boolean;\n  data: {\n    id: number;\n    domain: string;\n    status: string;\n    reference: string;\n    amount: number;\n    message: string | null;\n    gateway_response: string;\n    paid_at: string;\n    created_at: string;\n    channel: string;\n    currency: string;\n    ip_address: string;\n    metadata: Record<string, any>;\n    log: any;\n    fees: number | null;\n    fees_split: any | null;\n    authorization: {\n      authorization_code: string;\n      bin: string;\n      last4: string;\n      exp_month: string;\n      exp_year: string;\n      channel: string;\n      card_type: string;\n      bank: string;\n      country_code: string;\n      brand: string;\n      reusable: boolean;\n      signature: string;\n      account_name: string | null;\n    };\n    customer: {\n      id: number;\n      first_name: string;\n      last_name: string;\n      email: string;\n      customer_code: string;\n      phone: string;\n      metadata: Record<string, any>;\n      risk_action: string;\n      international_format_phone: string | null;\n    };\n    plan: any;\n    split: any;\n    order_id: any;\n    paidAt: string;\n    createdAt: string;\n    requested_amount: number;\n    pos_transaction_data: any;\n    source: any;\n    fees_breakdown: any;\n  };\n}\n\nexport class PaystackService {\n  private static readonly PAYSTACK_BASE_URL = 'https://api.paystack.co';\n  private static readonly SECRET_KEY = process.env.PAYSTACK_SECRET_KEY;\n\n  // Initialize payment transaction\n  static async initializePayment(paymentData: PaymentData) {\n    try {\n      console.log('=== PAYSTACK SERVICE DEBUG ===');\n      console.log('PAYSTACK_SECRET_KEY exists:', !!this.SECRET_KEY);\n      console.log('PAYSTACK_SECRET_KEY length:', this.SECRET_KEY?.length || 0);\n      console.log('Payment data received:', paymentData);\n      \n      // Check if Paystack is properly configured\n      if (!this.SECRET_KEY) {\n        throw new Error('PAYSTACK_SECRET_KEY not configured. Please set your Paystack secret key in .env file');\n      }\n\n      console.log('Using real Paystack API...');\n      console.log('Making request to:', `${this.PAYSTACK_BASE_URL}/transaction/initialize`);\n      \n      const response = await fetch(`${this.PAYSTACK_BASE_URL}/transaction/initialize`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.SECRET_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: paymentData.email,\n          amount: paymentData.amount,\n          reference: paymentData.reference,\n          callback_url: paymentData.callback_url,\n          metadata: paymentData.metadata,\n        }),\n      });\n\n      console.log('Paystack API response status:', response.status);\n      console.log('Paystack API response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Paystack API error response:', errorText);\n        throw new Error(`Paystack API error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const responseData = await response.json();\n      console.log('Paystack API response data:', responseData);\n\n      if (!responseData.status) {\n        throw new Error(`Paystack API returned error: ${responseData.message || 'Unknown error'}`);\n      }\n\n      return {\n        success: true,\n        data: responseData.data,\n      };\n    } catch (error) {\n      console.error('Paystack initialization error:', error);\n      console.error('Error details:', {\n        name: error instanceof Error ? error.name : 'Unknown',\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : 'No stack trace'\n      });\n      throw error;\n    }\n  }\n\n  // Verify payment transaction\n  static async verifyPayment(reference: string): Promise<PaymentVerification | null> {\n    try {\n      console.log('=== PAYSTACK VERIFICATION DEBUG ===');\n      console.log('Verifying payment with reference:', reference);\n      console.log('PAYSTACK_SECRET_KEY exists:', !!this.SECRET_KEY);\n      \n      if (!reference || reference.trim() === '') {\n        throw new Error('Payment reference is required and cannot be empty');\n      }\n      \n      // Check if Paystack is properly configured\n      if (!this.SECRET_KEY) {\n        throw new Error('PAYSTACK_SECRET_KEY not configured. Please set your Paystack secret key in .env file');\n      }\n\n      console.log('Making verification request to:', `${this.PAYSTACK_BASE_URL}/transaction/verify/${reference}`);\n      \n      const response = await fetch(`${this.PAYSTACK_BASE_URL}/transaction/verify/${reference}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.SECRET_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      console.log('Paystack verification response status:', response.status);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Paystack verification error response:', errorText);\n        throw new Error(`Paystack verification error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const responseData = await response.json();\n      console.log('Paystack verification response data:', responseData);\n\n      if (!responseData.status) {\n        console.log('Paystack API returned status false:', responseData.message);\n        throw new Error(`Paystack verification returned error: ${responseData.message || 'Unknown error'}`);\n      }\n\n      // Additional validation for successful payments\n      if (responseData.data && responseData.data.status !== 'success') {\n        console.log('Payment status is not success:', responseData.data.status);\n        throw new Error(`Payment not successful. Status: ${responseData.data.status}`);\n      }\n\n      console.log('Payment verification successful');\n      return responseData;\n    } catch (error) {\n      console.error('Paystack verification error:', error);\n      throw error;\n    }\n  }\n\n  // Generate payment reference\n  static generateReference(): string {\n    return `ref_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n  }\n}\n","size_bytes":6620},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport express from \"express\";\nimport { PaystackService } from \"./paystack\";\n\n// Multer configuration for file uploads\nconst imageStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/images/');\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst planFileStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const tier = req.body.tier || 'basic';\n    const planId = req.body.planId || 'temp';\n    const uploadPath = `uploads/plans/${tier}/`;\n    \n    // Create directory if it doesn't exist\n    if (!fs.existsSync(uploadPath)) {\n      fs.mkdirSync(uploadPath, { recursive: true });\n    }\n    \n    cb(null, uploadPath);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst uploadImage = multer({ \n  storage: imageStorage,\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed!'));\n    }\n  },\n  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n});\n\nconst uploadPlanFile = multer({ \n  storage: planFileStorage,\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['.pdf', '.dwg', '.dxf', '.zip'];\n    const fileExt = path.extname(file.originalname).toLowerCase();\n    if (allowedTypes.includes(fileExt)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only PDF, DWG, DXF, and ZIP files are allowed!'));\n    }\n  },\n  limits: { fileSize: 50 * 1024 * 1024 } // 50MB limit\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Test endpoint to verify server is working\n  app.get(\"/api/test\", (req, res) => {\n    res.json({ message: \"Server is running!\", timestamp: new Date().toISOString() });\n  });\n\n  // Serve static files from uploads directory\n  app.use('/uploads', express.static('uploads'));\n\n  // File Upload API\n  app.post(\"/api/upload/image\", uploadImage.single('image'), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No file uploaded' });\n      }\n      res.json({ \n        filename: req.file.filename,\n        path: `/uploads/images/${req.file.filename}`,\n        url: `/uploads/images/${req.file.filename}`\n      });\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n      res.status(500).json({ error: \"Failed to upload image\" });\n    }\n  });\n\n  app.post(\"/api/upload/plan-files\", uploadPlanFile.fields([\n    { name: 'basic', maxCount: 5 },\n    { name: 'standard', maxCount: 5 },\n    { name: 'premium', maxCount: 5 }\n  ]), (req, res) => {\n    try {\n      const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n      const uploadedFiles: { [tier: string]: string[] } = {};\n      \n      for (const tier in files) {\n        uploadedFiles[tier] = files[tier].map(file => `/uploads/plans/${tier}/${file.filename}`);\n      }\n      \n      res.json({ files: uploadedFiles });\n    } catch (error) {\n      console.error(\"Error uploading plan files:\", error);\n      res.status(500).json({ error: \"Failed to upload plan files\" });\n    }\n  });\n\n  // Plans API\n  app.get(\"/api/plans\", async (req, res) => {\n    try {\n      const { status, featured } = req.query;\n      const filters: { status?: string; featured?: boolean } = {};\n      \n      if (status) filters.status = status as string;\n      if (featured) filters.featured = featured === 'true';\n      \n      const plans = await storage.getPlans(filters);\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error fetching plans:\", error);\n      res.status(500).json({ error: \"Failed to fetch plans\" });\n    }\n  });\n\n  app.get(\"/api/plans/:id\", async (req, res) => {\n    try {\n      const plan = await storage.getPlan(req.params.id);\n      if (!plan) {\n        return res.status(404).json({ error: \"Plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      console.error(\"Error fetching plan:\", error);\n      res.status(500).json({ error: \"Failed to fetch plan\" });\n    }\n  });\n\n  app.post(\"/api/plans\", async (req, res) => {\n    try {\n      const plan = await storage.createPlan(req.body);\n      res.status(201).json(plan);\n    } catch (error) {\n      console.error(\"Error creating plan:\", error);\n      res.status(500).json({ error: \"Failed to create plan\" });\n    }\n  });\n\n  app.put(\"/api/plans/:id\", async (req, res) => {\n    try {\n      const plan = await storage.updatePlan(req.params.id, req.body);\n      if (!plan) {\n        return res.status(404).json({ error: \"Plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      console.error(\"Error updating plan:\", error);\n      res.status(500).json({ error: \"Failed to update plan\" });\n    }\n  });\n\n  app.delete(\"/api/plans/:id\", async (req, res) => {\n    try {\n      const success = await storage.deletePlan(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Plan not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting plan:\", error);\n      res.status(500).json({ error: \"Failed to delete plan\" });\n    }\n  });\n\n  // Orders API\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      const orders = await storage.getOrders(userId as string);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const order = await storage.createOrder(req.body);\n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ error: \"Failed to create order\" });\n    }\n  });\n\n  // Profiles API\n  app.get(\"/api/profiles/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.getProfile(req.params.userId);\n      if (!profile) {\n        return res.status(404).json({ error: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n      res.status(500).json({ error: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post(\"/api/profiles\", async (req, res) => {\n    try {\n      const profile = await storage.createProfile(req.body);\n      res.status(201).json(profile);\n    } catch (error) {\n      console.error(\"Error creating profile:\", error);\n      res.status(500).json({ error: \"Failed to create profile\" });\n    }\n  });\n\n  app.put(\"/api/profiles/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.updateProfile(req.params.userId, req.body);\n      if (!profile) {\n        return res.status(404).json({ error: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  });\n\n  // Analytics API\n  app.get(\"/api/analytics\", async (req, res) => {\n    try {\n      console.log(\"Analytics endpoint called\");\n      const analytics = await storage.getAnalytics();\n      console.log(\"Analytics fetched successfully:\", analytics);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      console.error(\"Error stack:\", error instanceof Error ? error.stack : 'No stack trace');\n      res.status(500).json({ error: \"Failed to fetch analytics\", details: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // User Analytics API\n  app.get(\"/api/analytics/user/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      // Get user-specific analytics\n      const userOrders = await storage.getOrders(userId);\n      const userDownloads = await storage.getDownloads(userId);\n      \n      const analytics = {\n        totalOrders: userOrders.length,\n        totalSpent: userOrders.reduce((sum, order) => sum + parseFloat(order.amount), 0),\n        totalDownloads: userDownloads.length,\n        recentOrders: userOrders.slice(0, 5),\n        recentDownloads: userDownloads.slice(0, 5)\n      };\n      \n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching user analytics:\", error);\n      res.status(500).json({ error: \"Failed to fetch user analytics\" });\n    }\n  });\n\n  // Users API\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  // Authentication API\n  app.post(\"/api/auth/signin\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      // For the admin user, check credentials\n      if (email === 'admin@sakconstructionsgh.com' && password === 'admin123') {\n        const profile = await storage.getProfileByEmail(email);\n        if (profile) {\n          res.json({\n            user: { id: profile.user_id, email: profile.email },\n            profile\n          });\n          return;\n        }\n      }\n      \n      // For regular users, check if they exist in the database\n      const profile = await storage.getProfileByEmail(email);\n      if (profile) {\n        // In production, you'd verify the password hash here\n        // For now, we'll allow any user with a valid email to sign in\n        res.json({\n          user: { id: profile.user_id, email: profile.email },\n          profile\n        });\n        return;\n      }\n      \n      res.status(401).json({ error: \"Invalid credentials\" });\n    } catch (error) {\n      console.error(\"Error signing in:\", error);\n      res.status(500).json({ error: \"Failed to sign in\" });\n    }\n  });\n\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      // Validate required fields\n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email and password are required\" });\n      }\n      \n      // Check if user already exists\n      const existingProfile = await storage.getProfileByEmail(email);\n      if (existingProfile) {\n        return res.status(409).json({ error: \"User with this email already exists\" });\n      }\n      \n      // Create new user and profile\n      // Generate a proper UUID for the user\n      const { randomUUID } = await import('crypto');\n      const userId = randomUUID();\n      \n      const profileData = {\n        user_id: userId,\n        email,\n        first_name: firstName || null,\n        last_name: lastName || null,\n        phone: null,\n        role: 'user',\n        avatar_url: null,\n        address: null,\n        city: null,\n        country: 'Ghana',\n        bio: null,\n        company: null,\n        website: null\n      };\n      \n      const profile = await storage.createProfile(profileData);\n      \n      if (profile) {\n        res.status(201).json({\n          user: { id: userId, email },\n          profile\n        });\n      } else {\n        res.status(500).json({ error: \"Failed to create user profile\" });\n      }\n      \n    } catch (error) {\n      console.error(\"Error signing up:\", error);\n      res.status(500).json({ error: \"Failed to sign up\" });\n    }\n  });\n\n  app.post(\"/api/auth/signout\", async (req, res) => {\n    res.json({ success: true });\n  });\n\n  // Payment routes\n  app.post(\"/api/payments/initialize\", async (req, res) => {\n    try {\n      console.log('=== PAYMENT INITIALIZATION DEBUG ===');\n      console.log('Request body received:', req.body);\n      console.log('Request headers:', req.headers);\n      \n      const { email, amount, planId, planTitle, packageType, userId } = req.body;\n      console.log('Extracted fields:', { email, amount, planId, planTitle, packageType, userId });\n      console.log('User ID type:', typeof userId);\n      console.log('User ID value:', userId);\n\n      if (!email || !amount || !planId) {\n        console.log('Missing required fields:', { \n          hasEmail: !!email, \n          hasAmount: !!amount, \n          hasPlanId: !!planId \n        });\n        return res.status(400).json({ error: \"Missing required payment data\" });\n      }\n\n      console.log('All required fields present, generating reference...');\n      const reference = PaystackService.generateReference();\n      console.log('Generated reference:', reference);\n      \n      const amountInKobo = Math.round(amount * 100); // Convert cedis to kobo\n      console.log('Amount conversion:', { original: amount, inKobo: amountInKobo });\n\n      // Get user ID from request body or generate one\n      let requestUserId = userId;\n      \n      const paymentData = {\n        email,\n        amount: amountInKobo,\n        reference,\n        callback_url: `${req.protocol}://${req.get('host')}/payment/verify`,\n        planId,\n        packageType,\n        metadata: {\n          planId,\n          planTitle,\n          packageType,\n          userId: requestUserId, // Store user ID in metadata for verification\n          custom_fields: [\n            {\n              display_name: \"Plan\",\n              variable_name: \"plan\",\n              value: planTitle,\n            },\n            {\n              display_name: \"Package\",\n              variable_name: \"package\",\n              value: packageType,\n            },\n          ],\n        },\n      };\n      \n      console.log('Payment data prepared:', paymentData);\n      console.log('Callback URL:', paymentData.callback_url);\n      console.log('Environment check - PAYSTACK_SECRET_KEY exists:', !!process.env.PAYSTACK_SECRET_KEY);\n      console.log('Environment check - PAYSTACK_SECRET_KEY length:', process.env.PAYSTACK_SECRET_KEY?.length || 0);\n\n      console.log('Calling PaystackService.initializePayment...');\n      const result = await PaystackService.initializePayment(paymentData);\n      console.log('PaystackService result:', result);\n\n      if (result.success && result.data) {\n        console.log('Payment initialization successful, sending response...');\n        res.json({\n          success: true,\n          authorization_url: result.data.authorization_url,\n          access_code: result.data.access_code,\n          reference: result.data.reference,\n        });\n      } else {\n        console.log('Payment initialization failed - no success or data');\n        res.status(400).json({ error: \"Failed to initialize payment\" });\n      }\n    } catch (error) {\n      console.error(\"=== PAYMENT INITIALIZATION ERROR ===\");\n      console.error(\"Error type:\", typeof error);\n      console.error(\"Error constructor:\", error?.constructor?.name);\n      console.error(\"Error message:\", (error as any)?.message);\n      console.error(\"Error stack:\", (error as any)?.stack);\n      console.error(\"Full error object:\", error);\n      \n      res.status(500).json({ \n        error: \"Failed to initialize payment\",\n        details: (error as any)?.message || 'Unknown error',\n        type: (error as any)?.constructor?.name || 'Unknown'\n      });\n    }\n  });\n\n  app.get(\"/api/payments/verify/:reference\", async (req, res) => {\n    try {\n      const { reference } = req.params;\n      console.log('=== PAYMENT VERIFICATION DEBUG ===');\n      console.log('Verifying payment with reference:', reference);\n\n      if (!reference) {\n        console.log('No reference provided');\n        return res.status(400).json({ error: \"Payment reference is required\" });\n      }\n\n      console.log('Calling PaystackService.verifyPayment...');\n      const verification = await PaystackService.verifyPayment(reference);\n      console.log('Paystack verification result:', verification);\n\n      if (!verification) {\n        console.log('Verification returned null/undefined');\n        return res.status(400).json({ error: \"Payment verification failed\" });\n      }\n\n      if (verification.data.status === 'success') {\n        console.log('Payment successful, creating order...');\n        console.log('Verification metadata:', verification.data.metadata);\n        \n        // Validate required metadata\n        const metadata = verification.data.metadata || {};\n        const planId = metadata.planId;\n        const packageType = metadata.packageType;\n        \n        if (!planId) {\n          console.error('Missing planId in payment metadata:', metadata);\n          return res.status(400).json({ \n            error: \"Invalid payment: missing plan information\",\n            details: \"Plan ID not found in payment metadata\"\n          });\n        }\n        \n        if (!packageType || !['basic', 'standard', 'premium'].includes(packageType)) {\n          console.error('Missing or invalid packageType in payment metadata:', metadata);\n          return res.status(400).json({ \n            error: \"Invalid payment: missing or invalid package type\",\n            details: \"Package type must be basic, standard, or premium\"\n          });\n        }\n        \n        // Get user ID from metadata or find/create user\n        let orderUserId = metadata.userId;\n        \n        if (!orderUserId) {\n          console.log('No user ID in metadata, checking if user exists by email...');\n          // Try to find user by email from Paystack response\n          const userEmail = verification.data.customer?.email;\n          if (userEmail) {\n            const existingProfile = await storage.getProfileByEmail(userEmail);\n            if (existingProfile) {\n              orderUserId = existingProfile.user_id;\n              console.log('Found existing user by email:', orderUserId);\n            } else {\n              console.log('No existing user found, creating new user profile...');\n              // Create new user profile\n              const { randomUUID } = await import('crypto');\n              orderUserId = randomUUID();\n              const profileData = {\n                user_id: orderUserId,\n                email: userEmail,\n                first_name: verification.data.customer?.first_name || null,\n                last_name: verification.data.customer?.last_name || null,\n                phone: verification.data.customer?.phone || null,\n                role: 'user',\n                avatar_url: null,\n                address: null,\n                city: null,\n                country: 'Ghana',\n                bio: null,\n                company: null,\n                website: null\n              };\n              await storage.createProfile(profileData);\n              console.log('Created new user profile:', orderUserId);\n            }\n          } else {\n            console.error('No email found in Paystack response for guest user creation');\n            return res.status(400).json({ \n              error: \"Invalid payment: no customer email provided\",\n              details: \"Cannot create order without user identification\"\n            });\n          }\n        }\n        \n        console.log('Final user ID for order:', orderUserId);\n        \n        // Verify plan exists before creating order\n        const plan = await storage.getPlan(planId);\n        if (!plan) {\n          console.error('Plan not found:', planId);\n          return res.status(400).json({ \n            error: \"Invalid payment: plan not found\",\n            details: `Plan with ID ${planId} does not exist`\n          });\n        }\n        \n        // Create order record\n        const orderData = {\n          user_id: orderUserId,\n          plan_id: planId,\n          tier: packageType,\n          amount: String(verification.data.amount / 100), // Convert back to cedis\n          payment_intent_id: reference,\n          status: 'completed',\n        };\n\n        console.log('Order data:', orderData);\n        const order = await storage.createOrder(orderData);\n        console.log('Order created:', order);\n\n        res.json({\n          success: true,\n          payment: verification.data,\n          order,\n        });\n      } else {\n        console.log('Payment not successful, status:', verification.data.status);\n        res.status(400).json({\n          success: false,\n          error: \"Payment was not successful\",\n          status: verification.data.status,\n        });\n      }\n    } catch (error) {\n      console.error(\"=== PAYMENT VERIFICATION ERROR ===\");\n      console.error(\"Error type:\", typeof error);\n      console.error(\"Error message:\", (error as any)?.message);\n      console.error(\"Error stack:\", (error as any)?.stack);\n      console.error(\"Full error object:\", error);\n      res.status(500).json({ error: \"Failed to verify payment\" });\n    }\n  });\n\n  app.post(\"/api/payments/callback\", async (req, res) => {\n    try {\n      // Paystack webhook callback\n      const { reference } = req.body;\n      \n      if (reference) {\n        const verification = await PaystackService.verifyPayment(reference);\n        if (verification && verification.data.status === 'success') {\n          // Update order status or perform any post-payment actions\n          console.log('Payment verified via callback:', reference);\n        }\n      }\n      \n      res.status(200).send('OK');\n    } catch (error) {\n      console.error(\"Error handling payment callback:\", error);\n      res.status(500).send('Error');\n    }\n  });\n\n  // Download routes\n  app.get(\"/api/downloads\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      \n      if (!userId) {\n        return res.status(400).json({ error: \"User ID is required\" });\n      }\n\n      // Get all downloads for a user\n      const downloads = await storage.getDownloads(userId as string);\n      \n      res.json(downloads);\n    } catch (error) {\n      console.error(\"Error fetching downloads:\", error);\n      res.status(500).json({ error: \"Failed to fetch downloads\" });\n    }\n  });\n\n  app.get(\"/api/downloads/:orderId\", async (req, res) => {\n    try {\n      const { orderId } = req.params;\n      const order = await storage.getOrder(orderId);\n      \n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      if (order.status !== 'completed') {\n        return res.status(403).json({ error: \"Payment not completed\" });\n      }\n\n      const plan = await storage.getPlan(order.plan_id);\n      if (!plan) {\n        return res.status(404).json({ error: \"Plan not found\" });\n      }\n\n      // Get files based on tier hierarchy: basic = basic only, standard = basic + standard, premium = basic + standard + premium\n      let availableFiles: string[] = [];\n      const planFiles = plan.plan_files as { basic?: string[]; standard?: string[]; premium?: string[] } || {};\n      \n      if (order.tier === 'basic') {\n        availableFiles = planFiles.basic || [];\n      } else if (order.tier === 'standard') {\n        availableFiles = [\n          ...(planFiles.basic || []),\n          ...(planFiles.standard || [])\n        ];\n      } else if (order.tier === 'premium') {\n        availableFiles = [\n          ...(planFiles.basic || []),\n          ...(planFiles.standard || []),\n          ...(planFiles.premium || [])\n        ];\n      }\n      \n      if (!availableFiles || availableFiles.length === 0) {\n        return res.status(404).json({ error: \"No files available for download\" });\n      }\n\n      res.json({\n        orderId,\n        planTitle: plan.title,\n        packageType: order.tier,\n        files: availableFiles,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n      });\n    } catch (error) {\n      console.error(\"Error fetching download info:\", error);\n      res.status(500).json({ error: \"Failed to fetch download information\" });\n    }\n  });\n\n  app.get(\"/api/downloads/:orderId/file\", async (req, res) => {\n    try {\n      const { orderId } = req.params;\n      const { filePath } = req.query;\n      \n      if (!filePath) {\n        return res.status(400).json({ error: \"File path is required\" });\n      }\n\n      const order = await storage.getOrder(orderId);\n      \n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      if (order.status !== 'completed') {\n        return res.status(403).json({ error: \"Payment not completed\" });\n      }\n\n      const plan = await storage.getPlan(order.plan_id);\n      if (!plan) {\n        return res.status(404).json({ error: \"Plan not found\" });\n      }\n\n      // Get files based on tier hierarchy and verify access\n      let availableFiles: string[] = [];\n      const planFiles = plan.plan_files || {};\n      \n      type PlanFiles = {\n        basic?: string[];\n        standard?: string[];\n        premium?: string[];\n        [key: string]: any;\n      };\n      const typedPlanFiles: PlanFiles = planFiles as PlanFiles;\n\n      if (order.tier === 'basic') {\n        availableFiles = typedPlanFiles.basic || [];\n      } else if (order.tier === 'standard') {\n        availableFiles = [\n          ...(typedPlanFiles.basic || []),\n          ...(typedPlanFiles.standard || [])\n        ];\n      } else if (order.tier === 'premium') {\n        availableFiles = [\n          ...(typedPlanFiles.basic || []),\n          ...(typedPlanFiles.standard || []),\n          ...(typedPlanFiles.premium || [])\n        ];\n      }\n\n      if (!availableFiles.includes(filePath as string)) {\n        return res.status(403).json({ error: \"File not included in your package\" });\n      }\n\n      const fullFilePath = path.join(process.cwd(), filePath as string);\n      \n      if (!fs.existsSync(fullFilePath)) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n\n      // Record the download\n      await storage.recordDownload({\n        order_id: orderId,\n        plan_id: order.plan_id,\n        user_id: order.user_id,\n        created_at: new Date(),\n        download_count: 1,\n      });\n\n      // Set appropriate headers for download\n      const fileName = path.basename(fullFilePath);\n      res.setHeader('Content-Disposition', `attachment; filename=\"${fileName}\"`);\n      res.setHeader('Content-Type', 'application/octet-stream');\n      \n      // Stream the file\n      const fileStream = fs.createReadStream(fullFilePath);\n      fileStream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      res.status(500).json({ error: \"Failed to download file\" });\n    }\n  });\n\n\n\n  // Contact Form Email API\n  app.post(\"/api/contact/send-email\", async (req, res) => {\n    try {\n      const { to, subject, name, email, phone, planType, message } = req.body;\n      \n      // Validate required fields\n      if (!name || !email || !message) {\n        return res.status(400).json({ error: 'Name, email, and message are required' });\n      }\n      \n      // For now, we'll simulate sending the email\n      // In production, you would integrate with a real email service like:\n      // - Nodemailer with Gmail SMTP\n      // - SendGrid\n      // - Mailgun\n      // - AWS SES\n      \n      console.log('Contact form submission:', {\n        to,\n        subject,\n        name,\n        email,\n        phone,\n        planType,\n        message,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Simulate email sending delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // In production, replace this with actual email sending logic:\n      // const emailResult = await sendEmail({\n      //   to: 'sakconstructiongh@gmail.com',\n      //   subject: subject,\n      //   html: `\n      //     <h2>New Contact Form Submission</h2>\n      //     <p><strong>Name:</strong> ${name}</p>\n      //     <p><strong>Email:</strong> ${email}</p>\n      //     <p><strong>Phone:</strong> ${phone || 'Not provided'}</p>\n      //     <p><strong>Plan Type:</strong> ${planType || 'Not specified'}</p>\n      //     <p><strong>Message:</strong></p>\n      //     <p>${message}</p>\n      //   `\n      // });\n      \n      res.json({ \n        success: true, \n        message: 'Email sent successfully',\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error(\"Error sending contact email:\", error);\n      res.status(500).json({ error: \"Failed to send email\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":28558},"server/storage.ts":{"content":"import { users, profiles, plans, orders, downloads } from \"@shared/schema\";\nimport type { User, Profile, Plan, Order, Download, InsertUser } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Profile management\n  getProfile(userId: string): Promise<Profile | undefined>;\n  getProfileByEmail(email: string): Promise<Profile | undefined>;\n  createProfile(profile: Omit<Profile, 'id' | 'created_at' | 'updated_at'>): Promise<Profile>;\n  updateProfile(userId: string, updates: Partial<Profile>): Promise<Profile | undefined>;\n\n  // Plans management\n  getPlans(filters?: { status?: string; featured?: boolean }): Promise<Plan[]>;\n  getPlan(id: string): Promise<Plan | undefined>;\n  createPlan(plan: Omit<Plan, 'id' | 'created_at' | 'updated_at'>): Promise<Plan>;\n  updatePlan(id: string, updates: Partial<Plan>): Promise<Plan | undefined>;\n  deletePlan(id: string): Promise<boolean>;\n\n  // Orders management\n  getOrders(userId?: string): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: Omit<Order, 'id' | 'created_at' | 'updated_at'>): Promise<Order>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined>;\n\n  // Downloads management\n  getDownloads(userId?: string): Promise<Download[]>;\n  recordDownload(download: Omit<Download, 'id' | 'downloaded_at'>): Promise<Download>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // Profile methods\n  async getProfile(userId: string): Promise<Profile | undefined> {\n    const result = await db.select().from(profiles).where(eq(profiles.user_id, userId)).limit(1);\n    return result[0];\n  }\n\n  async getProfileByEmail(email: string): Promise<Profile | undefined> {\n    const result = await db.select().from(profiles).where(eq(profiles.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createProfile(profile: Omit<Profile, 'id' | 'created_at' | 'updated_at'>): Promise<Profile> {\n    const result = await db.insert(profiles).values(profile).returning();\n    return result[0];\n  }\n\n  async updateProfile(userId: string, updates: Partial<Profile>): Promise<Profile | undefined> {\n    const result = await db.update(profiles)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(profiles.user_id, userId))\n      .returning();\n    return result[0];\n  }\n\n  // Plans methods\n  async getPlans(filters?: { status?: string; featured?: boolean }): Promise<Plan[]> {\n    let conditions = [];\n\n    if (filters?.status) {\n      conditions.push(eq(plans.status, filters.status));\n    }\n\n    const result = await db.select().from(plans)\n      .where(conditions.length ? and(...conditions) : undefined)\n      .orderBy(desc(plans.featured), desc(plans.created_at));\n\n    return result;\n  }\n\n  async getPlan(id: string): Promise<Plan | undefined> {\n    const result = await db.select().from(plans).where(eq(plans.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPlan(plan: Omit<Plan, 'id' | 'created_at' | 'updated_at'>): Promise<Plan> {\n    const result = await db.insert(plans).values(plan).returning();\n    return result[0];\n  }\n\n  async updatePlan(id: string, updates: Partial<Plan>): Promise<Plan | undefined> {\n    const result = await db.update(plans)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(plans.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deletePlan(id: string): Promise<boolean> {\n    const result = await db.delete(plans).where(eq(plans.id, id));\n    return result.length > 0;\n  }\n\n  // Orders methods\n  async getOrders(userId?: string): Promise<Order[]> {\n    const conditions = [];\n\n    if (userId) {\n      conditions.push(eq(orders.user_id, userId));\n    }\n\n    const result = await db.select().from(orders)\n      .where(conditions.length ? and(...conditions) : undefined)\n      .orderBy(desc(orders.created_at));\n\n    return result;\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createOrder(order: Omit<Order, 'id' | 'created_at' | 'updated_at'>): Promise<Order> {\n    const result = await db.insert(orders).values({\n      ...order,\n      created_at: new Date(),\n      updated_at: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    const result = await db.update(orders)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Downloads methods\n  async getDownloads(userId?: string): Promise<Download[]> {\n    const conditions = [];\n\n    if (userId) {\n      conditions.push(eq(downloads.user_id, userId));\n    }\n\n    const result = await db.select().from(downloads)\n      .where(conditions.length ? and(...conditions) : undefined)\n      .orderBy(desc(downloads.last_downloaded));\n\n    return result;\n  }\n\n  async recordDownload(download: Omit<Download, 'id' | 'last_downloaded'>): Promise<Download> {\n    const result = await db.insert(downloads).values({\n      ...download,\n      last_downloaded: new Date(),\n    }).returning();\n    return result[0];\n  }\n\n  // Analytics methods\n  async getAnalytics(): Promise<any> {\n    try {\n      // Get total revenue from completed orders\n      const revenueResult = await db.select({\n        totalRevenue: sql<number>`SUM(${orders.amount})`.mapWith(Number),\n        totalOrders: sql<number>`COUNT(*)`.mapWith(Number),\n      }).from(orders).where(eq(orders.status, 'completed'));\n\n      // Get total users count\n      const usersResult = await db.select({\n        totalUsers: sql<number>`COUNT(*)`.mapWith(Number),\n      }).from(profiles);\n\n      // Get total downloads count\n      const downloadsResult = await db.select({\n        totalDownloads: sql<number>`COUNT(*)`.mapWith(Number),\n      }).from(downloads);\n\n      // Get plan metrics\n      const planMetricsResult = await db.select({\n        packageType: orders.tier,\n        count: sql<number>`COUNT(*)`.mapWith(Number),\n      }).from(orders)\n        .where(eq(orders.status, 'completed'))\n        .groupBy(orders.tier);\n\n      // Get recent activity (orders)\n      const recentOrdersResult = await db.select().from(orders)\n        .orderBy(desc(orders.created_at))\n        .limit(10);\n\n      // Get top plans by sales\n      const topPlansResult = await db.select({\n        planId: orders.plan_id,\n        sales: sql<number>`COUNT(*)`.mapWith(Number),\n        revenue: sql<number>`SUM(${orders.amount})`.mapWith(Number),\n      }).from(orders)\n        .where(eq(orders.status, 'completed'))\n        .groupBy(orders.plan_id)\n        .orderBy(desc(sql`COUNT(*)`))\n        .limit(5);\n\n      const totalRevenue = revenueResult[0]?.totalRevenue || 0;\n      const totalOrders = revenueResult[0]?.totalOrders || 0;\n      const totalUsers = usersResult[0]?.totalUsers || 0;\n      const totalDownloads = downloadsResult[0]?.totalDownloads || 0;\n\n      // Calculate plan metrics\n      const planMetrics = {\n        basicSales: planMetricsResult.find(p => p.packageType === 'basic')?.count || 0,\n        standardSales: planMetricsResult.find(p => p.packageType === 'standard')?.count || 0,\n        premiumSales: planMetricsResult.find(p => p.packageType === 'premium')?.count || 0,\n        totalPlans: await db.select({ count: sql<number>`COUNT(*)`.mapWith(Number) }).from(plans).then(r => r[0]?.count || 0),\n      };\n\n      // Format recent activity\n      const recentActivity = recentOrdersResult.map((order, index) => ({\n        id: order.id,\n        type: 'order' as const,\n        description: `${order.tier} package purchased`,\n        timestamp: new Date(order.created_at).toLocaleString(),\n        amount: order.amount,\n      }));\n\n      // Get plan details for top plans\n      const topPlans = await Promise.all(\n        topPlansResult.map(async (topPlan) => {\n          const plan = await this.getPlan(topPlan.planId);\n          return {\n            id: topPlan.planId,\n            title: plan?.title || 'Unknown Plan',\n            sales: topPlan.sales,\n            revenue: topPlan.revenue,\n            category: plan?.plan_type || 'Unknown',\n          };\n        })\n      );\n\n      return {\n        overview: {\n          totalRevenue,\n          revenueGrowth: 12.5, // Mock growth percentage\n          totalOrders,\n          ordersGrowth: 8.2, // Mock growth percentage\n          totalUsers,\n          usersGrowth: 15.3, // Mock growth percentage\n          totalDownloads,\n          downloadsGrowth: 22.1, // Mock growth percentage\n        },\n        planMetrics,\n        recentActivity,\n        topPlans,\n      };\n    } catch (error) {\n      console.error('Error getting analytics:', error);\n      throw error;\n    }\n  }\n\n  // Users methods\n  async getAllUsers(): Promise<any[]> {\n    try {\n      const result = await db.select({\n        id: profiles.id,\n        userId: profiles.user_id,\n        email: profiles.email,\n        firstName: profiles.first_name,\n        lastName: profiles.last_name,\n        role: profiles.role,\n        createdAt: profiles.created_at,\n        updatedAt: profiles.updated_at,\n      }).from(profiles).orderBy(desc(profiles.created_at));\n\n      return result;\n    } catch (error) {\n      console.error('Error getting all users:', error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":10158},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    // Skip API routes - let them be handled by Express routes\n    if (url.startsWith('/api/')) {\n      return next();\n    }\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  // In production (Vercel), the client is built to client/dist\n  // In development, it might be in the root\n  let distPath = path.resolve(import.meta.dirname, \"..\", \"client\", \"dist\");\n  \n  if (!fs.existsSync(distPath)) {\n    // Fallback to root directory for local development\n    distPath = path.resolve(import.meta.dirname, \"..\");\n  }\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2630},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, decimal, timestamp, uuid, varchar, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { sql } from \"drizzle-orm\";\n\n// Enums\nexport const userRoleEnum = pgTable(\"user_role\", {\n  value: text(\"value\")\n});\n\nexport const planTypeEnum = pgTable(\"plan_type\", {\n  value: text(\"value\")\n});\n\nexport const planTierEnum = pgTable(\"plan_tier\", {\n  value: text(\"value\")\n});\n\nexport const orderStatusEnum = pgTable(\"order_status\", {\n  value: text(\"value\")\n});\n\n// Tables\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const profiles = pgTable(\"profiles\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user_id: uuid(\"user_id\").notNull().unique(),\n  email: text(\"email\").notNull(),\n  first_name: text(\"first_name\"),\n  last_name: text(\"last_name\"),\n  phone: text(\"phone\"),\n  role: text(\"role\").notNull().default(\"user\"), // 'user', 'admin', 'super_admin'\n  avatar_url: text(\"avatar_url\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  country: text(\"country\").default(\"Ghana\"),\n  bio: text(\"bio\"),\n  company: text(\"company\"),\n  website: text(\"website\"),\n  created_at: timestamp(\"created_at\").notNull().defaultNow(),\n  updated_at: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const plans = pgTable(\"plans\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  plan_type: text(\"plan_type\").notNull(), // 'villa', 'bungalow', 'townhouse', 'duplex', 'apartment', 'commercial'\n  bedrooms: integer(\"bedrooms\"),\n  bathrooms: integer(\"bathrooms\"),\n  area_sqft: integer(\"area_sqft\"),\n  basic_price: decimal(\"basic_price\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  standard_price: decimal(\"standard_price\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  premium_price: decimal(\"premium_price\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  featured: boolean(\"featured\").notNull().default(false),\n  status: text(\"status\").notNull().default(\"active\"),\n  image_url: text(\"image_url\"),\n  gallery_images: json(\"gallery_images\"),\n  plan_files: json(\"plan_files\"),\n  created_at: timestamp(\"created_at\").notNull().defaultNow(),\n  updated_at: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user_id: uuid(\"user_id\").notNull(),\n  plan_id: uuid(\"plan_id\").notNull(),\n  tier: text(\"tier\").notNull(), // 'basic', 'standard', 'premium'\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'completed', 'cancelled', 'refunded'\n  payment_intent_id: text(\"payment_intent_id\"),\n  created_at: timestamp(\"created_at\").notNull().defaultNow(),\n  updated_at: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const downloads = pgTable(\"downloads\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user_id: uuid(\"user_id\").notNull(),\n  plan_id: uuid(\"plan_id\").notNull(),\n  order_id: uuid(\"order_id\").notNull(),\n  download_count: integer(\"download_count\").notNull().default(0),\n  last_downloaded: timestamp(\"last_downloaded\"),\n  created_at: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertProfileSchema = createInsertSchema(profiles);\nexport const insertPlanSchema = createInsertSchema(plans);\nexport const insertOrderSchema = createInsertSchema(orders);\nexport const insertDownloadSchema = createInsertSchema(downloads);\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Profile = typeof profiles.$inferSelect;\nexport type Plan = typeof plans.$inferSelect;\nexport type Order = typeof orders.$inferSelect;\nexport type Download = typeof downloads.$inferSelect;\n","size_bytes":4149},"supabase/config.toml":{"content":"project_id = \"peixnsayjbsuriidziii\"","size_bytes":35},"client/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"client/src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route, useLocation } from \"react-router-dom\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport Index from \"./pages/Index\";\nimport Plans from \"./pages/Plans\";\nimport PlanDetail from \"./pages/PlanDetail\";\nimport About from \"./pages/About\";\nimport Contact from \"./pages/Contact\";\nimport NotFound from \"./pages/NotFound\";\nimport Checkout from \"./pages/Checkout\";\nimport Admin from \"./pages/Admin\";\nimport UserDashboard from \"./pages/UserDashboard\";\nimport UserProfile from \"./pages/UserProfile\";\nimport UserOrders from \"./pages/UserOrders\";\nimport UserFavorites from \"./pages/UserFavorites\";\nimport UserSettings from \"./pages/UserSettings\";\nimport DownloadPage from '@/pages/DownloadPage';\nimport HowItWorks from '@/pages/HowItWorks';\nimport FAQ from '@/pages/FAQ';\nimport Terms from '@/pages/Terms';\nimport Privacy from '@/pages/Privacy';\nimport Cookies from '@/pages/Cookies';\nimport DemoPayment from '@/pages/DemoPayment';\nimport PaymentVerification from '@/pages/PaymentVerification';\nimport Services from './pages/Services';\n\nconst queryClient = new QueryClient();\n\nconst AppContent = () => {\n  const location = useLocation();\n  const isAdminRoute = location.pathname.startsWith('/admin');\n\n  return (\n    <div className=\"min-h-screen\">\n      {!isAdminRoute && <Header />}\n      <main>\n        <Routes>\n          <Route path=\"/\" element={<Index />} />\n          <Route path=\"/plans\" element={<Plans />} />\n          <Route path=\"/plans/:id\" element={<PlanDetail />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/contact\" element={<Contact />} />\n          <Route path=\"/services\" element={<Services />} />\n          <Route path=\"/how-it-works\" element={<HowItWorks />} />\n          <Route path=\"/faq\" element={<FAQ />} />\n          <Route path=\"/checkout\" element={<Checkout />} />\n          <Route path=\"/demo-payment\" element={<DemoPayment />} />\n\n          {/* Footer Pages */}\n          <Route path=\"/terms\" element={<Terms />} />\n          <Route path=\"/privacy\" element={<Privacy />} />\n          <Route path=\"/cookies\" element={<Cookies />} />\n\n          {/* User Routes */}\n          <Route path=\"/user/dashboard\" element={<UserDashboard />} />\n          <Route path=\"/user/profile\" element={<UserProfile />} />\n          <Route path=\"/user/orders\" element={<UserOrders />} />\n          <Route path=\"/user/downloads/:orderId\" element={<DownloadPage />} />\n          <Route path=\"/user/favorites\" element={<UserFavorites />} />\n          <Route path=\"/user/settings\" element={<UserSettings />} />\n\n          {/* Payment Routes */}\n          <Route path=\"/payment/verify\" element={<PaymentVerification />} />\n          \n          {/* Download Routes */}\n          <Route path=\"/download/:orderId\" element={<DownloadPage />} />\n\n          {/* Admin Routes */}\n          <Route path=\"/admin/*\" element={<Admin />} />\n\n          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </main>\n      {!isAdminRoute && <Footer />}\n    </div>\n  );\n};\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <AuthProvider>\n        <Toaster />\n        <Sonner />\n        <BrowserRouter>\n          <AppContent />\n        </BrowserRouter>\n      </AuthProvider>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;","size_bytes":3748},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Modern Design System - Construction & Architecture Theme */\n@layer base {\n  :root {\n    /* Core Colors */\n    --background: 0 0% 100%;\n    --foreground: 222 84% 5%;\n    \n    /* Card & Surface Colors */\n    --card: 0 0% 100%;\n    --card-foreground: 222 84% 5%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222 84% 5%;\n    \n    /* Primary Brand Colors - Modern Orange */\n    --primary: 25 95% 53%;\n    --primary-foreground: 0 0% 100%;\n    --primary-light: 25 95% 95%;\n    \n    /* Secondary Colors - Professional Blue */\n    --secondary: 217 91% 60%;\n    --secondary-foreground: 0 0% 100%;\n    --secondary-light: 217 91% 95%;\n    \n    /* Accent Colors */\n    --accent: 142 76% 36%;\n    --accent-foreground: 0 0% 100%;\n    --accent-light: 142 76% 95%;\n    \n    /* Neutral Colors */\n    --muted: 220 14% 96%;\n    --muted-foreground: 220 9% 46%;\n    --border: 220 13% 91%;\n    --input: 220 13% 91%;\n    --ring: 25 95% 53%;\n    \n    /* Success & Warning */\n    --success: 142 76% 36%;\n    --success-foreground: 0 0% 100%;\n    --warning: 38 92% 50%;\n    --warning-foreground: 0 0% 100%;\n    \n    /* Destructive */\n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 100%;\n    \n    /* Border Radius */\n    --radius: 1rem;\n    \n    /* Construction Theme Specific */\n    --construction-gold: 45 93% 47%;\n    --construction-gold-light: 45 93% 95%;\n    --construction-steel: 220 14% 96%;\n    --construction-steel-dark: 220 14% 20%;\n    \n    /* Enhanced Gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(25 95% 53%), hsl(20 95% 48%));\n    --gradient-secondary: linear-gradient(135deg, hsl(217 91% 60%), hsl(217 91% 50%));\n    --gradient-success: linear-gradient(135deg, hsl(142 76% 36%), hsl(142 76% 30%));\n    --gradient-hero: linear-gradient(135deg, hsl(25 95% 53%), hsl(20 90% 45%));\n    --gradient-card: linear-gradient(145deg, hsl(0 0% 100%), hsl(220 14% 98%));\n    --gradient-glass: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05));\n    \n    /* Enhanced Shadows */\n    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n    --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n    --shadow-2xl: 0 25px 50px -12px rgb(0 0 0 / 0.25);\n    --shadow-construction: 0 20px 40px -10px hsl(25 95% 53% / 0.15);\n    --shadow-glow: 0 0 20px hsl(25 95% 53% / 0.3);\n    \n    /* Glass Effect */\n    --glass-bg: rgba(255, 255, 255, 0.1);\n    --glass-border: rgba(255, 255, 255, 0.2);\n    --glass-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n    \n    /* Sidebar */\n    --sidebar-background: 220 14% 98%;\n    --sidebar-foreground: 220 9% 46%;\n    --sidebar-primary: 220 14% 20%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 220 14% 95%;\n    --sidebar-accent-foreground: 220 14% 20%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217 91% 60%;\n  }\n\n  .dark {\n    --background: 222 84% 5%;\n    --foreground: 210 40% 98%;\n    \n    --card: 222 84% 5%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222 84% 5%;\n    --popover-foreground: 210 40% 98%;\n    \n    --primary: 25 95% 53%;\n    --primary-foreground: 222 84% 5%;\n    --primary-light: 25 95% 15%;\n    \n    --secondary: 217 91% 60%;\n    --secondary-foreground: 222 84% 5%;\n    --secondary-light: 217 91% 15%;\n    \n    --accent: 142 76% 36%;\n    --accent-foreground: 222 84% 5%;\n    --accent-light: 142 76% 15%;\n    \n    --muted: 217 33% 17%;\n    --muted-foreground: 215 20% 65%;\n    --border: 217 33% 17%;\n    --input: 217 33% 17%;\n    --ring: 25 95% 53%;\n    \n    --success: 142 76% 36%;\n    --success-foreground: 222 84% 5%;\n    --warning: 38 92% 50%;\n    --warning-foreground: 222 84% 5%;\n    \n    --destructive: 0 63% 31%;\n    --destructive-foreground: 210 40% 98%;\n    \n    --construction-gold: 45 93% 47%;\n    --construction-gold-light: 45 93% 15%;\n    --construction-steel: 217 33% 17%;\n    --construction-steel-dark: 220 14% 80%;\n    \n    --glass-bg: rgba(0, 0, 0, 0.1);\n    --glass-border: rgba(255, 255, 255, 0.1);\n    --glass-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);\n    \n    --sidebar-background: 222 84% 5%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 210 40% 98%;\n    --sidebar-primary-foreground: 222 84% 5%;\n    --sidebar-accent: 217 33% 17%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217 33% 17%;\n    --sidebar-ring: 25 95% 53%;\n  }\n}\n\n/* Custom Component Styles */\n@layer components {\n  /* Glass Morphism */\n  .glass {\n    background: var(--glass-bg);\n    backdrop-filter: blur(16px);\n    -webkit-backdrop-filter: blur(16px);\n    border: 1px solid var(--glass-border);\n    box-shadow: var(--glass-shadow);\n  }\n  \n  /* Modern Cards */\n  .card-modern {\n    @apply bg-card border border-border/50 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300;\n    background: linear-gradient(145deg, hsl(var(--card)), hsl(var(--card) / 0.8));\n  }\n  \n  /* Gradient Text */\n  .gradient-text {\n    @apply bg-gradient-to-r from-primary via-primary to-secondary bg-clip-text text-transparent;\n  }\n  \n  /* Animated Border */\n  .animated-border {\n    position: relative;\n    background: linear-gradient(90deg, hsl(var(--primary)), hsl(var(--secondary)), hsl(var(--accent)));\n    padding: 2px;\n    border-radius: var(--radius);\n  }\n  \n  .animated-border > * {\n    @apply bg-background rounded-[calc(var(--radius)-2px)];\n  }\n  \n  /* Floating Animation */\n  .float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-20px); }\n  }\n  \n  /* Pulse Glow */\n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite alternate;\n  }\n  \n  @keyframes pulse-glow {\n    from { box-shadow: 0 0 20px hsl(var(--primary) / 0.3); }\n    to { box-shadow: 0 0 30px hsl(var(--primary) / 0.6); }\n  }\n  \n  /* Modern Button Styles */\n  .btn-primary {\n    @apply bg-gradient-to-r from-primary to-primary text-primary-foreground font-semibold px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105;\n  }\n  \n  .btn-secondary {\n    @apply bg-gradient-to-r from-secondary to-secondary-foreground text-white font-semibold px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105;\n  }\n  \n  .btn-outline-modern {\n    @apply border-2 border-primary/20 bg-background/80 backdrop-blur-sm text-primary hover:bg-primary hover:text-primary-foreground font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105;\n  }\n  \n  /* Modern Input Styles */\n  .input-modern {\n    @apply bg-background/50 border border-border/50 rounded-xl px-4 py-3 focus:ring-2 focus:ring-primary/20 focus:border-primary transition-all duration-300 backdrop-blur-sm;\n  }\n  \n  /* Stats Cards */\n  .stat-card {\n    @apply bg-gradient-to-br from-card to-card/80 border border-border/30 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 backdrop-blur-sm;\n  }\n  \n  /* Hero Section */\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(var(--primary) / 0.1), hsl(var(--secondary) / 0.1), hsl(var(--accent) / 0.1));\n  }\n  \n  /* Admin Dashboard */\n  .admin-card {\n    @apply bg-gradient-to-br from-card via-card to-muted/30 border border-border/50 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300;\n  }\n  \n  .metric-card {\n    @apply bg-gradient-to-br from-primary/5 via-primary/10 to-primary/5 border border-primary/20 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300;\n  }\n}\n\n/* Utility Classes */\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n  \n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n  \n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n}","size_bytes":8043},"client/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/components/AdminHeader.tsx":{"content":"\nimport { useState } from 'react';\nimport { useNavigate, Link, useLocation } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Menu, Home, BarChart3, FileText, ShoppingCart, Users, Settings, LogOut, Shield } from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\n\nconst AdminHeader = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { user, signOut, profile } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const navItems = [\n    { icon: Home, label: 'Dashboard', href: '/admin/dashboard' },\n    { icon: BarChart3, label: 'Analytics', href: '/admin/analytics' },\n    { icon: FileText, label: 'Plans', href: '/admin/plans' },\n    { icon: ShoppingCart, label: 'Orders', href: '/admin/orders' },\n    { icon: Users, label: 'Users', href: '/admin/users' },\n    { icon: Settings, label: 'Settings', href: '/admin/settings' },\n  ];\n\n  const handleSignOut = async () => {\n    await signOut();\n    navigate('/');\n  };\n\n  const isActiveRoute = (href: string) => {\n    return location.pathname === href;\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60 shadow-sm\">\n      <div className=\"container flex h-16 items-center justify-between\">\n        {/* Logo */}\n        <div className=\"flex items-center space-x-4\">\n          <Link to=\"/admin/dashboard\" className=\"flex items-center space-x-2\">\n                            <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-gradient-to-br from-primary to-primary\">\n              <Shield className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-lg font-bold text-foreground\">SAK Admin</span>\n              <span className=\"text-xs text-muted-foreground\">Management Portal</span>\n            </div>\n          </Link>\n        </div>\n\n        {/* Desktop Navigation */}\n        <nav className=\"hidden md:flex items-center space-x-2\">\n          {navItems.map((item) => (\n            <Link\n              key={item.label}\n              to={item.href}\n              className={`flex items-center space-x-2 px-3 py-2 text-sm font-medium rounded-md transition-colors ${\n                isActiveRoute(item.href)\n                  ? 'bg-primary text-primary-foreground'\n                  : 'text-muted-foreground hover:text-primary hover:bg-accent'\n              }`}\n            >\n              <item.icon className=\"h-4 w-4\" />\n              <span>{item.label}</span>\n            </Link>\n          ))}\n        </nav>\n\n        {/* Desktop Actions */}\n        <div className=\"hidden md:flex items-center space-x-4\">\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            {profile?.role === 'super_admin' ? 'Super Admin' : 'Admin'}\n          </Badge>\n          \n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative h-8 w-8 rounded-full\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src={profile?.avatar_url} alt={profile?.first_name || 'Admin'} />\n                  <AvatarFallback className=\"text-sm\">\n                    {profile?.first_name?.[0] || 'A'}{profile?.last_name?.[0] || ''}\n                  </AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n              <div className=\"flex items-center justify-start gap-2 p-2\">\n                <div className=\"flex flex-col space-y-1 leading-none\">\n                  <p className=\"font-medium\">{profile?.first_name || 'Admin'} {profile?.last_name || ''}</p>\n                  <p className=\"w-[200px] truncate text-sm text-muted-foreground\">\n                    {profile?.email || user?.email || 'admin@example.com'}\n                  </p>\n                </div>\n              </div>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem asChild>\n                <Link to=\"/admin/settings\">\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  <span>Settings</span>\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link to=\"/\">\n                  <Home className=\"mr-2 h-4 w-4\" />\n                  <span>View Site</span>\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={handleSignOut}>\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Sign Out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {/* Mobile Menu */}\n        <Sheet open={isOpen} onOpenChange={setIsOpen}>\n          <SheetTrigger asChild className=\"md:hidden\">\n            <Button variant=\"ghost\" size=\"icon\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"right\" className=\"w-80\">\n            <div className=\"flex flex-col space-y-6 mt-6\">\n              <div className=\"flex items-center space-x-2 pb-4 border-b\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={profile?.avatar_url} alt={profile?.first_name || 'Admin'} />\n                  <AvatarFallback>\n                    {profile?.first_name?.[0] || 'A'}{profile?.last_name?.[0] || ''}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"font-medium\">{profile?.first_name || 'Admin'} {profile?.last_name || ''}</p>\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {profile?.role === 'super_admin' ? 'Super Admin' : 'Admin'}\n                  </Badge>\n                </div>\n              </div>\n\n              {navItems.map((item) => (\n                <Link\n                  key={item.label}\n                  to={item.href}\n                  className={`flex items-center space-x-3 text-lg font-medium transition-colors ${\n                    isActiveRoute(item.href)\n                      ? 'text-primary'\n                      : 'text-foreground hover:text-primary'\n                  }`}\n                  onClick={() => setIsOpen(false)}\n                >\n                  <item.icon className=\"h-5 w-5\" />\n                  <span>{item.label}</span>\n                </Link>\n              ))}\n\n              <div className=\"pt-6 border-t space-y-3\">\n                <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                  <Link to=\"/\" onClick={() => setIsOpen(false)}>\n                    <Home className=\"h-4 w-4 mr-2\" />\n                    View Site\n                  </Link>\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" onClick={() => {\n                  handleSignOut();\n                  setIsOpen(false);\n                }}>\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </div>\n            </div>\n          </SheetContent>\n        </Sheet>\n      </div>\n    </header>\n  );\n};\n\nexport default AdminHeader;\n","size_bytes":7656},"client/src/components/AuthModal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst AuthModal = ({ isOpen, onClose }: AuthModalProps) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { signIn, signUp } = useAuth();\n  const { toast } = useToast();\n\n  const [loginForm, setLoginForm] = useState({\n    email: '',\n    password: ''\n  });\n\n  const [signupForm, setSignupForm] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    firstName: '',\n    lastName: ''\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const { error } = await signIn(loginForm.email, loginForm.password);\n      \n      if (error) {\n        toast({\n          title: \"Login Error\",\n          description: error.message,\n          variant: \"destructive\"\n        });\n      } else {\n        toast({\n          title: \"Welcome back!\",\n          description: \"You have been logged in successfully.\"\n        });\n        onClose();\n      }\n    } catch (error) {\n      toast({\n        title: \"Login Error\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (signupForm.password !== signupForm.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const { error } = await signUp(\n        signupForm.email, \n        signupForm.password, \n        signupForm.firstName, \n        signupForm.lastName\n      );\n      \n      if (error) {\n        toast({\n          title: \"Signup Error\",\n          description: error.message,\n          variant: \"destructive\"\n        });\n      } else {\n        toast({\n          title: \"Account Created!\",\n          description: \"Please check your email to verify your account.\"\n        });\n        onClose();\n      }\n    } catch (error) {\n      toast({\n        title: \"Signup Error\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex flex-col items-center space-y-2\">\n            <img \n              src=\"/logo.png\" \n              alt=\"SAK Constructions\" \n              className=\"h-8 w-auto\"\n            />\n            <DialogTitle className=\"text-center\">Welcome</DialogTitle>\n            <DialogDescription className=\"text-center text-muted-foreground\">\n              Sign in to your account or create a new one to get started\n            </DialogDescription>\n          </div>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\">Login</TabsTrigger>\n            <TabsTrigger value=\"signup\">Sign Up</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"login\" className=\"space-y-4\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-email\">Email</Label>\n                <Input\n                  id=\"login-email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={loginForm.email}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-password\">Password</Label>\n                <Input\n                  id=\"login-password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={loginForm.password}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                />\n              </div>\n              \n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? 'Logging in...' : 'Login'}\n              </Button>\n            </form>\n          </TabsContent>\n          \n          <TabsContent value=\"signup\" className=\"space-y-4\">\n            <form onSubmit={handleSignup} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"first-name\">First Name</Label>\n                  <Input\n                    id=\"first-name\"\n                    placeholder=\"First name\"\n                    value={signupForm.firstName}\n                    onChange={(e) => setSignupForm(prev => ({ ...prev, firstName: e.target.value }))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"last-name\">Last Name</Label>\n                  <Input\n                    id=\"last-name\"\n                    placeholder=\"Last name\"\n                    value={signupForm.lastName}\n                    onChange={(e) => setSignupForm(prev => ({ ...prev, lastName: e.target.value }))}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signup-email\">Email</Label>\n                <Input\n                  id=\"signup-email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={signupForm.email}\n                  onChange={(e) => setSignupForm(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signup-password\">Password</Label>\n                <Input\n                  id=\"signup-password\"\n                  type=\"password\"\n                  placeholder=\"Create a password\"\n                  value={signupForm.password}\n                  onChange={(e) => setSignupForm(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                <Input\n                  id=\"confirm-password\"\n                  type=\"password\"\n                  placeholder=\"Confirm your password\"\n                  value={signupForm.confirmPassword}\n                  onChange={(e) => setSignupForm(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                  required\n                />\n              </div>\n              \n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? 'Creating account...' : 'Create Account'}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default AuthModal;\n","size_bytes":7706},"client/src/components/DownloadManager.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Download, FileText, Calendar, AlertCircle, CheckCircle, Loader2, Archive } from 'lucide-react';\nimport { api } from '@/lib/api';\n\ninterface DownloadManagerProps {\n  orderId: string;\n}\n\ninterface DownloadInfo {\n  orderId: string;\n  planTitle: string;\n  packageType: string;\n  files: string[]; // API returns array of file paths\n  expiresAt: string;\n}\n\nexport const DownloadManager = ({ orderId }: DownloadManagerProps) => {\n  const [downloadInfo, setDownloadInfo] = useState<DownloadInfo | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [downloadingFiles, setDownloadingFiles] = useState<Set<string>>(new Set());\n  const [downloadingZip, setDownloadingZip] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchDownloadInfo();\n  }, [orderId]);\n\n  const fetchDownloadInfo = async () => {\n    try {\n      const response = await api.getDownloadInfo(orderId);\n      setDownloadInfo(response);\n    } catch (error) {\n      console.error('Error fetching download info:', error);\n      setError('Failed to load download information');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDownloadFile = async (filePath: string) => {\n    setDownloadingFiles(prev => new Set([...prev, filePath]));\n\n    try {\n      const response = await fetch(`/api/downloads/${orderId}/file?filePath=${encodeURIComponent(filePath)}`);\n\n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n\n      // Get filename from the file path\n      const fileName = filePath.split('/').pop() || 'download';\n\n      // Create blob and download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('Error downloading file:', error);\n      setError('Failed to download file');\n    } finally {\n      setDownloadingFiles(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(filePath);\n        return newSet;\n      });\n    }\n  };\n\n  const handleDownloadAll = async () => {\n    if (!downloadInfo) return;\n\n    for (const filePath of downloadInfo.files) {\n      await handleDownloadFile(filePath);\n      // Add a small delay between downloads to prevent overwhelming the server\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n  };\n\n  const handleDownloadAsZip = async () => {\n    if (!downloadInfo) return;\n    \n    setDownloadingZip(true);\n    \n    try {\n      // Create a ZIP file using JSZip\n      const JSZip = (await import('jszip')).default;\n      const zip = new JSZip();\n      \n      // Add each file to the ZIP\n      for (const filePath of downloadInfo.files) {\n        try {\n          const response = await fetch(`/api/downloads/${orderId}/file?filePath=${encodeURIComponent(filePath)}`);\n          \n          if (!response.ok) {\n            console.warn(`Failed to fetch file: ${filePath}`);\n            continue;\n          }\n          \n          const blob = await response.blob();\n          const fileName = filePath.split('/').pop() || 'download';\n          \n          // Add file to ZIP with proper folder structure\n          zip.file(fileName, blob);\n        } catch (error) {\n          console.warn(`Failed to add file to ZIP: ${filePath}`, error);\n        }\n      }\n      \n      // Generate and download the ZIP\n      const zipBlob = await zip.generateAsync({ type: 'blob' });\n      const url = window.URL.createObjectURL(zipBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${downloadInfo.planTitle.replace(/[^a-z0-9]/gi, '_')}_${downloadInfo.packageType}_package.zip`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n    } catch (error) {\n      console.error('Error creating ZIP:', error);\n      setError('Failed to create ZIP file');\n    } finally {\n      setDownloadingZip(false);\n    }\n  };\n\n  const isExpired = downloadInfo ? new Date() > new Date(downloadInfo.expiresAt) : false;\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n            <span>Loading download information...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error || !downloadInfo) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-2 text-destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span>{error || 'Download information not available'}</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Group files by tier based on file path\n  const filesByTier: Record<string, string[]> = {\n    basic: [],\n    standard: [],\n    premium: [],\n  };\n\n  downloadInfo.files.forEach(filePath => {\n    // Extract tier from file path (e.g., /uploads/plans/basic/file.pdf -> basic)\n    const pathParts = filePath.split('/');\n    const tierIndex = pathParts.findIndex(part => ['basic', 'standard', 'premium'].includes(part));\n    \n    if (tierIndex !== -1) {\n      const tier = pathParts[tierIndex];\n      if (filesByTier[tier as keyof typeof filesByTier]) {\n        filesByTier[tier as keyof typeof filesByTier].push(filePath);\n      }\n    }\n  });\n\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Download className=\"h-5 w-5\" />\n          Download Your Plans\n        </CardTitle>\n        <CardDescription>\n          {downloadInfo.planTitle} - {downloadInfo.packageType.charAt(0).toUpperCase() + downloadInfo.packageType.slice(1)} Package\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {isExpired ? (\n          <div className=\"p-4 bg-destructive/10 border border-destructive/20 rounded-lg\">\n            <div className=\"flex items-center space-x-2 text-destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span className=\"font-medium\">Download Link Expired</span>\n            </div>\n            <p className=\"text-sm text-destructive/80 mt-1\">\n              This download link has expired. Please contact support for assistance.\n            </p>\n          </div>\n        ) : (\n          <>\n            <div className=\"flex items-center justify-between p-3 bg-primary/5 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-4 w-4 text-primary\" />\n                <span className=\"text-sm\">\n                  Expires: {new Date(downloadInfo.expiresAt).toLocaleDateString()}\n                </span>\n              </div>\n              <Badge variant=\"secondary\">\n                {downloadInfo.files.length} file{downloadInfo.files.length > 1 ? 's' : ''}\n              </Badge>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-medium\">Available Files</h4>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleDownloadAsZip}\n                    disabled={downloadingZip || downloadingFiles.size > 0}\n                  >\n                    {downloadingZip ? (\n                      <>\n                        <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                        Creating ZIP...\n                      </>\n                    ) : (\n                      <>\n                        <Archive className=\"h-3 w-3 mr-1\" />\n                        Download as ZIP\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleDownloadAll}\n                    disabled={downloadingZip || downloadingFiles.size > 0}\n                  >\n                    {downloadingFiles.size > 0 ? (\n                      <>\n                        <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                        Downloading...\n                      </>\n                    ) : (\n                      <>\n                        <Download className=\"h-3 w-3 mr-1\" />\n                        Download All\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              {Object.entries(filesByTier).map(([tier, filePaths]) => {\n                if (filePaths.length === 0) return null;\n\n                return (\n                  <div key={tier} className=\"space-y-2\">\n                    <Badge variant=\"outline\" className=\"mb-2\">{tier.charAt(0).toUpperCase() + tier.slice(1)} Tier</Badge>\n                    {filePaths.map((filePath, index) => {\n                      const fileName = filePath.split('/').pop() || `file-${index + 1}`;\n                      const isDownloading = downloadingFiles.has(filePath);\n\n                      return (\n                        <div key={filePath} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                            <div>\n                              <p className=\"font-medium text-sm\">{fileName}</p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {filePath.includes('.pdf') ? 'PDF Document' :\n                                 filePath.includes('.dwg') ? 'AutoCAD Drawing' :\n                                 filePath.includes('.dxf') ? 'DXF Drawing' :\n                                 filePath.includes('.zip') ? 'ZIP Archive' : 'Document'}\n                              </p>\n                            </div>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDownloadFile(filePath)}\n                            disabled={isDownloading}\n                          >\n                            {isDownloading ? (\n                              <Loader2 className=\"h-3 w-3 animate-spin\" />\n                            ) : (\n                              <Download className=\"h-3 w-3\" />\n                            )}\n                          </Button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n            </div>\n\n            <div className=\"p-3 bg-muted/30 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-primary mt-0.5\" />\n                <div className=\"text-sm\">\n                  <p className=\"font-medium\">Download Instructions:</p>\n                  <ul className=\"text-muted-foreground mt-1 space-y-1\">\n                    <li>‚Ä¢ Click on individual files to download them separately</li>\n                    <li>‚Ä¢ Use \"Download All\" to get all files at once</li>\n                    <li>‚Ä¢ Use \"Download as ZIP\" to get all files in a compressed archive</li>\n                    <li>‚Ä¢ Downloads are available for 7 days after purchase</li>\n                    <li>‚Ä¢ Contact support if you need assistance</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":12104},"client/src/components/Features.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Download, Shield, Clock, Users, Palette, FileText } from 'lucide-react';\n\nconst Features = () => {\n  const features = [\n    {\n      icon: Download,\n      title: 'Instant Downloads',\n      description: 'Get immediate access to your purchased plans in multiple formats including PDF, DWG, and CAD files.',\n      highlight: 'Immediate Access',\n    },\n    {\n      icon: Shield,\n      title: 'Quality Guaranteed',\n      description: 'All plans are designed by licensed architects and comply with local building codes and regulations.',\n      highlight: 'Licensed Architects',\n    },\n    {\n      icon: Clock,\n      title: '24/7 Availability',\n      description: 'Browse and purchase plans anytime, anywhere. Our platform is always available when you need it.',\n      highlight: 'Always Open',\n    },\n    {\n      icon: Users,\n      title: 'Expert Support',\n      description: 'Get professional assistance from our team of architects and construction experts.',\n      highlight: 'Professional Help',\n    },\n    {\n      icon: Palette,\n      title: 'Customization Options',\n      description: 'Most plans can be modified to suit your specific needs and preferences.',\n      highlight: 'Flexible Designs',\n    },\n    {\n      icon: FileText,\n      title: 'Complete Documentation',\n      description: 'Detailed floor plans, elevations, sections, and construction details included.',\n      highlight: 'Full Package',\n    },\n  ];\n\n  return (\n    <section className=\"py-20 bg-background\">\n      <div className=\"container px-4\">\n        {/* Header */}\n        <div className=\"text-center max-w-3xl mx-auto mb-16\">\n          <Badge variant=\"secondary\" className=\"mb-4\">\n            Why Choose Us\n          </Badge>\n          <h2 className=\"text-3xl md:text-5xl font-bold text-foreground mb-6\">\n            Professional\n                            <span className=\"bg-gradient-to-r from-primary to-primary bg-clip-text text-transparent\"> Construction Solutions</span>\n          </h2>\n          <p className=\"text-lg text-muted-foreground\">\n            We provide comprehensive architectural services that make building your dream home \n            simple, affordable, and stress-free.\n          </p>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => (\n            <Card \n              key={feature.title} \n              className=\"group hover:shadow-construction transition-all duration-300 transform hover:-translate-y-1 border-0 bg-gradient-card\"\n            >\n              <CardHeader className=\"text-center pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-construction-orange-light rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300\">\n                  <feature.icon className=\"h-8 w-8 text-primary\" />\n                </div>\n                \n                <Badge variant=\"outline\" className=\"w-fit mx-auto mb-2 text-xs\">\n                  {feature.highlight}\n                </Badge>\n                \n                <CardTitle className=\"text-xl group-hover:text-primary transition-colors\">\n                  {feature.title}\n                </CardTitle>\n              </CardHeader>\n\n              <CardContent className=\"text-center\">\n                <CardDescription className=\"text-muted-foreground leading-relaxed\">\n                  {feature.description}\n                </CardDescription>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Bottom CTA */}\n        <div className=\"text-center mt-16\">\n          <div className=\"inline-flex items-center space-x-2 text-sm text-muted-foreground\">\n            <div className=\"flex -space-x-2\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"w-8 h-8 bg-primary rounded-full border-2 border-background flex items-center justify-center text-xs text-primary-foreground font-semibold\">\n                  {i}\n                </div>\n              ))}\n            </div>\n            <span>Join 2000+ satisfied customers who trust our plans</span>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Features;","size_bytes":4372},"client/src/components/Footer.tsx":{"content":"import { Link } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { \n  Building2, \n  Mail, \n  Phone, \n  MapPin, \n  ArrowRight, \n  Facebook, \n  Twitter, \n  Instagram, \n  Linkedin,\n  FileText,\n  Award\n} from 'lucide-react';\n\nconst Footer = () => {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-gradient-to-br from-foreground via-foreground to-foreground/95 text-foreground-foreground relative overflow-hidden\">\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute top-0 left-0 w-full h-full bg-[radial-gradient(circle_at_1px_1px,rgba(255,255,255,0.15)_1px,transparent_0)] bg-[size:20px_20px]\"></div>\n      </div>\n\n      <div className=\"relative z-10\">\n              {/* Main Footer Content */}\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8\">\n            {/* Company Info */}\n            <div className=\"lg:col-span-1 space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"relative\">\n                  <div className=\"absolute -inset-1 bg-gradient-to-br from-primary to-secondary rounded-xl blur opacity-30\"></div>\n                </div>\n                <div>\n                  <div className=\"flex items-center space-x-2\">\n                    <img \n                      src=\"/logo.png\" \n                      alt=\"SAK Constructions\" \n                      className=\"h-6 w-auto\"\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <p className=\"text-muted-foreground leading-relaxed text-sm\">\n                Building dreams with professional architectural plans. Trusted by Ghana's leading contractors and architects.\n              </p>\n              \n              <div className=\"flex space-x-3\">\n                {[\n                  { icon: Facebook, href: '#', label: 'Facebook' },\n                  { icon: Twitter, href: '#', label: 'Twitter' },\n                  { icon: Instagram, href: '#', label: 'Instagram' },\n                  { icon: Linkedin, href: '#', label: 'LinkedIn' },\n                ].map((social) => (\n                  <a\n                    key={social.label}\n                    href={social.href}\n                    className=\"w-8 h-8 bg-muted/20 hover:bg-primary/20 rounded-lg flex items-center justify-center text-muted-foreground hover:text-primary transition-all duration-300 group\"\n                    aria-label={social.label}\n                  >\n                    <social.icon className=\"w-4 h-4 group-hover:scale-110 transition-transform\" />\n                  </a>\n                ))}\n              </div>\n            </div>\n\n            {/* Quick Links */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-base font-semibold text-white flex items-center gap-2\">\n                <FileText className=\"w-4 h-4 text-primary\" />\n                Quick Links\n              </h4>\n              <ul className=\"space-y-2\">\n                {[\n                  { name: 'Browse Plans', href: '/plans' },\n                  { name: 'Services', href: '/services' },\n                  { name: 'About Us', href: '/about' },\n                  { name: 'Contact', href: '/contact' },\n                  { name: 'How It Works', href: '/how-it-works' },\n                  { name: 'FAQ', href: '/faq' },\n                ].map((link) => (\n                  <li key={link.name}>\n                    <Link\n                      to={link.href}\n                      className=\"text-muted-foreground hover:text-primary transition-colors duration-300 flex items-center gap-2 group\"\n                    >\n                      <ArrowRight className=\"w-3 h-3 opacity-0 group-hover:opacity-100 transition-all duration-300 group-hover:translate-x-1\" />\n                      {link.name}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Services */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-base font-semibold text-white flex items-center gap-2\">\n                <Award className=\"w-4 h-4 text-primary\" />\n                Our Services\n              </h4>\n              <ul className=\"space-y-2\">\n                {[\n                  'Villa Plans',\n                  'Bungalow Designs',\n                  'Townhouse Plans',\n                  'Custom Architecture',\n                  '3D Renderings',\n                  'Construction Support',\n                ].map((service) => (\n                  <li key={service}>\n                    <span className=\"text-muted-foreground hover:text-primary transition-colors duration-300 cursor-pointer\">\n                      {service}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Contact & Newsletter */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-base font-semibold text-white flex items-center gap-2\">\n                <Mail className=\"w-4 h-4 text-primary\" />\n                Stay Connected\n              </h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                  <Phone className=\"w-4 h-4 text-primary\" />\n                  <span className=\"text-sm\">0246798967 / 0233798967</span>\n                </div>\n                <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                  <Mail className=\"w-4 h-4 text-primary\" />\n                  <span className=\"text-sm\">sakconstructiongh@gmail.com</span>\n                </div>\n                <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                  <MapPin className=\"w-4 h-4 text-primary\" />\n                  <span className=\"text-sm\">Tema com 25, Greater Accra around Devtraco Estates</span>\n                </div>\n              </div>\n\n              {/* Newsletter Subscription */}\n              <div className=\"space-y-2\">\n                <p className=\"text-xs text-muted-foreground\">Subscribe to our newsletter</p>\n                <div className=\"flex space-x-2\">\n                  <Input\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    className=\"flex-1 bg-muted/20 border-muted/30 text-white placeholder:text-muted-foreground focus:border-primary focus:bg-muted/30 transition-all duration-300 text-sm py-2\"\n                  />\n                  <Button className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-white px-3 py-2 transition-all duration-300\">\n                    <ArrowRight className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n\n        {/* Bottom Bar */}\n        <div className=\"border-t border-muted/20 bg-muted/5\">\n          <div className=\"container mx-auto px-4 py-4\">\n            <div className=\"flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0\">\n              <div className=\"text-xs text-muted-foreground flex items-center space-x-2\">\n                <img \n                  src=\"/logo.png\" \n                  alt=\"SAK Constructions\" \n                  className=\"h-4 w-auto opacity-70\"\n                />\n                <span>¬© {currentYear} All rights reserved.</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                <Link to=\"/terms\" className=\"hover:text-primary transition-colors duration-300\">\n                  Terms of Service\n                </Link>\n                <Link to=\"/privacy\" className=\"hover:text-primary transition-colors duration-300\">\n                  Privacy Policy\n                </Link>\n                <Link to=\"/cookies\" className=\"hover:text-primary transition-colors duration-300\">\n                  Cookie Policy\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":8351},"client/src/components/Header.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Menu, \n  X, \n  Building2, \n  Home, \n  FileText, \n  Info, \n  Phone, \n  User, \n  ShoppingCart,\n  Heart,\n  LogOut,\n  Settings,\n  ChevronDown\n} from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\nimport AuthModal from './AuthModal';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\nconst Header = () => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [authModalOpen, setAuthModalOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  const { user, profile, isAuthenticated, signOut } = useAuth();\n  const location = useLocation();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const handleAuthClick = () => {\n    setAuthModalOpen(true);\n  };\n\n  const handleSignOut = async () => {\n    await signOut();\n    setIsMenuOpen(false);\n  };\n\n  const navigation = [\n    { name: 'Home', href: '/', icon: Home },\n    { name: 'Plans', href: '/plans', icon: FileText },\n    { name: 'Services', href: '/services', icon: Building2 },\n    { name: 'About', href: '/about', icon: Info },\n    { name: 'Contact', href: '/contact', icon: Phone },\n  ];\n\n  const isActive = (path: string) => location.pathname === path;\n\n  return (\n    <>\n      <header className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n        isScrolled \n          ? 'bg-background/80 backdrop-blur-xl border-b border-border/50 shadow-lg' \n          : 'bg-transparent'\n      }`}>\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between h-16 lg:h-20\">\n            {/* Logo */}\n            <Link to=\"/\" className=\"flex items-center space-x-3 group\">\n              <div className=\"hidden sm:block\">\n                <div className=\"flex items-center space-x-2\">\n                  <img \n                    src=\"/logo.png\" \n                    alt=\"SAK Constructions\" \n                    className=\"h-8 w-auto\"\n                  />\n                </div>\n              </div>\n            </Link>\n\n            {/* Desktop Navigation */}\n            <nav className=\"hidden lg:flex items-center space-x-8\">\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Link\n                    key={item.name}\n                    to={item.href}\n                    className={`flex items-center space-x-2 px-4 py-2 rounded-xl transition-all duration-300 group ${\n                      isActive(item.href)\n                        ? 'text-primary bg-primary/10 border border-primary/20'\n                        : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    <span className=\"font-medium\">{item.name}</span>\n                  </Link>\n                );\n              })}\n            </nav>\n\n            {/* Desktop Actions */}\n            <div className=\"hidden lg:flex items-center space-x-4\">\n              {isAuthenticated ? (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full p-0 hover:bg-muted/50\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarImage src={profile?.avatar_url} alt={profile?.first_name || user?.email} />\n                        <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n                          {profile?.first_name?.[0]}{profile?.last_name?.[0] || user?.email?.[0]?.toUpperCase() || 'U'}\n                        </AvatarFallback>\n                      </Avatar>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                    <DropdownMenuLabel className=\"font-normal\">\n                      <div className=\"flex flex-col space-y-1\">\n                        <p className=\"text-sm font-medium leading-none\">\n                          {profile?.first_name} {profile?.last_name}\n                        </p>\n                        <p className=\"text-xs leading-none text-muted-foreground\">\n                          {user?.email}\n                        </p>\n                      </div>\n                    </DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link to=\"/user/dashboard\" className=\"cursor-pointer\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        <span>Dashboard</span>\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link to=\"/user/profile\" className=\"cursor-pointer\">\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        <span>Profile</span>\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link to=\"/user/orders\" className=\"cursor-pointer\">\n                        <ShoppingCart className=\"mr-2 h-4 w-4\" />\n                        <span>Orders</span>\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link to=\"/user/favorites\" className=\"cursor-pointer\">\n                        <Heart className=\"mr-2 h-4 w-4\" />\n                        <span>Favorites</span>\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleSignOut} className=\"cursor-pointer\">\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Sign Out</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              ) : (\n                <Button \n                  onClick={handleAuthClick}\n                  className=\"btn-primary\"\n                >\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Get Started\n                </Button>\n              )}\n            </div>\n\n            {/* Mobile Menu Button */}\n            <button\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              className=\"lg:hidden p-2 rounded-xl bg-muted/50 hover:bg-muted/80 transition-colors\"\n            >\n              {isMenuOpen ? (\n                <X className=\"w-6 h-6 text-foreground\" />\n              ) : (\n                <Menu className=\"w-6 h-6 text-foreground\" />\n              )}\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"lg:hidden border-t border-border/50 bg-background/95 backdrop-blur-xl\">\n            <div className=\"container mx-auto px-4 py-6\">\n              <nav className=\"space-y-4\">\n                {navigation.map((item) => {\n                  const Icon = item.icon;\n                  return (\n                    <Link\n                      key={item.name}\n                      to={item.href}\n                      onClick={() => setIsMenuOpen(false)}\n                      className={`flex items-center space-x-3 px-4 py-3 rounded-xl transition-all duration-300 ${\n                        isActive(item.href)\n                          ? 'text-primary bg-primary/10 border border-primary/20'\n                          : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'\n                      }`}\n                    >\n                      <Icon className=\"w-5 h-5\" />\n                      <span className=\"font-medium\">{item.name}</span>\n                    </Link>\n                  );\n                })}\n              </nav>\n\n              <div className=\"mt-6 pt-6 border-t border-border/50 space-y-4\">\n                {isAuthenticated ? (\n                  <>\n                    {/* User Profile Section */}\n                    <div className=\"flex items-center space-x-3 p-3 bg-muted/30 rounded-lg\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarImage src={profile?.avatar_url} alt={profile?.first_name || user?.email} />\n                        <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n                          {profile?.first_name?.[0]}{profile?.last_name?.[0] || user?.email?.[0]?.toUpperCase() || 'U'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium leading-none\">\n                          {profile?.first_name} {profile?.last_name}\n                        </p>\n                        <p className=\"text-xs leading-none text-muted-foreground truncate\">\n                          {user?.email}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {/* User Menu Items */}\n                    <div className=\"space-y-2\">\n                      <Link to=\"/user/dashboard\" onClick={() => setIsMenuOpen(false)}>\n                        <Button variant=\"outline\" className=\"w-full btn-outline-modern justify-start\">\n                          <User className=\"w-4 h-4 mr-3\" />\n                          Dashboard\n                        </Button>\n                      </Link>\n                      <Link to=\"/user/profile\" onClick={() => setIsMenuOpen(false)}>\n                        <Button variant=\"outline\" className=\"w-full btn-outline-modern justify-start\">\n                          <Settings className=\"w-4 h-4 mr-3\" />\n                          Profile\n                        </Button>\n                      </Link>\n                      <Link to=\"/user/orders\" onClick={() => setIsMenuOpen(false)}>\n                        <Button variant=\"outline\" className=\"w-full btn-outline-modern justify-start\">\n                          <ShoppingCart className=\"w-4 h-4 mr-3\" />\n                          Orders\n                        </Button>\n                      </Link>\n                      <Link to=\"/user/favorites\" onClick={() => setIsMenuOpen(false)}>\n                        <Button variant=\"outline\" className=\"w-full btn-outline-modern justify-start\">\n                          <Heart className=\"w-4 h-4 mr-3\" />\n                          Favorites\n                        </Button>\n                      </Link>\n                      <Button \n                        variant=\"outline\" \n                        onClick={handleSignOut}\n                        className=\"w-full btn-outline-modern justify-start\"\n                      >\n                        <LogOut className=\"w-4 h-4 mr-3\" />\n                        Sign Out\n                      </Button>\n                    </div>\n                  </>\n                ) : (\n                  <Button \n                    onClick={() => {\n                      handleAuthClick();\n                      setIsMenuOpen(false);\n                    }}\n                    className=\"w-full btn-primary\"\n                  >\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Get Started\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </header>\n\n      {/* Spacer for fixed header */}\n      <div className=\"h-16 lg:h-20\"></div>\n\n      <AuthModal isOpen={authModalOpen} onClose={() => setAuthModalOpen(false)} />\n    </>\n  );\n};\n\nexport default Header;","size_bytes":12153},"client/src/components/Hero.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Search, Play, ArrowRight, Star, Shield, Award, Users } from 'lucide-react';\nimport { useState } from 'react';\nimport heroImage from '@/assets/hero-construction.jpg';\nimport AuthModal from './AuthModal';\n\nconst Hero = () => {\n  const [authModalOpen, setAuthModalOpen] = useState(false);\n\n  const handleAuthClick = () => {\n    setAuthModalOpen(true);\n  };\n\n  return (\n    <>\n      <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n        {/* Background Image with Enhanced Overlay */}\n        <div className=\"absolute inset-0 z-0\">\n          <img\n            src={heroImage}\n            alt=\"Construction Plans and Blueprints\"\n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-br from-background/90 via-background/80 to-primary/20\" />\n          <div className=\"absolute inset-0 bg-gradient-to-r from-background/95 via-background/85 to-transparent\" />\n        </div>\n\n        {/* Floating Geometric Elements */}\n        <div className=\"absolute inset-0 z-5 overflow-hidden\">\n          <div className=\"absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-primary/20 to-secondary/20 rounded-full blur-xl float\"></div>\n          <div className=\"absolute top-40 right-20 w-24 h-24 bg-gradient-to-br from-accent/20 to-primary/20 rounded-full blur-lg float\" style={{animationDelay: '2s'}}></div>\n          <div className=\"absolute bottom-40 left-20 w-20 h-20 bg-gradient-to-br from-secondary/20 to-accent/20 rounded-full blur-lg float\" style={{animationDelay: '4s'}}></div>\n        </div>\n\n        {/* Content */}\n        <div className=\"relative z-10 container px-4 py-20\">\n          <div className=\"max-w-5xl mx-auto text-center space-y-10\">\n            {/* Premium Badge */}\n            <div className=\"inline-flex items-center px-6 py-3 rounded-full glass border border-primary/30 shadow-construction\">\n              <Star className=\"w-5 h-5 text-primary mr-2\" />\n              <span className=\"text-sm font-semibold text-primary\">Ghana's #1 Construction Plans Platform</span>\n            </div>\n\n            {/* Main Heading */}\n            <div className=\"space-y-6\">\n              <h1 className=\"text-5xl md:text-7xl lg:text-8xl font-bold text-foreground leading-tight\">\n                Premium\n                <span className=\"block gradient-text\"> Construction Plans </span>\n                <span className=\"text-4xl md:text-5xl lg:text-6xl text-muted-foreground font-normal\">\n                  for Your Dream Home\n                </span>\n              </h1>\n            </div>\n\n            {/* Subheading */}\n            <p className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n              Discover professionally designed architectural plans for villas, bungalows, and townhouses. \n              Built by experts, trusted by professionals across Ghana.\n            </p>\n\n            {/* Enhanced Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 py-8\">\n              {[\n                { number: '50+', label: 'House Plans', icon: 'üè†', color: 'from-primary to-primary' },\n                { number: '2500+', label: 'Happy Customers', icon: 'üòä', color: 'from-secondary to-secondary-foreground' },\n                { number: '100%', label: 'Satisfaction', icon: '‚≠ê', color: 'from-accent to-accent-foreground' },\n              ].map((stat, index) => (\n                <div key={stat.label} className=\"group\">\n                  <div className={`bg-gradient-to-br ${stat.color} p-6 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-500 transform hover:scale-105`}>\n                    <div className=\"text-4xl mb-2\">{stat.icon}</div>\n                    <div className=\"text-3xl md:text-4xl font-bold text-white mb-1\">{stat.number}</div>\n                    <div className=\"text-sm text-white/90 font-medium\">{stat.label}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n              <Button \n                size=\"lg\" \n                className=\"btn-primary text-lg px-10 py-4\"\n                asChild\n              >\n                <a href=\"/plans\" className=\"flex items-center gap-2\">\n                  Browse Plans\n                  <ArrowRight className=\"w-5 h-5\" />\n                </a>\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\" \n                className=\"btn-outline-modern text-lg px-10 py-4\"\n                onClick={handleAuthClick}\n              >\n                Get Started Free\n              </Button>\n            </div>\n\n            {/* Trust Indicators */}\n            <div className=\"pt-12\">\n              <p className=\"text-sm text-muted-foreground mb-6\">Trusted by Ghana's leading contractors & architects</p>\n              <div className=\"flex flex-wrap justify-center items-center gap-6\">\n                {[\n                  { label: 'Certified', icon: Shield, color: 'text-success' },\n                  { label: 'Professional', icon: Award, color: 'text-warning' },\n                  { label: 'Quality', icon: Star, color: 'text-primary' },\n                  { label: 'Trusted', icon: Users, color: 'text-secondary' },\n                ].map((badge) => (\n                  <div key={badge.label} className=\"flex items-center gap-2 px-4 py-2 rounded-full bg-muted/50 border border-border/50\">\n                    <badge.icon className={`w-4 h-4 ${badge.color}`} />\n                    <span className=\"text-sm font-medium text-muted-foreground\">{badge.label}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Search Bar */}\n            <div className=\"max-w-2xl mx-auto pt-8\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search for plans, architects, or locations...\"\n                  className=\"w-full pl-12 pr-4 py-4 bg-background/80 backdrop-blur-sm border border-border/50 rounded-2xl focus:ring-2 focus:ring-primary/20 focus:border-primary transition-all duration-300 text-foreground placeholder:text-muted-foreground\"\n                />\n                <Button className=\"absolute right-2 top-1/2 transform -translate-y-1/2 px-6 py-2\">\n                  Search\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Scroll Indicator */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 z-10\">\n          <div className=\"flex flex-col items-center space-y-2\">\n            <span className=\"text-sm text-muted-foreground\">Scroll to explore</span>\n            <div className=\"w-6 h-10 border-2 border-primary/30 rounded-full flex justify-center\">\n              <div className=\"w-1 h-3 bg-primary rounded-full mt-2 animate-bounce\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <AuthModal isOpen={authModalOpen} onClose={() => setAuthModalOpen(false)} />\n    </>\n  );\n};\n\nexport default Hero;","size_bytes":7384},"client/src/components/PaystackPayment.tsx":{"content":"\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { CreditCard, Loader2, User, LogIn } from 'lucide-react';\nimport { api } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useNavigate } from 'react-router-dom';\n\ninterface PaystackPaymentProps {\n  planId: string;\n  planTitle: string;\n  packageType: string;\n  amount: number;\n  onSuccess: (paymentData: any) => void;\n  onError: (error: string) => void;\n}\n\nexport const PaystackPayment = ({\n  planId,\n  planTitle,\n  packageType,\n  amount,\n  onSuccess,\n  onError,\n}: PaystackPaymentProps) => {\n  const { user, isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(user?.email || '');\n  const [loading, setLoading] = useState(false);\n\n  // Debug authentication state\n  console.log('PaystackPayment - Auth state:', { isAuthenticated, user });\n\n  const handlePayment = async () => {\n    console.log('handlePayment called - Auth state:', { isAuthenticated, user });\n    \n    if (!isAuthenticated) {\n      onError('Please sign in to make a purchase');\n      return;\n    }\n\n    if (!email) {\n      onError('Please enter your email address');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Debug: Log the payment data being sent\n      const paymentData = {\n        email,\n        amount,\n        planId,\n        planTitle,\n        packageType,\n        userId: user?.id, // Include user ID\n      };\n      console.log('Sending payment data:', paymentData);\n      console.log('Payment data types:', {\n        email: typeof email,\n        amount: typeof amount,\n        planId: typeof planId,\n        planTitle: typeof planTitle,\n        packageType: typeof packageType,\n        userId: typeof user?.id\n      });\n\n      // Initialize payment with Paystack\n      const response = await api.initializePayment(paymentData);\n\n      if (response.success) {\n        // Redirect to Paystack payment page\n        window.location.href = response.authorization_url;\n      } else {\n        onError('Failed to initialize payment');\n      }\n    } catch (error) {\n      console.error('Payment error:', error);\n      onError('Payment initialization failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Sign In Required\n          </CardTitle>\n          <CardDescription>\n            You need to sign in to make a purchase. This helps us track your orders and provide better service.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button\n            onClick={() => navigate('/')}\n            className=\"w-full\"\n            size=\"lg\"\n          >\n            <LogIn className=\"mr-2 h-4 w-4\" />\n            Sign In to Continue\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CreditCard className=\"h-5 w-5\" />\n          Payment with Paystack\n        </CardTitle>\n        <CardDescription>\n          Secure payment powered by Paystack. You'll be redirected to complete your payment.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email Address</Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"your@email.com\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n          <p className=\"text-xs text-muted-foreground\">\n            Receipt and download link will be sent to this email\n          </p>\n        </div>\n\n        <div className=\"pt-4\">\n          <Button\n            onClick={handlePayment}\n            disabled={loading || !email}\n            className=\"w-full\"\n            size=\"lg\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Initializing Payment...\n              </>\n            ) : (\n              `Pay ‚Çµ${amount} with Paystack`\n            )}\n          </Button>\n        </div>\n\n        <div className=\"text-center space-y-2\">\n          <p className=\"text-xs text-muted-foreground\">\n            Powered by Paystack - Secure SSL encryption\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            Supports cards, mobile money, bank transfer, and USSD\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":4891},"client/src/components/Plan3DViewer.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { \n  Box, \n  Eye, \n  EyeOff, \n  RotateCcw, \n  Fullscreen,\n  Download\n} from 'lucide-react';\n\ninterface Plan3DViewerProps {\n  plan: {\n    id: number;\n    title: string;\n    plan_type: string;\n    bedrooms: number;\n    bathrooms: number;\n    area_sqft: number;\n  };\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst Plan3DViewer = ({ plan, isOpen, onClose }: Plan3DViewerProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (isOpen && canvasRef.current) {\n      init3DScene();\n    }\n  }, [isOpen, plan]);\n\n  const init3DScene = async () => {\n    if (!canvasRef.current) return;\n\n    setIsLoading(true);\n    \n    try {\n      // For now, we'll create a placeholder 3D scene\n      // In a real implementation, you would use Three.js or similar\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      \n      if (ctx) {\n        // Set canvas size\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n        \n        // Draw a simple 3D-like house representation\n        ctx.fillStyle = '#f0f0f0';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        \n        // Draw house outline\n        ctx.strokeStyle = '#333';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(100, 100, 200, 150);\n        \n        // Draw roof\n        ctx.beginPath();\n        ctx.moveTo(100, 100);\n        ctx.lineTo(200, 50);\n        ctx.lineTo(300, 100);\n        ctx.stroke();\n        \n        // Draw windows\n        ctx.fillStyle = '#87CEEB';\n        ctx.fillRect(120, 120, 30, 30);\n        ctx.fillRect(250, 120, 30, 30);\n        \n        // Draw door\n        ctx.fillStyle = '#8B4513';\n        ctx.fillRect(180, 180, 40, 70);\n        \n        // Add text\n        ctx.fillStyle = '#333';\n        ctx.font = '16px Arial';\n        ctx.fillText(`${plan.title} - 3D View`, 20, 30);\n        ctx.fillText(`${plan.bedrooms} BR, ${plan.bathrooms} BA`, 20, 50);\n        ctx.fillText(`${plan.area_sqft} sq ft`, 20, 70);\n      }\n      \n    } catch (error) {\n      console.error('Error initializing 3D scene:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetView = () => {\n    if (canvasRef.current) {\n      init3DScene();\n    }\n  };\n\n  const downloadScreenshot = () => {\n    if (canvasRef.current) {\n      const link = document.createElement('a');\n      link.download = `${plan.title}-3D-view.png`;\n      link.href = canvasRef.current.toDataURL();\n      link.click();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-background rounded-2xl shadow-2xl w-full max-w-6xl max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <div className=\"flex items-center space-x-3\">\n            <Box className=\"w-6 h-6 text-primary\" />\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">3D Plan Viewer</h2>\n              <p className=\"text-muted-foreground\">{plan.title}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"outline\" size=\"sm\" onClick={resetView}>\n              <RotateCcw className=\"w-4 h-4 mr-2\" />\n              Reset View\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={downloadScreenshot}>\n              <Download className=\"w-4 h-4 mr-2\" />\n              Screenshot\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <EyeOff className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"bg-gradient-to-br from-sky-100 to-blue-100 rounded-lg overflow-hidden relative min-h-[500px]\">\n            {isLoading && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-background/80\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Loading 3D scene...</p>\n                </div>\n              </div>\n            )}\n            \n            <canvas\n              ref={canvasRef}\n              className=\"w-full h-full cursor-grab active:cursor-grabbing\"\n              style={{ display: isLoading ? 'none' : 'block' }}\n            />\n            \n            {/* Instructions Overlay */}\n            <div className=\"absolute bottom-4 left-4 bg-background/90 rounded-lg p-3 text-sm text-muted-foreground\">\n              <p>üñ±Ô∏è Click and drag to rotate ‚Ä¢ üñ±Ô∏è Scroll to zoom</p>\n            </div>\n          </div>\n          \n          {/* Plan Information */}\n          <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-2\">Plan Type</h3>\n                <p className=\"text-muted-foreground\">{plan.plan_type}</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-2\">Bedrooms</h3>\n                <p className=\"text-muted-foreground\">{plan.bedrooms}</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold mb-2\">Area</h3>\n                <p className=\"text-muted-foreground\">{plan.area_sqft} sq ft</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Plan3DViewer;\n","size_bytes":6018},"client/src/components/PlanCategories.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowRight, Bed, Bath, Square, Star } from 'lucide-react';\nimport villaImage from '@/assets/villa-plan.jpg';\nimport bungalowImage from '@/assets/bungalow-plan.jpg';\nimport townhouseImage from '@/assets/townhouse-plan.jpg';\n\nconst PlanCategories = () => {\n  const categories = [\n    {\n      title: 'Luxury Villas',\n      description: 'Spacious multi-story homes with premium features and modern amenities',\n      image: villaImage,\n      plans: 10,\n      startingPrice: '‚Çµ2,100',\n      features: ['4-6 Bedrooms', '3-5 Bathrooms', '2600-4200 sq ft'],\n      popular: true,\n    },\n    {\n      title: 'Modern Bungalows',\n      description: 'Single-story comfort with contemporary design and family-friendly layouts',\n      image: bungalowImage,\n      plans: 10,\n      startingPrice: '‚Çµ1,500',\n      features: ['2-4 Bedrooms', '2-3 Bathrooms', '1200-2200 sq ft'],\n      popular: false,\n    },\n    {\n      title: 'Stylish Townhouses',\n      description: 'Multi-level urban living solutions with smart space utilization',\n      image: townhouseImage,\n      plans: 10,\n      startingPrice: '‚Çµ1,700',\n      features: ['2-5 Bedrooms', '2-4 Bathrooms', '1600-2800 sq ft'],\n      popular: false,\n    },\n  ];\n\n  const features = [\n    {\n      icon: Bed,\n      title: 'Flexible Layouts',\n      description: 'From cozy 2-bedroom homes to spacious 6-bedroom estates',\n    },\n    {\n      icon: Bath,\n      title: 'Modern Amenities',\n      description: 'Contemporary bathrooms, kitchens, and living spaces',\n    },\n    {\n      icon: Square,\n      title: 'Various Sizes',\n      description: 'Plans ranging from 1,200 to 4,200+ square feet',\n    },\n    {\n      icon: Star,\n      title: 'Premium Quality',\n      description: 'Professionally designed by licensed architects',\n    },\n  ];\n\n  return (\n    <section id=\"browse\" className=\"py-20 bg-gradient-to-b from-background to-construction-gray-light\">\n      <div className=\"container px-4\">\n        {/* Header */}\n        <div className=\"text-center max-w-3xl mx-auto mb-16\">\n          <Badge variant=\"secondary\" className=\"mb-4\">\n            Popular Categories\n          </Badge>\n          <h2 className=\"text-3xl md:text-5xl font-bold text-foreground mb-6\">\n            Choose Your Perfect\n                            <span className=\"bg-gradient-to-r from-primary to-primary bg-clip-text text-transparent\"> Home Design</span>\n          </h2>\n          <p className=\"text-lg text-muted-foreground\">\n            Explore our extensive collection of 30+ professionally designed house plans, \n            each crafted to meet modern living standards and local building requirements.\n          </p>\n        </div>\n\n        {/* Plan Categories Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-20\">\n          {categories.map((category) => (\n            <Card key={category.title} className=\"group hover:shadow-construction transition-all duration-300 transform hover:-translate-y-2 overflow-hidden border-0 bg-gradient-card\">\n              {category.popular && (\n                <div className=\"absolute top-4 right-4 z-10\">\n                  <Badge className=\"bg-primary text-primary-foreground\">\n                    <Star className=\"h-3 w-3 mr-1\" />\n                    Popular\n                  </Badge>\n                </div>\n              )}\n              \n              <div className=\"relative h-48 overflow-hidden\">\n                <img\n                  src={category.image}\n                  alt={category.title}\n                  className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent\" />\n                <div className=\"absolute bottom-4 left-4 text-white\">\n                  <div className=\"text-sm font-medium\">{category.plans} Plans Available</div>\n                  <div className=\"text-xs opacity-90\">Starting from {category.startingPrice}</div>\n                </div>\n              </div>\n\n              <CardHeader>\n                <CardTitle className=\"text-xl\">{category.title}</CardTitle>\n                <CardDescription className=\"text-muted-foreground\">\n                  {category.description}\n                </CardDescription>\n              </CardHeader>\n\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {category.features.map((feature) => (\n                      <div key={feature} className=\"flex items-center text-sm text-muted-foreground\">\n                        <div className=\"w-2 h-2 bg-primary rounded-full mr-3\" />\n                        {feature}\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <Button variant=\"outline\" className=\"w-full group-hover:bg-primary group-hover:text-primary-foreground\">\n                    Browse {category.title}\n                    <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {features.map((feature) => (\n            <div key={feature.title} className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16 bg-construction-orange-light rounded-2xl flex items-center justify-center\">\n                <feature.icon className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground\">{feature.title}</h3>\n              <p className=\"text-muted-foreground\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PlanCategories;","size_bytes":6059},"client/src/components/PlanComparison.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Search, \n  Star, \n  Download, \n  Bed, \n  Bath, \n  Square,\n  Users,\n  Building2,\n  CheckCircle,\n  X,\n  Plus,\n  ArrowRight,\n  Scale,\n  Heart\n} from 'lucide-react';\nimport { api } from '@/lib/api';\n\ninterface Plan {\n  id: number;\n  title: string;\n  description: string;\n  plan_type: string;\n  bedrooms: number;\n  bathrooms: number;\n  area_sqft: number;\n  basic_price: number;\n  standard_price: number;\n  premium_price: number;\n  image_url?: string;\n  featured?: boolean;\n  status: string;\n}\n\ninterface PlanComparisonProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst PlanComparison = ({ isOpen, onClose }: PlanComparisonProps) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedType, setSelectedType] = useState('all');\n  const [plans, setPlans] = useState<Plan[]>([]);\n  const [filteredPlans, setFilteredPlans] = useState<Plan[]>([]);\n  const [selectedPlans, setSelectedPlans] = useState<Plan[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [viewMode, setViewMode] = useState<'grid' | 'table'>('table');\n\n  useEffect(() => {\n    if (isOpen) {\n      fetchPlans();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    filterPlans();\n  }, [plans, searchTerm, selectedType]);\n\n  const fetchPlans = async () => {\n    try {\n      const data = await api.getPlans({ status: 'active' });\n      setPlans(data || []);\n    } catch (error) {\n      console.error('Error fetching plans:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterPlans = () => {\n    let filtered = plans.filter(plan => {\n      const matchesSearch = plan.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           plan.description.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesType = selectedType === 'all' || plan.plan_type === selectedType;\n      return matchesSearch && matchesType;\n    });\n    setFilteredPlans(filtered);\n  };\n\n  const addToComparison = (plan: Plan) => {\n    if (selectedPlans.length >= 4) {\n      alert('You can compare up to 4 plans at once');\n      return;\n    }\n    if (!selectedPlans.find(p => p.id === plan.id)) {\n      setSelectedPlans([...selectedPlans, plan]);\n    }\n  };\n\n  const removeFromComparison = (planId: number) => {\n    setSelectedPlans(selectedPlans.filter(p => p.id !== planId));\n  };\n\n  const clearComparison = () => {\n    setSelectedPlans([]);\n  };\n\n  const getPriceRange = (plan: Plan) => {\n    const min = Math.min(plan.basic_price, plan.standard_price, plan.premium_price);\n    const max = Math.max(plan.basic_price, plan.standard_price, plan.premium_price);\n    return min === max ? `‚Çµ${min.toLocaleString()}` : `‚Çµ${min.toLocaleString()} - ‚Çµ${max.toLocaleString()}`;\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-background rounded-2xl shadow-2xl w-full max-w-7xl max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <div className=\"flex items-center space-x-3\">\n            <Scale className=\"w-6 h-6 text-primary\" />\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Plan Comparison</h2>\n              <p className=\"text-muted-foreground\">Compare up to 4 house plans side by side</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"outline\" onClick={clearComparison} disabled={selectedPlans.length === 0}>\n              Clear All\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex h-[calc(90vh-120px)]\">\n          {/* Left Panel - Plan Selection */}\n          <div className=\"w-1/2 border-r p-6 overflow-y-auto\">\n            <div className=\"space-y-4 mb-6\">\n              <div className=\"flex space-x-3\">\n                <Input\n                  placeholder=\"Search plans...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"flex-1\"\n                />\n                <Select value={selectedType} onValueChange={setSelectedType}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"villa\">Villa</SelectItem>\n                    <SelectItem value=\"bungalow\">Bungalow</SelectItem>\n                    <SelectItem value=\"townhouse\">Townhouse</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant={viewMode === 'grid' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('grid')}\n                >\n                  Grid\n                </Button>\n                <Button\n                  variant={viewMode === 'table' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('table')}\n                >\n                  Table\n                </Button>\n              </div>\n            </div>\n\n            {loading ? (\n              <div className=\"space-y-4\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : viewMode === 'grid' ? (\n              <div className=\"grid grid-cols-1 gap-4\">\n                {filteredPlans.map((plan) => (\n                  <Card \n                    key={plan.id} \n                    className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n                      selectedPlans.find(p => p.id === plan.id) ? 'ring-2 ring-primary' : ''\n                    }`}\n                    onClick={() => addToComparison(plan)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <img \n                          src={plan.image_url || '/placeholder.svg'} \n                          alt={plan.title}\n                          className=\"w-20 h-20 object-cover rounded-lg\"\n                        />\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h3 className=\"font-semibold text-foreground truncate\">{plan.title}</h3>\n                            {selectedPlans.find(p => p.id === plan.id) && (\n                              <CheckCircle className=\"w-5 h-5 text-primary\" />\n                            )}\n                          </div>\n                          <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\">\n                            {plan.description}\n                          </p>\n                          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                            <span className=\"flex items-center\">\n                              <Bed className=\"w-3 h-3 mr-1\" />\n                              {plan.bedrooms} BR\n                            </span>\n                            <span className=\"flex items-center\">\n                              <Bath className=\"w-3 h-3 mr-1\" />\n                              {plan.bathrooms} BA\n                            </span>\n                            <span className=\"flex items-center\">\n                              <Square className=\"w-3 h-3 mr-1\" />\n                              {plan.area_sqft?.toLocaleString()} sq ft\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant=\"outline\" className=\"mb-2 capitalize\">\n                            {plan.plan_type}\n                          </Badge>\n                          <div className=\"text-lg font-bold text-primary\">\n                            {getPriceRange(plan)}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {filteredPlans.map((plan) => (\n                  <div \n                    key={plan.id}\n                    className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-all duration-200 hover:bg-muted/50 ${\n                      selectedPlans.find(p => p.id === plan.id) ? 'bg-primary/10 ring-1 ring-primary' : ''\n                    }`}\n                    onClick={() => addToComparison(plan)}\n                  >\n                    <img \n                      src={plan.image_url || '/placeholder.svg'} \n                      alt={plan.title}\n                      className=\"w-12 h-12 object-cover rounded\"\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-medium text-foreground truncate\">{plan.title}</h3>\n                      <p className=\"text-sm text-muted-foreground truncate\">{plan.description}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant=\"outline\" className=\"mb-1 capitalize text-xs\">\n                        {plan.plan_type}\n                      </Badge>\n                      <div className=\"text-sm font-semibold text-primary\">\n                        {getPriceRange(plan)}\n                      </div>\n                    </div>\n                    {selectedPlans.find(p => p.id === plan.id) && (\n                      <CheckCircle className=\"w-5 h-5 text-primary\" />\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Right Panel - Comparison Table */}\n          <div className=\"w-1/2 p-6 overflow-y-auto\">\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                Selected Plans ({selectedPlans.length}/4)\n              </h3>\n              {selectedPlans.length === 0 && (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Scale className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                  <p>Select plans from the left panel to compare them</p>\n                </div>\n              )}\n            </div>\n\n            {selectedPlans.length > 0 && (\n              <div className=\"space-y-6\">\n                {/* Plan Headers */}\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {selectedPlans.map((plan) => (\n                    <Card key={plan.id} className=\"relative\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start space-x-3\">\n                          <img \n                            src={plan.image_url || '/placeholder.svg'} \n                            alt={plan.title}\n                            className=\"w-24 h-24 object-cover rounded-lg\"\n                          />\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h3 className=\"font-semibold text-foreground\">{plan.title}</h3>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => removeFromComparison(plan.id)}\n                                className=\"h-6 w-6\"\n                              >\n                                <X className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n                              {plan.description}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-sm\">\n                              <span className=\"flex items-center\">\n                                <Bed className=\"w-3 h-3 mr-1\" />\n                                {plan.bedrooms} BR\n                              </span>\n                              <span className=\"flex items-center\">\n                                <Bath className=\"w-3 h-3 mr-1\" />\n                                {plan.bathrooms} BA\n                              </span>\n                              <span className=\"flex items-center\">\n                                <Square className=\"w-3 h-3 mr-1\" />\n                                {plan.area_sqft?.toLocaleString()} sq ft\n                              </span>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge variant=\"outline\" className=\"mb-2 capitalize\">\n                              {plan.plan_type}\n                            </Badge>\n                            <div className=\"space-y-1\">\n                              <div className=\"text-sm\">\n                                <span className=\"text-muted-foreground\">Basic:</span>\n                                <span className=\"font-semibold ml-1\">‚Çµ{plan.basic_price?.toLocaleString()}</span>\n                              </div>\n                              <div className=\"text-sm\">\n                                <span className=\"text-muted-foreground\">Standard:</span>\n                                <span className=\"font-semibold ml-1\">‚Çµ{plan.standard_price?.toLocaleString()}</span>\n                              </div>\n                              <div className=\"text-sm\">\n                                <span className=\"text-muted-foreground\">Premium:</span>\n                                <span className=\"font-semibold ml-1\">‚Çµ{plan.premium_price?.toLocaleString()}</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                {/* Comparison Actions */}\n                <div className=\"flex space-x-3\">\n                  <Button \n                    className=\"flex-1\"\n                    onClick={() => {\n                      // Navigate to checkout with selected plans\n                      console.log('Proceed to checkout with:', selectedPlans);\n                    }}\n                  >\n                    <Heart className=\"w-4 h-4 mr-2\" />\n                    Add to Favorites\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1\"\n                    onClick={() => {\n                      // Download comparison PDF\n                      console.log('Download comparison for:', selectedPlans);\n                    }}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download Comparison\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlanComparison;\n","size_bytes":16230},"client/src/components/PlanReviews.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { \n  Star, \n  ThumbsUp, \n  ThumbsDown, \n  MessageCircle, \n  Send,\n  User,\n  Calendar,\n  CheckCircle,\n  AlertCircle\n} from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface Review {\n  id: number;\n  user_id: number;\n  plan_id: number;\n  rating: number;\n  title: string;\n  content: string;\n  helpful_votes: number;\n  unhelpful_votes: number;\n  created_at: string;\n  user: {\n    name: string;\n    email: string;\n    avatar_url?: string;\n  };\n}\n\ninterface PlanReviewsProps {\n  planId: number;\n  planTitle: string;\n}\n\nconst PlanReviews = ({ planId, planTitle }: PlanReviewsProps) => {\n  const { user } = useAuth();\n  const [reviews, setReviews] = useState<Review[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showReviewForm, setShowReviewForm] = useState(false);\n  const [newReview, setNewReview] = useState({\n    rating: 5,\n    title: '',\n    content: ''\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    fetchReviews();\n  }, [planId]);\n\n  const fetchReviews = async () => {\n    try {\n      // Mock data for now - replace with actual API call\n      const mockReviews: Review[] = [\n        {\n          id: 1,\n          user_id: 1,\n          plan_id: planId,\n          rating: 5,\n          title: 'Excellent Design and Quality',\n          content: 'This plan exceeded my expectations. The layout is perfect for our family, and the attention to detail is remarkable. The construction process was smooth thanks to the comprehensive documentation.',\n          helpful_votes: 12,\n          unhelpful_votes: 1,\n          created_at: '2024-01-15T10:30:00Z',\n          user: {\n            name: 'Kwame Asante',\n            email: 'kwame@example.com',\n            avatar_url: '/placeholder.svg'\n          }\n        },\n        {\n          id: 2,\n          user_id: 2,\n          plan_id: planId,\n          rating: 4,\n          title: 'Great Value for Money',\n          content: 'Very satisfied with this purchase. The plans are detailed and easy to follow. Our contractor had no issues understanding the specifications. Would recommend to others.',\n          helpful_votes: 8,\n          unhelpful_votes: 0,\n          created_at: '2024-01-10T14:20:00Z',\n          user: {\n            name: 'Ama Osei',\n            email: 'ama@example.com',\n            avatar_url: '/placeholder.svg'\n          }\n        },\n        {\n          id: 3,\n          user_id: 3,\n          plan_id: planId,\n          rating: 5,\n          title: 'Perfect for Our Needs',\n          content: 'We love everything about this plan. The bedrooms are well-proportioned, the kitchen layout is functional, and the overall flow is excellent. Highly recommended!',\n          helpful_votes: 15,\n          unhelpful_votes: 0,\n          created_at: '2024-01-05T09:15:00Z',\n          user: {\n            name: 'Kofi Mensah',\n            email: 'kofi@example.com',\n            avatar_url: '/placeholder.svg'\n          }\n        }\n      ];\n      \n      setReviews(mockReviews);\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmitReview = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) {\n      alert('Please log in to submit a review');\n      return;\n    }\n\n    setSubmitting(true);\n    try {\n      // Mock submission - replace with actual API call\n      const review: Review = {\n        id: Date.now(),\n        user_id: user.id,\n        plan_id: planId,\n        rating: newReview.rating,\n        title: newReview.title,\n        content: newReview.content,\n        helpful_votes: 0,\n        unhelpful_votes: 0,\n        created_at: new Date().toISOString(),\n        user: {\n          name: user.name || user.email,\n          email: user.email,\n          avatar_url: user.avatar_url\n        }\n      };\n\n      setReviews([review, ...reviews]);\n      setNewReview({ rating: 5, title: '', content: '' });\n      setShowReviewForm(false);\n      \n      // Show success message\n      alert('Review submitted successfully!');\n    } catch (error) {\n      console.error('Error submitting review:', error);\n      alert('Failed to submit review. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleVote = (reviewId: number, isHelpful: boolean) => {\n    setReviews(reviews.map(review => {\n      if (review.id === reviewId) {\n        return {\n          ...review,\n          helpful_votes: isHelpful ? review.helpful_votes + 1 : review.helpful_votes,\n          unhelpful_votes: !isHelpful ? review.unhelpful_votes + 1 : review.unhelpful_votes\n        };\n      }\n      return review;\n    }));\n  };\n\n  const averageRating = reviews.length > 0 \n    ? reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length \n    : 0;\n\n  const ratingDistribution = [5, 4, 3, 2, 1].map(rating => ({\n    rating,\n    count: reviews.filter(review => review.rating === rating).length,\n    percentage: reviews.length > 0 \n      ? (reviews.filter(review => review.rating === rating).length / reviews.length) * 100 \n      : 0\n  }));\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(3)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Reviews Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-2xl font-bold text-foreground\">Customer Reviews</h3>\n          <p className=\"text-muted-foreground\">\n            {reviews.length} review{reviews.length !== 1 ? 's' : ''} for {planTitle}\n          </p>\n        </div>\n        <Button \n          onClick={() => setShowReviewForm(true)}\n          disabled={!user}\n          className=\"btn-primary\"\n        >\n          <MessageCircle className=\"w-4 h-4 mr-2\" />\n          Write a Review\n        </Button>\n      </div>\n\n      {/* Rating Summary */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {/* Overall Rating */}\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-foreground mb-2\">\n                {averageRating.toFixed(1)}\n              </div>\n              <div className=\"flex justify-center mb-2\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <Star\n                    key={star}\n                    className={`w-6 h-6 ${\n                      star <= averageRating \n                        ? 'text-warning fill-current' \n                        : 'text-muted-foreground'\n                    }`}\n                  />\n                ))}\n              </div>\n              <p className=\"text-muted-foreground\">\n                Based on {reviews.length} review{reviews.length !== 1 ? 's' : ''}\n              </p>\n            </div>\n\n            {/* Rating Distribution */}\n            <div className=\"space-y-2\">\n              {ratingDistribution.map(({ rating, count, percentage }) => (\n                <div key={rating} className=\"flex items-center space-x-3\">\n                  <div className=\"flex items-center space-x-1 w-16\">\n                    <span className=\"text-sm text-muted-foreground\">{rating}</span>\n                    <Star className=\"w-4 h-4 text-warning fill-current\" />\n                  </div>\n                  <div className=\"flex-1 bg-muted rounded-full h-2\">\n                    <div \n                      className=\"bg-warning h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${percentage}%` }}\n                    ></div>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground w-12 text-right\">\n                    {count}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Review Form */}\n      {showReviewForm && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Write Your Review</CardTitle>\n            <CardDescription>\n              Share your experience with this house plan\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmitReview} className=\"space-y-4\">\n              {/* Rating Selection */}\n              <div className=\"space-y-2\">\n                <Label>Rating</Label>\n                <div className=\"flex space-x-1\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <button\n                      key={star}\n                      type=\"button\"\n                      onClick={() => setNewReview({ ...newReview, rating: star })}\n                      className=\"p-1 hover:scale-110 transition-transform\"\n                    >\n                      <Star\n                        className={`w-8 h-8 ${\n                          star <= newReview.rating \n                            ? 'text-warning fill-current' \n                            : 'text-muted-foreground'\n                        }`}\n                      />\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Review Title */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"review-title\">Review Title</Label>\n                <Input\n                  id=\"review-title\"\n                  placeholder=\"Summarize your experience\"\n                  value={newReview.title}\n                  onChange={(e) => setNewReview({ ...newReview, title: e.target.value })}\n                  required\n                />\n              </div>\n\n              {/* Review Content */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"review-content\">Review Content</Label>\n                <Textarea\n                  id=\"review-content\"\n                  placeholder=\"Share your detailed experience with this house plan...\"\n                  value={newReview.content}\n                  onChange={(e) => setNewReview({ ...newReview, content: e.target.value })}\n                  rows={4}\n                  required\n                />\n              </div>\n\n              {/* Form Actions */}\n              <div className=\"flex space-x-3\">\n                <Button \n                  type=\"submit\" \n                  disabled={submitting}\n                  className=\"btn-primary\"\n                >\n                  {submitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Submitting...\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"w-4 h-4 mr-2\" />\n                      Submit Review\n                    </>\n                  )}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  onClick={() => setShowReviewForm(false)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Reviews List */}\n      <div className=\"space-y-4\">\n        {reviews.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <MessageCircle className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n              <h4 className=\"text-lg font-semibold text-foreground mb-2\">No Reviews Yet</h4>\n              <p className=\"text-muted-foreground mb-4\">\n                Be the first to share your experience with this house plan\n              </p>\n              <Button \n                onClick={() => setShowReviewForm(true)}\n                disabled={!user}\n                className=\"btn-primary\"\n              >\n                Write the First Review\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          reviews.map((review) => (\n            <Card key={review.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <Avatar className=\"w-12 h-12\">\n                    <AvatarImage src={review.user.avatar_url} />\n                    <AvatarFallback>\n                      <User className=\"w-6 h-6\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div>\n                        <h4 className=\"font-semibold text-foreground\">{review.user.name}</h4>\n                        <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center\">\n                            {[1, 2, 3, 4, 5].map((star) => (\n                              <Star\n                                key={star}\n                                className={`w-4 h-4 ${\n                                  star <= review.rating \n                                    ? 'text-warning fill-current' \n                                    : 'text-muted-foreground'\n                                }`}\n                              />\n                            ))}\n                          </div>\n                          <span>‚Ä¢</span>\n                          <span className=\"flex items-center\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {new Date(review.created_at).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleVote(review.id, true)}\n                          className=\"h-8 px-2\"\n                        >\n                          <ThumbsUp className=\"w-4 h-4 mr-1\" />\n                          {review.helpful_votes}\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleVote(review.id, false)}\n                          className=\"h-8 px-2\"\n                        >\n                          <ThumbsDown className=\"w-4 h-4 mr-1\" />\n                          {review.unhelpful_votes}\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <h5 className=\"font-medium text-foreground mb-2\">{review.title}</h5>\n                    <p className=\"text-muted-foreground leading-relaxed\">{review.content}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PlanReviews;\n","size_bytes":16026},"client/src/components/UserHeader.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  ArrowLeft, \n  Home, \n  User, \n  Settings, \n  ShoppingBag, \n  Heart,\n  Download,\n  Calendar,\n  MapPin,\n  Phone\n} from 'lucide-react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface UserHeaderProps {\n  title: string;\n  subtitle?: string;\n  showBackButton?: boolean;\n  backTo?: string;\n  backText?: string;\n  actions?: React.ReactNode;\n  showUserInfo?: boolean;\n  showBreadcrumbs?: boolean;\n}\n\nconst UserHeader = ({ \n  title, \n  subtitle, \n  showBackButton = true, \n  backTo = \"/user/dashboard\", \n  backText = \"Back to Dashboard\",\n  actions,\n  showUserInfo = true,\n  showBreadcrumbs = true\n}: UserHeaderProps) => {\n  const { user, profile } = useAuth();\n  const location = useLocation();\n\n  const getBreadcrumbs = () => {\n    const pathSegments = location.pathname.split('/').filter(Boolean);\n    const breadcrumbs = [];\n    \n    if (pathSegments[0] === 'user') {\n      breadcrumbs.push({ name: 'Dashboard', href: '/user/dashboard', icon: Home });\n      \n      if (pathSegments[1] && pathSegments[1] !== 'dashboard') {\n        switch (pathSegments[1]) {\n          case 'profile':\n            breadcrumbs.push({ name: 'Profile', href: '/user/profile', icon: User });\n            break;\n          case 'orders':\n            breadcrumbs.push({ name: 'Orders', href: '/user/orders', icon: ShoppingBag });\n            break;\n          case 'favorites':\n            breadcrumbs.push({ name: 'Favorites', href: '/user/favorites', icon: Heart });\n            break;\n          case 'downloads':\n            breadcrumbs.push({ name: 'Downloads', href: '/user/downloads', icon: Download });\n            break;\n          case 'settings':\n            breadcrumbs.push({ name: 'Settings', href: '/user/settings', icon: Settings });\n            break;\n          default:\n            breadcrumbs.push({ name: pathSegments[1].charAt(0).toUpperCase() + pathSegments[1].slice(1), href: location.pathname, icon: User });\n        }\n      }\n    }\n    \n    return breadcrumbs;\n  };\n\n  const breadcrumbs = getBreadcrumbs();\n\n  return (\n    <section className=\"py-16 bg-gradient-to-r from-primary/10 to-primary/5\">\n      <div className=\"container px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Back Button and Breadcrumbs */}\n          <div className=\"flex items-center gap-4 mb-8\">\n            {showBackButton && (\n              <Button variant=\"ghost\" size=\"sm\" asChild>\n                <Link to={backTo}>\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  {backText}\n                </Link>\n              </Button>\n            )}\n            \n            {showBreadcrumbs && breadcrumbs.length > 1 && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                {breadcrumbs.map((crumb, index) => (\n                  <div key={crumb.href} className=\"flex items-center gap-2\">\n                    {index > 0 && <span>/</span>}\n                    <Link \n                      to={crumb.href} \n                      className=\"flex items-center gap-1 hover:text-foreground transition-colors\"\n                    >\n                      <crumb.icon className=\"h-3 w-3\" />\n                      {crumb.name}\n                    </Link>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Main Header Content */}\n          <div className=\"flex items-start justify-between mb-8\">\n            <div className=\"flex-1\">\n              <h1 className=\"text-3xl font-bold text-foreground mb-2\">{title}</h1>\n              {subtitle && (\n                <p className=\"text-muted-foreground text-lg\">{subtitle}</p>\n              )}\n            </div>\n            \n            {actions && (\n              <div className=\"flex items-center gap-3\">\n                {actions}\n              </div>\n            )}\n          </div>\n\n          {/* User Info Card */}\n          {showUserInfo && user && (\n            <Card className=\"bg-card/95 backdrop-blur\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-6\">\n                  <Avatar className=\"h-20 w-20\">\n                    <AvatarImage src={profile?.avatar_url} />\n                    <AvatarFallback className=\"text-lg\">\n                      {profile?.first_name?.[0]}{profile?.last_name?.[0] || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <div className=\"flex-1\">\n                    <h2 className=\"text-xl font-semibold mb-2\">\n                      {profile?.first_name} {profile?.last_name}\n                    </h2>\n                    <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4\" />\n                        {profile?.email || user.email}\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"secondary\">{profile?.role || 'user'}</Badge>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-4 mt-3 text-xs text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3\" />\n                        <span>Member since {user.created_at ? new Date(user.created_at).toLocaleDateString() : 'Recently'}</span>\n                      </div>\n                      {profile?.phone && (\n                        <div className=\"flex items-center gap-1\">\n                          <Phone className=\"h-3 w-3\" />\n                          <span>{profile.phone}</span>\n                        </div>\n                      )}\n                      {profile?.city && (\n                        <div className=\"flex items-center gap-1\">\n                          <MapPin className=\"h-3 w-3\" />\n                          <span>{profile.city}, {profile.country}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col gap-2\">\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <Link to=\"/user/profile\">\n                        <User className=\"h-4 w-4 mr-2\" />\n                        Edit Profile\n                      </Link>\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <Link to=\"/user/settings\">\n                        <Settings className=\"h-4 w-4 mr-2\" />\n                        Settings\n                      </Link>\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default UserHeader;\n","size_bytes":7270},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  email: string;\n  created_at?: string;\n}\n\ninterface Profile {\n  id: string;\n  user_id: string;\n  email: string;\n  first_name?: string;\n  last_name?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  country?: string;\n  bio?: string;\n  company?: string;\n  website?: string;\n  role: 'user' | 'admin' | 'super_admin';\n  avatar_url?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  profile: Profile | null;\n  loading: boolean;\n  signUp: (email: string, password: string, firstName?: string, lastName?: string) => Promise<{ error: any }>;\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\n  signOut: () => Promise<void>;\n  isAdmin: boolean;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [user, setUser] = useState<User | null>(() => {\n    // Initialize from localStorage\n    const savedUser = localStorage.getItem('user');\n    return savedUser ? JSON.parse(savedUser) : null;\n  });\n  const [profile, setProfile] = useState<Profile | null>(() => {\n    // Initialize from localStorage\n    const savedProfile = localStorage.getItem('profile');\n    return savedProfile ? JSON.parse(savedProfile) : null;\n  });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // For now, just set loading to false\n    setLoading(false);\n  }, []);\n\n  const signUp = async (email: string, password: string, firstName?: string, lastName?: string) => {\n    try {\n      console.log('Sign up attempted:', { email, firstName, lastName });\n      \n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          email, \n          password, \n          firstName, \n          lastName \n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n        setProfile(data.profile);\n        // Save to localStorage\n        localStorage.setItem('user', JSON.stringify(data.user));\n        localStorage.setItem('profile', JSON.stringify(data.profile));\n        return { error: null };\n      } else {\n        const errorData = await response.json();\n        return { error: errorData.error || 'Sign up failed' };\n      }\n    } catch (error) {\n      console.error('Sign up error:', error);\n      return { error: 'Network error occurred' };\n    }\n  };\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      console.log('Sign in attempted:', { email });\n      \n      const response = await fetch('/api/auth/signin', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n        setProfile(data.profile);\n        // Save to localStorage\n        localStorage.setItem('user', JSON.stringify(data.user));\n        localStorage.setItem('profile', JSON.stringify(data.profile));\n        return { error: null };\n      } else {\n        const errorData = await response.json();\n        return { error: errorData.error || 'Sign in failed' };\n      }\n    } catch (error) {\n      console.error('Sign in error:', error);\n      return { error: 'Network error occurred' };\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      await fetch('/api/auth/signout', { method: 'POST' });\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n    setUser(null);\n    setProfile(null);\n    // Clear localStorage\n    localStorage.removeItem('user');\n    localStorage.removeItem('profile');\n  };\n\n  const isAdmin = profile?.role === 'admin' || profile?.role === 'super_admin';\n  const isAuthenticated = !!user;\n\n  const value = {\n    user,\n    profile,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    isAdmin,\n    isAuthenticated\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":4494},"client/src/lib/api.ts":{"content":"// API client to replace Supabase calls\nconst API_BASE = '/api';\n\nexport interface Plan {\n  id: string;\n  title: string;\n  description: string | null;\n  plan_type: string;\n  bedrooms: number | null;\n  bathrooms: number | null;\n  area_sqft: number | null;\n  basic_price: number;\n  standard_price: number;\n  premium_price: number;\n  featured: boolean;\n  status: string;\n  image_url: string | null;\n  gallery_images: any[] | null;\n  plan_files: any | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Profile {\n  id: string;\n  user_id: string;\n  email: string;\n  first_name: string | null;\n  last_name: string | null;\n  phone: string | null;\n  role: string;\n  avatar_url: string | null;\n  address: string | null;\n  city: string | null;\n  country: string | null;\n  bio: string | null;\n  company: string | null;\n  website: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Order {\n  id: string;\n  user_id: string;\n  plan_id: string;\n  tier: string;\n  amount: number;\n  status: string;\n  payment_intent_id: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nclass ApiClient {\n  // Plans API\n  async getPlans(filters?: { status?: string; featured?: boolean }): Promise<Plan[]> {\n    const params = new URLSearchParams();\n    if (filters?.status) params.append('status', filters.status);\n    if (filters?.featured !== undefined) params.append('featured', filters.featured.toString());\n\n    const response = await fetch(`${API_BASE}/plans?${params}`);\n    if (!response.ok) throw new Error('Failed to fetch plans');\n    return response.json();\n  }\n\n  async getPlan(id: string): Promise<Plan> {\n    const response = await fetch(`${API_BASE}/plans/${id}`);\n    if (!response.ok) throw new Error('Failed to fetch plan');\n    return response.json();\n  }\n\n  async createPlan(plan: Omit<Plan, 'id' | 'created_at' | 'updated_at'>): Promise<Plan> {\n    const response = await fetch(`${API_BASE}/plans`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(plan),\n    });\n    if (!response.ok) throw new Error('Failed to create plan');\n    return response.json();\n  }\n\n  async updatePlan(id: string, updates: Partial<Plan>): Promise<Plan> {\n    const response = await fetch(`${API_BASE}/plans/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(updates),\n    });\n    if (!response.ok) throw new Error('Failed to update plan');\n    return response.json();\n  }\n\n  async deletePlan(id: string): Promise<void> {\n    const response = await fetch(`${API_BASE}/plans/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) throw new Error('Failed to delete plan');\n  }\n\n  // Orders API\n  async getOrders(userId?: string): Promise<Order[]> {\n    const params = new URLSearchParams();\n    if (userId) params.append('userId', userId);\n\n    const response = await fetch(`${API_BASE}/orders?${params}`);\n    if (!response.ok) throw new Error('Failed to fetch orders');\n    return response.json();\n  }\n\n  async createOrder(order: Omit<Order, 'id' | 'created_at' | 'updated_at'>): Promise<Order> {\n    const response = await fetch(`${API_BASE}/orders`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(order),\n    });\n    if (!response.ok) throw new Error('Failed to create order');\n    return response.json();\n  }\n\n  // Profiles API\n  async getProfile(userId: string): Promise<Profile> {\n    const response = await fetch(`${API_BASE}/profiles/${userId}`);\n    if (!response.ok) throw new Error('Failed to fetch profile');\n    return response.json();\n  }\n\n  async createProfile(profile: Omit<Profile, 'id' | 'created_at' | 'updated_at'>): Promise<Profile> {\n    const response = await fetch(`${API_BASE}/profiles`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(profile),\n    });\n    if (!response.ok) throw new Error('Failed to create profile');\n    return response.json();\n  }\n\n  async updateProfile(userId: string, updates: Partial<Profile>): Promise<Profile> {\n    const response = await fetch(`${API_BASE}/profiles/${userId}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(updates),\n    });\n    if (!response.ok) throw new Error('Failed to update profile');\n    return response.json();\n  }\n\n  // Downloads API\n  async getDownloadInfo(orderId: string): Promise<any> {\n    const response = await fetch(`${API_BASE}/downloads/${orderId}`);\n    if (!response.ok) throw new Error('Failed to fetch download info');\n    return response.json();\n  }\n\n\n\n  async downloadFile(orderId: string, filePath: string): Promise<Response> {\n    const url = `${API_BASE}/downloads/${orderId}/file?filePath=${encodeURIComponent(filePath)}`;\n    const response = await fetch(url);\n    if (!response.ok) throw new Error('Failed to download file');\n    return response;\n  }\n\n  // Payment API\n  async initializePayment(paymentData: {\n    email: string;\n    amount: number;\n    planId: string;\n    planTitle: string;\n    packageType: string;\n    userId?: string;\n  }): Promise<any> {\n    const response = await fetch(`${API_BASE}/payments/initialize`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(paymentData),\n    });\n    if (!response.ok) throw new Error('Failed to initialize payment');\n    return response.json();\n  }\n\n  async post(endpoint: string, data: any): Promise<any> {\n    // Remove leading slash if present to avoid double /api/\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;\n    const response = await fetch(`${API_BASE}/${cleanEndpoint}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error(`Failed to POST to ${endpoint}`);\n    return response.json();\n  }\n\n  async get(endpoint: string): Promise<any> {\n    // Remove leading slash if present to avoid double /api/\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;\n    const response = await fetch(`${API_BASE}/${cleanEndpoint}`);\n    if (!response.ok) throw new Error(`Failed to GET from ${endpoint}`);\n    return response.json();\n  }\n}\n\nexport const api = new ApiClient();","size_bytes":6379},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/About.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Users, Award, Building, Heart, Target, Shield, Briefcase, FileText, Eye, Settings, Ruler, Truck } from 'lucide-react';\nimport { Link } from 'react-router-dom';\n\nconst About = () => {\n  const services = [\n    {\n      icon: Briefcase,\n      title: 'Project Management',\n      description: 'Our project management experts offer flexible and highly bespoke services based on robust and well-proven delivery formulas.'\n    },\n    {\n      icon: Building,\n      title: 'Architectural Designs',\n      description: 'Our teams of Architects create sustainable green buildings that are functional, structurally sound, and aesthetically pleasing.'\n    },\n    {\n      icon: Ruler,\n      title: 'Structural Designs',\n      description: 'Our Structural Engineers work with Geotechnical engineers to design the most suitable and robust structures for your building.'\n    },\n    {\n      icon: FileText,\n      title: 'Cost Planning & Quantity Surveying',\n      description: 'Our cost planning experts work with Architects and Engineers to achieve designs within clients\\' budgets.'\n    },\n    {\n      icon: Shield,\n      title: 'Contract Administration',\n      description: 'Our team of construction professionals administers contracts of any size, preparing and monitoring tendering processes.'\n    },\n    {\n      icon: Eye,\n      title: 'Construction Supervision',\n      description: 'We develop sound strategies and achievable programs to monitor contractors for successful project delivery.'\n    },\n    {\n      icon: Target,\n      title: 'Strategic Sourcing & Procurement',\n      description: 'Our procurement experts help in global sourcing of products for construction and non-construction purposes.'\n    },\n    {\n      icon: Heart,\n      title: 'Cost Management',\n      description: 'We provide contractual assurance through intelligent procurement, contract management and dispute resolution.'\n    },\n    {\n      icon: Truck,\n      title: 'Construction of Buildings & Roads',\n      description: 'We execute construction projects with K3 D3 contractor\\'s license, delivering quality construction within time and budget.'\n    },\n    {\n      icon: Award,\n      title: 'Refurbishments',\n      description: 'Our design and construction team works with clients to plan, design and execute demolition and refurbishment projects.'\n    }\n  ];\n\n  const stats = [\n    { icon: Building, value: '2012', label: 'Founded' },\n    { icon: Award, value: 'K3 D3', label: 'Contractor License' },\n    { icon: Users, value: '10+', label: 'Years Experience' },\n    { icon: Shield, value: '100%', label: 'Quality Focus' }\n  ];\n\n  const values = [\n    {\n      icon: Heart,\n      title: 'Accountability',\n      description: 'We operate under the principle of accountability, ensuring transparency in all our dealings.'\n    },\n    {\n      icon: Target,\n      title: 'Professionalism',\n      description: 'Our team of professionals maintains the highest standards of professional conduct.'\n    },\n    {\n      icon: Building,\n      title: 'Successful Delivery',\n      description: 'We are committed to the successful delivery of projects within time, cost and specifications.'\n    },\n    {\n      icon: Shield,\n      title: 'Quality Management',\n      description: 'Quality is our hallmark, spanning through managing and delivering construction phases diligently.'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-muted/20\">\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-r from-primary/10 to-secondary/10\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge variant=\"secondary\" className=\"mb-4\">\n              About SAK Constructions\n            </Badge>\n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n              About SAK CONSTRUCTIONS GH\n            </h1>\n            <p className=\"text-xl text-muted-foreground leading-relaxed mb-8\">\n              A multi-disciplinary design and project management firm with capacity to mobilize and execute construction projects on turnkey.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Company Introduction */}\n      <section className=\"py-20\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6\">\n              Introducing SAK CONSTRUCTIONS\n            </h2>\n            <p className=\"text-lg text-muted-foreground leading-relaxed\">\n              SAK was registered in Ghana in 2012 under the registration of business name act 1962 (No. 151). \n              The company was created under the principle of accountability, professionalism, and successful delivery of projects.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Background Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6\">\n                  Background\n                </h2>\n                <div className=\"space-y-4 text-muted-foreground leading-relaxed\">\n                  <p>\n                    SAK is a multi-disciplinary design and project management firm with the capacity to mobilize and execute \n                    construction projects on turnkey. SAK is made up of a team of Architects, Engineers, Quantity Surveyors, \n                    Project Managers, Data/IT experts and integrated development experts with tremendous years of collective \n                    individual experience in delivering complex sustainable green projects.\n                  </p>\n                  <p>\n                    The team of Architects develops the conceptual designs based on functionality and client needs, the \n                    Geotechnical/soil engineers investigate and engineer the soil conditions for our Structural engineers \n                    to undertake the Structural design of the building.\n                  </p>\n                  <p>\n                    Finally the team of Quantity Surveyors work alongside the other engineering disciplines through a thorough \n                    value engineering analysis and Information Technology base approach to scale down on the construction cost.\n                  </p>\n                </div>\n              </div>\n              <div className=\"relative\">\n                <div className=\"aspect-square bg-gradient-to-br from-primary/20 to-secondary/20 rounded-2xl flex items-center justify-center\">\n                  <Building className=\"w-32 h-32 text-primary/40\" />\n                </div>\n                <div className=\"absolute -bottom-6 -right-6 w-32 h-32 bg-gradient-to-br from-secondary/20 to-primary/20 rounded-2xl\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* History Section */}\n      <section className=\"py-20\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n              <div className=\"relative\">\n                <div className=\"aspect-square bg-gradient-to-br from-secondary/20 to-primary/20 rounded-2xl flex items-center justify-center\">\n                  <Truck className=\"w-32 h-32 text-secondary/40\" />\n                </div>\n                <div className=\"absolute -bottom-6 -left-6 w-32 h-32 bg-gradient-to-br from-primary/20 to-secondary/20 rounded-2xl\"></div>\n              </div>\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6\">\n                  History\n                </h2>\n                <div className=\"space-y-4 text-muted-foreground leading-relaxed\">\n                  <p>\n                    The traditional way of delivering projects comes with diverse challenges which mostly results in improper \n                    and poor quality of work done, unplanned development, collapse of buildings, poor functionality, and poor \n                    value for money, unwarranted stress and high cost of building in the short and long term.\n                  </p>\n                  <p>\n                    After years of individual experiences the founder with diverse and multifunctional backgrounds saw the need \n                    to adopt a more efficient and professional approach to project delivery by bringing all the construction \n                    professionals under one umbrella to form a one-stop shop for all constructional needs.\n                  </p>\n                  <p>\n                    SAK is a design and Build Company equipped to deliver any construction project be it small or big within \n                    budget, time, quality and required scope.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Mission & Vision Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6\">\n                  Our Mission\n                </h2>\n                <ul className=\"space-y-4\">\n                  <li className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                    <span className=\"text-lg text-muted-foreground\">\n                      To achieve the highest possible standards in Architecture and construction\n                    </span>\n                  </li>\n                  <li className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                    <span className=\"text-lg text-muted-foreground\">\n                      To deliver high quality projects at affordable costs\n                    </span>\n                  </li>\n                </ul>\n              </div>\n              <div>\n                <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6\">\n                  Our Vision\n                </h2>\n                <ul className=\"space-y-4\">\n                  <li className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                    <span className=\"text-lg text-muted-foreground\">\n                      To be the clients choice for providing a one-stop shop delivery of projects\n                    </span>\n                  </li>\n                  <li className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                    <span className=\"text-lg text-muted-foreground\">\n                      To be a trade mark in national development\n                    </span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-20\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Our Credentials\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Professional qualifications and achievements\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {stats.map((stat, index) => (\n              <Card key={index} className=\"text-center border-0 shadow-lg bg-gradient-to-br from-primary/5 to-secondary/5\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-center w-12 h-12 bg-primary/10 rounded-xl mb-4 mx-auto\">\n                    <stat.icon className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-foreground mb-2\">{stat.value}</div>\n                  <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Values Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Our Core Principles\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              The principles that guide everything we do\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {values.map((value, index) => (\n              <Card key={index} className=\"text-center border-0 shadow-lg hover:shadow-xl transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-center w-16 h-16 bg-primary/10 rounded-xl mb-4 mx-auto\">\n                    <value.icon className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-3\">{value.title}</h3>\n                  <p className=\"text-muted-foreground leading-relaxed\">{value.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-20\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Our Services\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Comprehensive construction and project management services\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.map((service, index) => (\n              <Card key={index} className=\"border-0 shadow-lg hover:shadow-xl transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                    <service.icon className=\"text-primary\" size={24} />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n                    {service.title}\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    {service.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Management Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Management & Structure\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Professional team structure and management approach\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <p className=\"text-lg text-muted-foreground mb-8\">\n              SAK unites a consortium of professionals with global network of inventive and highly skilled engineers \n              and design specialists. SAK offers consultancy and construction services team which provides contractual \n              assurance to our clients through design, intelligent procurement, contract management, construction, \n              and best quality management throughout the project life cycle.\n            </p>\n            <p className=\"text-lg text-muted-foreground\">\n              We offer a comprehensive, independent contractual and commercial service designed to guide any major \n              program or complex project successfully through the complexities and challenges of modern construction \n              and engineering procurement, from inception to completion.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Card className=\"border-0 shadow-2xl bg-gradient-to-r from-primary/10 to-secondary/10\">\n              <CardContent className=\"p-12\">\n                <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n                  Ready to Start Your Project?\n                </h2>\n                <p className=\"text-lg text-muted-foreground mb-8\">\n                  At SAK, we safeguard your commercial interests at every stage of the project right from conception, \n                  feasibility, design, and procurement and construction process to deliver a return on your investment.\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <Button size=\"lg\" asChild>\n                    <Link to=\"/services\">View Our Services</Link>\n                  </Button>\n                  <Button variant=\"outline\" size=\"lg\" asChild>\n                    <Link to=\"/contact\">Contact Us</Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default About; ","size_bytes":18289},"client/src/pages/Admin.tsx":{"content":"import { useEffect } from 'react';\nimport { useNavigate, Routes, Route } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport AdminLogin from './AdminLogin';\nimport AdminDashboard from './AdminDashboard';\nimport AdminPlans from './AdminPlans';\nimport AdminAnalytics from './AdminAnalytics';\nimport AdminOrders from './AdminOrders';\nimport AdminUsers from './AdminUsers';\nimport AdminSettings from './AdminSettings';\n\nconst Admin = () => {\n  const { user, profile } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // If user is not logged in, redirect to admin login\n    if (!user) {\n      navigate('/admin/login');\n      return;\n    }\n\n    // If user is logged in but not an admin, redirect to admin login\n    if (user && profile && profile.role !== 'admin' && profile.role !== 'super_admin') {\n      navigate('/admin/login');\n      return;\n    }\n\n    // If user is admin and on /admin, redirect to admin dashboard\n    if (user && profile && (profile.role === 'admin' || profile.role === 'super_admin')) {\n      const currentPath = window.location.pathname;\n      if (currentPath === '/admin') {\n        navigate('/admin/dashboard');\n      }\n    }\n  }, [user, profile, navigate]);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Routes>\n        <Route path=\"login\" element={<AdminLogin />} />\n        <Route path=\"dashboard\" element={<AdminDashboard />} />\n        <Route path=\"analytics\" element={<AdminAnalytics />} />\n        <Route path=\"plans\" element={<AdminPlans />} />\n        <Route path=\"orders\" element={<AdminOrders />} />\n        <Route path=\"users\" element={<AdminUsers />} />\n        <Route path=\"settings\" element={<AdminSettings />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default Admin;\n","size_bytes":1777},"client/src/pages/AdminAnalytics.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  ShoppingCart, \n  Users, \n  Download, \n  Calendar,\n  BarChart3,\n  Target,\n  Activity,\n  Award,\n  Building2,\n  FileText,\n  ArrowUpRight,\n  Eye,\n  BarChart\n} from 'lucide-react';\nimport AdminHeader from '@/components/AdminHeader';\n\ninterface AnalyticsData {\n  overview: {\n    totalRevenue: number;\n    revenueGrowth: number;\n    totalOrders: number;\n    ordersGrowth: number;\n    totalUsers: number;\n    usersGrowth: number;\n    totalDownloads: number;\n    downloadsGrowth: number;\n  };\n  planMetrics: {\n    basicSales: number;\n    standardSales: number;\n    premiumSales: number;\n    totalPlans: number;\n  };\n  recentActivity: any[];\n  topPlans: any[];\n}\n\nconst AdminAnalytics = () => {\n  const { user, isAdmin, loading } = useAuth();\n  const navigate = useNavigate();\n  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null);\n  const [loadingAnalytics, setLoadingAnalytics] = useState(true);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  useEffect(() => {\n    if (!loading && (!user || !isAdmin)) {\n      navigate('/admin/login');\n    }\n  }, [user, isAdmin, loading, navigate]);\n\n  useEffect(() => {\n    if (user && isAdmin) {\n      fetchAnalytics();\n    }\n  }, [user, isAdmin]);\n\n  const fetchAnalytics = async () => {\n    try {\n      setLoadingAnalytics(true);\n      const [analyticsResponse, ordersResponse, plansResponse] = await Promise.all([\n        fetch('/api/analytics'),\n        fetch('/api/orders'),\n        fetch('/api/plans')\n      ]);\n\n      if (!analyticsResponse.ok || !ordersResponse.ok || !plansResponse.ok) {\n        throw new Error('Failed to fetch data');\n      }\n\n      const analyticsData = await analyticsResponse.json();\n      const ordersData = await ordersResponse.json();\n      const plansData = await plansResponse.json();\n\n      // Calculate growth rates (mock for now since we need historical data)\n      const revenueGrowth = 12.5;\n      const ordersGrowth = 8.2;\n      const usersGrowth = 15.3;\n      const downloadsGrowth = 22.1;\n\n      // Calculate plan metrics\n      const basicSales = ordersData.filter((order: any) => order.tier === 'basic').length;\n      const standardSales = ordersData.filter((order: any) => order.tier === 'standard').length;\n      const premiumSales = ordersData.filter((order: any) => order.tier === 'premium').length;\n\n      // Generate recent activity\n      const recentActivity = ordersData.slice(0, 10).map((order: any, index: number) => ({\n        id: order.id,\n        type: 'order' as const,\n        description: `${order.tier} package purchased`,\n        timestamp: new Date(order.created_at).toLocaleDateString(),\n        amount: parseFloat(order.amount)\n      }));\n\n      // Calculate top plans\n      const planSales: { [key: string]: { plan: any, sales: number, revenue: number } } = {};\n      ordersData.forEach((order: any) => {\n        if (!planSales[order.plan_id]) {\n          planSales[order.plan_id] = {\n            plan: plansData.find((p: any) => p.id === order.plan_id),\n            sales: 0,\n            revenue: 0\n          };\n        }\n        planSales[order.plan_id].sales++;\n        planSales[order.plan_id].revenue += parseFloat(order.amount);\n      });\n\n      const topPlans = Object.values(planSales)\n        .filter(item => item.plan)\n        .sort((a, b) => b.revenue - a.revenue)\n        .slice(0, 5)\n        .map(item => ({\n          id: item.plan.id,\n          title: item.plan.title,\n          sales: item.sales,\n          revenue: item.revenue,\n          category: item.plan.plan_type\n        }));\n\n      setAnalytics({\n        overview: {\n          totalRevenue: analyticsData.overview.totalRevenue,\n          revenueGrowth,\n          totalOrders: analyticsData.overview.totalOrders,\n          ordersGrowth,\n          totalUsers: analyticsData.overview.totalUsers,\n          usersGrowth,\n          totalDownloads: analyticsData.overview.totalDownloads,\n          downloadsGrowth,\n        },\n        planMetrics: {\n          basicSales,\n          standardSales,\n          premiumSales,\n          totalPlans: analyticsData.planMetrics.totalPlans,\n        },\n        recentActivity,\n        topPlans,\n      });\n    } catch (error) {\n      console.error('Error fetching analytics:', error);\n      setAnalytics(null);\n    } finally {\n      setLoadingAnalytics(false);\n    }\n  };\n\n  if (loading || loadingAnalytics) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/10 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-primary border-t-transparent mx-auto mb-6\"></div>\n          <p className=\"text-xl text-muted-foreground\">Loading analytics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/10 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <BarChart3 className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-xl font-medium text-muted-foreground mb-2\">Failed to load analytics</h3>\n          <p className=\"text-sm text-muted-foreground mb-4\">There was an error loading the analytics data.</p>\n          <Button onClick={fetchAnalytics} className=\"btn-primary\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: number) => `‚Çµ${(amount || 0).toFixed(2)}`;\n  \n  const formatGrowth = (growth: number) => (\n    <div className={`flex items-center ${growth >= 0 ? 'text-success' : 'text-destructive'}`}>\n      {growth >= 0 ? <TrendingUp className=\"h-4 w-4 mr-1\" /> : <TrendingDown className=\"h-4 w-4 mr-1\" />}\n      <span className=\"text-sm font-medium\">{Math.abs(growth)}%</span>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/10\">\n      <AdminHeader />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"admin-card\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-foreground mb-2 flex items-center gap-3\">\n                  <BarChart3 className=\"w-8 h-8 text-primary\" />\n                  Analytics Dashboard\n                </h1>\n                <p className=\"text-muted-foreground\">Track performance and insights across your platform</p>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <Badge variant=\"outline\" className=\"px-4 py-2\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Last 30 days\n                </Badge>\n                <Button variant=\"outline\" onClick={fetchAnalytics} className=\"btn-outline-modern\">\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  Refresh Data\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-8\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-muted/50 p-1 rounded-xl\">\n            <TabsTrigger value=\"overview\" className=\"rounded-lg data-[state=active]:bg-background data-[state=active]:shadow-sm\">\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Overview\n            </TabsTrigger>\n            <TabsTrigger value=\"sales\" className=\"rounded-lg data-[state=active]:bg-background data-[state=active]:shadow-sm\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Sales\n            </TabsTrigger>\n            <TabsTrigger value=\"activity\" className=\"rounded-lg data-[state=active]:bg-background data-[state=active]:shadow-sm\">\n              <Activity className=\"w-4 h-4 mr-2\" />\n              Activity\n            </TabsTrigger>\n            <TabsTrigger value=\"plans\" className=\"rounded-lg data-[state=active]:bg-background data-[state=active]:shadow-sm\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Plans\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-8\">\n            {/* Overview Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div className=\"metric-card group\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground mb-2\">Total Revenue</p>\n                    <div className=\"text-3xl font-bold text-foreground mb-2\">{formatCurrency(analytics.overview.totalRevenue)}</div>\n                    {formatGrowth(analytics.overview.revenueGrowth)}\n                  </div>\n                  <div className=\"p-4 bg-primary/10 rounded-2xl group-hover:bg-primary/20 transition-colors\">\n                    <DollarSign className=\"w-8 h-8 text-primary\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"metric-card group\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground mb-2\">Total Orders</p>\n                    <div className=\"text-3xl font-bold text-foreground mb-2\">{analytics.overview.totalOrders}</div>\n                    {formatGrowth(analytics.overview.ordersGrowth)}\n                  </div>\n                  <div className=\"p-4 bg-secondary/10 rounded-2xl group-hover:bg-secondary/20 transition-colors\">\n                    <ShoppingCart className=\"w-8 h-8 text-secondary\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"metric-card group\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground mb-2\">Total Users</p>\n                    <div className=\"text-3xl font-bold text-foreground mb-2\">{analytics.overview.totalUsers}</div>\n                    {formatGrowth(analytics.overview.usersGrowth)}\n                  </div>\n                  <div className=\"p-4 bg-accent/10 rounded-2xl group-hover:bg-accent/20 transition-colors\">\n                    <Users className=\"w-8 h-8 text-accent\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"metric-card group\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground mb-2\">Total Downloads</p>\n                    <div className=\"text-3xl font-bold text-foreground mb-2\">{analytics.overview.totalDownloads}</div>\n                    {formatGrowth(analytics.overview.downloadsGrowth)}\n                  </div>\n                  <div className=\"p-4 bg-warning/10 rounded-2xl group-hover:bg-warning/20 transition-colors\">\n                    <Download className=\"w-8 h-8 text-warning\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Plan Distribution */}\n            <div className=\"admin-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-5 h-5 text-primary\" />\n                  Plan Distribution\n                </CardTitle>\n                <CardDescription>Sales breakdown by plan type</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center p-6 rounded-2xl bg-gradient-to-br from-primary/5 to-primary/10 border border-primary/20\">\n                    <div className=\"text-3xl font-bold text-primary mb-2\">{analytics.planMetrics.basicSales}</div>\n                    <div className=\"text-sm text-muted-foreground mb-3\">Basic Plans</div>\n                    <Progress \n                      value={analytics.overview.totalOrders > 0 ? (analytics.planMetrics.basicSales / analytics.overview.totalOrders) * 100 : 0} \n                      className=\"h-2 bg-primary/20\" \n                    />\n                  </div>\n\n                  <div className=\"text-center p-6 rounded-2xl bg-gradient-to-br from-secondary/5 to-secondary/10 border border-secondary/20\">\n                    <div className=\"text-3xl font-bold text-secondary mb-2\">{analytics.planMetrics.standardSales}</div>\n                    <div className=\"text-sm text-muted-foreground mb-3\">Standard Plans</div>\n                    <Progress \n                      value={analytics.overview.totalOrders > 0 ? (analytics.planMetrics.standardSales / analytics.overview.totalOrders) * 100 : 0} \n                      className=\"h-2 bg-secondary/20\" \n                    />\n                  </div>\n\n                  <div className=\"text-center p-6 rounded-2xl bg-gradient-to-br from-accent/5 to-accent/10 border border-accent/20\">\n                    <div className=\"text-3xl font-bold text-accent mb-2\">{analytics.planMetrics.premiumSales}</div>\n                    <div className=\"text-sm text-muted-foreground mb-3\">Premium Plans</div>\n                    <Progress \n                      value={analytics.overview.totalOrders > 0 ? (analytics.planMetrics.premiumSales / analytics.overview.totalOrders) * 100 : 0} \n                      className=\"h-2 bg-accent/20\" \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"sales\" className=\"space-y-8\">\n            {/* Sales Performance */}\n            <div className=\"admin-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5 text-primary\" />\n                  Sales Performance\n                </CardTitle>\n                <CardDescription>Revenue and order trends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold text-foreground\">Revenue Breakdown</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between p-3 rounded-xl bg-muted/30\">\n                        <span className=\"text-sm text-muted-foreground\">Basic Plans</span>\n                        <span className=\"font-semibold text-foreground\">\n                          {formatCurrency(analytics.planMetrics.basicSales * 100)}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 rounded-xl bg-muted/30\">\n                        <span className=\"text-sm text-muted-foreground\">Standard Plans</span>\n                        <span className=\"font-semibold text-foreground\">\n                          {formatCurrency(analytics.planMetrics.standardSales * 150)}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 rounded-xl bg-muted/30\">\n                        <span className=\"text-sm text-muted-foreground\">Premium Plans</span>\n                        <span className=\"font-semibold text-foreground\">\n                          {formatCurrency(analytics.planMetrics.premiumSales * 250)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold text-foreground\">Growth Metrics</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between p-3 rounded-xl bg-muted/30\">\n                        <span className=\"text-sm text-muted-foreground\">Revenue Growth</span>\n                        <Badge variant=\"outline\" className=\"text-success border-success/20\">\n                          +{analytics.overview.revenueGrowth}%\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 rounded-xl bg-muted/30\">\n                        <span className=\"text-sm text-muted-foreground\">Orders Growth</span>\n                        <Badge variant=\"outline\" className=\"text-success border-success/20\">\n                          +{analytics.overview.ordersGrowth}%\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 rounded-xl bg-muted/30\">\n                        <span className=\"text-sm text-muted-foreground\">User Growth</span>\n                        <Badge variant=\"outline\" className=\"text-success border-success/20\">\n                          +{analytics.overview.usersGrowth}%\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"activity\" className=\"space-y-8\">\n            {/* Recent Activity */}\n            <div className=\"admin-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"w-5 h-5 text-primary\" />\n                  Recent Activity\n                </CardTitle>\n                <CardDescription>Latest platform activities and transactions</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {analytics.recentActivity.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Activity className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No Recent Activity</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Activity will appear here once users start using the platform.\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {analytics.recentActivity.map((activity, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-4 rounded-xl bg-muted/30 border border-border/50\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                            <ShoppingCart className=\"w-5 h-5 text-primary\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-foreground\">{activity.description}</p>\n                            <p className=\"text-sm text-muted-foreground\">{activity.timestamp}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-foreground\">{formatCurrency(activity.amount)}</p>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {activity.type}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"plans\" className=\"space-y-8\">\n            {/* Top Plans */}\n            <div className=\"admin-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"w-5 h-5 text-primary\" />\n                  Top Performing Plans\n                </CardTitle>\n                <CardDescription>Plans with highest sales and revenue</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {analytics.topPlans.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No Plan Data</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Plan performance data will appear here once orders are placed.\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {analytics.topPlans.map((plan, index) => (\n                      <div key={plan.id} className=\"flex items-center justify-between p-4 rounded-xl bg-muted/30 border border-border/50\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-secondary/10 rounded-full flex items-center justify-center\">\n                            <FileText className=\"w-5 h-5 text-secondary\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-foreground\">{plan.title}</p>\n                            <p className=\"text-sm text-muted-foreground capitalize\">{plan.category}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-foreground\">{formatCurrency(plan.revenue)}</p>\n                          <p className=\"text-sm text-muted-foreground\">{plan.sales} sales</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminAnalytics;","size_bytes":22607},"client/src/pages/AdminDashboard.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Users, \n  FileText, \n  ShoppingCart, \n  TrendingUp, \n  BarChart3, \n  Settings, \n  DollarSign,\n  ArrowUpRight,\n  Calendar,\n  Target,\n  Award,\n  Activity\n} from 'lucide-react';\nimport AdminHeader from '@/components/AdminHeader';\n\ninterface DashboardStats {\n  totalUsers: number;\n  totalPlans: number;\n  totalOrders: number;\n  totalRevenue: number;\n  recentOrders: any[];\n  featuredPlans: any[];\n}\n\nconst AdminDashboard = () => {\n  const { user, isAdmin, loading, signOut } = useAuth();\n  const navigate = useNavigate();\n  const [stats, setStats] = useState<DashboardStats>({\n    totalUsers: 0,\n    totalPlans: 0,\n    totalOrders: 0,\n    totalRevenue: 0,\n    recentOrders: [],\n    featuredPlans: []\n  });\n  const [loadingStats, setLoadingStats] = useState(true);\n\n  useEffect(() => {\n    if (!loading && (!user || !isAdmin)) {\n      navigate('/admin/login');\n    }\n  }, [user, isAdmin, loading, navigate]);\n\n  useEffect(() => {\n    if (user && isAdmin) {\n      fetchDashboardStats();\n    }\n  }, [user, isAdmin]);\n\n  const fetchDashboardStats = async () => {\n    try {\n      const [analyticsResponse, ordersResponse, plansResponse] = await Promise.all([\n        fetch('/api/analytics'),\n        fetch('/api/orders'),\n        fetch('/api/plans?featured=true')\n      ]);\n\n      const analytics = await analyticsResponse.json();\n      const allOrders = await ordersResponse.json();\n      const featuredPlans = await plansResponse.json();\n\n      setStats({\n        totalUsers: analytics.overview?.totalUsers || 0,\n        totalPlans: analytics.planMetrics?.totalPlans || 0,\n        totalOrders: analytics.overview?.totalOrders || 0,\n        totalRevenue: analytics.overview?.totalRevenue || 0,\n        recentOrders: allOrders.slice(0, 5) || [],\n        featuredPlans: featuredPlans.slice(0, 5) || []\n      });\n    } catch (error) {\n      console.error('Error fetching dashboard stats:', error);\n      setStats({\n        totalUsers: 0,\n        totalPlans: 0,\n        totalOrders: 0,\n        totalRevenue: 0,\n        recentOrders: [],\n        featuredPlans: []\n      });\n    } finally {\n      setLoadingStats(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    await signOut();\n    navigate('/');\n  };\n\n  if (loading || !user || !isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/10 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-primary border-t-transparent mx-auto mb-6\"></div>\n          <p className=\"text-xl text-muted-foreground\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: number) => `‚Çµ${(amount || 0).toFixed(2)}`;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/10\">\n      <AdminHeader />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <div className=\"admin-card\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-foreground mb-2\">Welcome back, Admin! üëã</h1>\n                <p className=\"text-muted-foreground\">Here's what's happening with your platform today.</p>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <Badge variant=\"outline\" className=\"px-4 py-2\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  {new Date().toLocaleDateString('en-US', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric' \n                  })}\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {/* Total Users */}\n          <div className=\"metric-card group\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Total Users</p>\n                <p className=\"text-3xl font-bold text-foreground\">{stats.totalUsers}</p>\n                <p className=\"text-sm text-success mt-1 flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +12% from last month\n                </p>\n              </div>\n              <div className=\"p-3 bg-primary/10 rounded-xl group-hover:bg-primary/20 transition-colors\">\n                <Users className=\"w-8 h-8 text-primary\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Total Plans */}\n          <div className=\"metric-card group\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Total Plans</p>\n                <p className=\"text-3xl font-bold text-foreground\">{stats.totalPlans}</p>\n                <p className=\"text-sm text-success mt-1 flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +5 new this week\n                </p>\n              </div>\n              <div className=\"p-3 bg-secondary/10 rounded-xl group-hover:bg-secondary/20 transition-colors\">\n                <FileText className=\"w-8 h-8 text-secondary\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Total Orders */}\n          <div className=\"metric-card group\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Total Orders</p>\n                <p className=\"text-3xl font-bold text-foreground\">{stats.totalOrders}</p>\n                <p className=\"text-sm text-success mt-1 flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +8% from last week\n                </p>\n              </div>\n              <div className=\"p-3 bg-accent/10 rounded-xl group-hover:bg-accent/20 transition-colors\">\n                <ShoppingCart className=\"w-8 h-8 text-accent\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Total Revenue */}\n          <div className=\"metric-card group\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Total Revenue</p>\n                <p className=\"text-3xl font-bold text-foreground\">{formatCurrency(stats.totalRevenue)}</p>\n                <p className=\"text-sm text-success mt-1 flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  +15% from last month\n                </p>\n              </div>\n              <div className=\"p-3 bg-warning/10 rounded-xl group-hover:bg-warning/20 transition-colors\">\n                <DollarSign className=\"w-8 h-8 text-warning\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Button \n            variant=\"outline\" \n            className=\"admin-card h-auto p-6 flex flex-col items-center justify-center space-y-3 hover:shadow-xl transition-all duration-300 group\"\n            onClick={() => navigate('/admin/analytics')}\n          >\n            <div className=\"p-3 bg-primary/10 rounded-xl group-hover:bg-primary/20 transition-colors\">\n              <BarChart3 className=\"w-8 h-8 text-primary\" />\n            </div>\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold text-foreground\">View Analytics</h3>\n              <p className=\"text-sm text-muted-foreground\">Detailed insights</p>\n            </div>\n            <ArrowUpRight className=\"w-5 h-5 text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-transform\" />\n          </Button>\n\n          <Button \n            variant=\"outline\" \n            className=\"admin-card h-auto p-6 flex flex-col items-center justify-center space-y-3 hover:shadow-xl transition-all duration-300 group\"\n            onClick={() => navigate('/admin/plans')}\n          >\n            <div className=\"p-3 bg-secondary/10 rounded-xl group-hover:bg-secondary/20 transition-colors\">\n              <FileText className=\"w-8 h-8 text-secondary\" />\n            </div>\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold text-foreground\">Manage Plans</h3>\n              <p className=\"text-sm text-muted-foreground\">Add & edit plans</p>\n            </div>\n            <ArrowUpRight className=\"w-5 h-5 text-secondary group-hover:translate-x-1 group-hover:-translate-y-1 transition-transform\" />\n          </Button>\n\n          <Button \n            variant=\"outline\" \n            className=\"admin-card h-auto p-6 flex flex-col items-center justify-center space-y-3 hover:shadow-xl transition-all duration-300 group\"\n            onClick={() => navigate('/admin/orders')}\n          >\n            <div className=\"p-3 bg-accent/10 rounded-xl group-hover:bg-accent/20 transition-colors\">\n              <ShoppingCart className=\"w-8 h-8 text-accent\" />\n            </div>\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold text-foreground\">View Orders</h3>\n              <p className=\"text-sm text-muted-foreground\">Track sales</p>\n            </div>\n            <ArrowUpRight className=\"w-5 h-5 text-accent group-hover:translate-x-1 group-hover:-translate-y-1 transition-transform\" />\n          </Button>\n\n          <Button \n            variant=\"outline\" \n            className=\"admin-card h-auto p-6 flex flex-col items-center justify-center space-y-3 hover:shadow-xl transition-all duration-300 group\"\n            onClick={() => navigate('/admin/users')}\n          >\n            <div className=\"p-3 bg-warning/10 rounded-xl group-hover:bg-warning/20 transition-colors\">\n              <Users className=\"w-8 h-8 text-warning\" />\n            </div>\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold text-foreground\">Manage Users</h3>\n              <p className=\"text-sm text-muted-foreground\">User management</p>\n            </div>\n            <ArrowUpRight className=\"w-5 h-5 text-warning group-hover:translate-x-1 group-hover:-translate-y-1 transition-transform\" />\n          </Button>\n        </div>\n\n        {/* Recent Activity & Featured Plans */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Recent Orders */}\n          <div className=\"admin-card\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Activity className=\"w-5 h-5 text-primary\" />\n                    Recent Orders\n                  </CardTitle>\n              <CardDescription>Latest plan purchases</CardDescription>\n                </div>\n                <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                  {stats.recentOrders.length} orders\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {stats.recentOrders.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <ShoppingCart className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No Orders Yet</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Orders will appear here once customers start purchasing plans.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {stats.recentOrders.map((order, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 rounded-xl bg-muted/30 border border-border/50\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <ShoppingCart className=\"w-5 h-5 text-primary\" />\n                        </div>\n                      <div>\n                          <p className=\"font-medium text-foreground\">Order #{order.id?.slice(0, 8)}</p>\n                          <p className=\"text-sm text-muted-foreground\">{order.tier} package</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-foreground\">{formatCurrency(order.amount)}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(order.created_at).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </div>\n\n          {/* Featured Plans */}\n          <div className=\"admin-card\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Award className=\"w-5 h-5 text-primary\" />\n                    Featured Plans\n                  </CardTitle>\n                  <CardDescription>Top performing plans</CardDescription>\n                </div>\n                <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                  {stats.featuredPlans.length} plans\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {stats.featuredPlans.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No Featured Plans</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Add some plans and mark them as featured to see them here.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {stats.featuredPlans.map((plan, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 rounded-xl bg-muted/30 border border-border/50\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-secondary/10 rounded-full flex items-center justify-center\">\n                          <FileText className=\"w-5 h-5 text-secondary\" />\n                        </div>\n                      <div>\n                          <p className=\"font-medium text-foreground\">{plan.title}</p>\n                          <p className=\"text-sm text-muted-foreground\">{plan.plan_type}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-foreground\">‚Çµ{plan.basic_price}</p>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {plan.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"mt-8\">\n          <div className=\"admin-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-5 h-5 text-primary\" />\n                Platform Overview\n              </CardTitle>\n              <CardDescription>Key metrics and insights</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center p-6 rounded-xl bg-gradient-to-br from-primary/5 to-primary/10 border border-primary/20\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">{stats.totalUsers}</div>\n                  <div className=\"text-sm text-muted-foreground\">Registered Users</div>\n                </div>\n                <div className=\"text-center p-6 rounded-xl bg-gradient-to-br from-secondary/5 to-secondary/10 border border-secondary/20\">\n                  <div className=\"text-3xl font-bold text-secondary mb-2\">{stats.totalPlans}</div>\n                  <div className=\"text-sm text-muted-foreground\">Available Plans</div>\n                </div>\n                <div className=\"text-center p-6 rounded-xl bg-gradient-to-br from-accent/5 to-accent/10 border border-accent/20\">\n                  <div className=\"text-3xl font-bold text-accent mb-2\">{stats.totalOrders}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Orders</div>\n                </div>\n              </div>\n            </CardContent>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;","size_bytes":17683},"client/src/pages/AdminLogin.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Shield, ArrowLeft } from 'lucide-react';\n\nconst AdminLogin = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginForm, setLoginForm] = useState({\n    email: '',\n    password: ''\n  });\n  \n  const { signIn, user, isAdmin, loading } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!loading && user && isAdmin) {\n      navigate('/admin/dashboard');\n    }\n  }, [user, isAdmin, loading, navigate]);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const { error } = await signIn(loginForm.email, loginForm.password);\n      \n      if (error) {\n        toast({\n          title: \"Login Error\",\n          description: error.message,\n          variant: \"destructive\"\n        });\n      } else {\n        // Wait for profile to load to check admin status\n        setTimeout(() => {\n          toast({\n            title: \"Admin Login Successful\",\n            description: \"Welcome to the admin dashboard.\"\n          });\n        }, 1000);\n      }\n    } catch (error) {\n      toast({\n        title: \"Login Error\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-secondary/20 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"mb-8 text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate('/')}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Website\n          </Button>\n          \n          <div className=\"flex items-center justify-center mb-4\">\n            <img \n              src=\"/logo.png\" \n              alt=\"SAK Constructions\" \n              className=\"h-12 w-auto\"\n            />\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Admin Access</h1>\n          <p className=\"text-muted-foreground\">Management Portal</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Admin Login</CardTitle>\n            <CardDescription>\n              Enter your admin credentials to access the dashboard\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"admin@sakconstructionsgh.com\"\n                  value={loginForm.email}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your admin password\"\n                  value={loginForm.password}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                />\n              </div>\n              \n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? 'Signing in...' : 'Sign In to Dashboard'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminLogin;","size_bytes":4144},"client/src/pages/AdminOrders.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ShoppingCart, Search, Filter, Download, MoreHorizontal } from 'lucide-react';\nimport AdminHeader from '@/components/AdminHeader';\n\nconst AdminOrders = () => {\n  const { user, isAdmin, loading } = useAuth();\n  const navigate = useNavigate();\n  const [orders, setOrders] = useState([]);\n  const [filteredOrders, setFilteredOrders] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [packageFilter, setPackageFilter] = useState('all');\n  const [sortBy, setSortBy] = useState('newest');\n  const [loadingOrders, setLoadingOrders] = useState(true);\n\n  useEffect(() => {\n    if (!loading && (!user || !isAdmin)) {\n      navigate('/admin/login');\n    }\n  }, [user, isAdmin, loading, navigate]);\n\n  useEffect(() => {\n    if (user && isAdmin) {\n      fetchOrders();\n    }\n  }, [user, isAdmin]);\n\n  useEffect(() => {\n    filterOrders();\n  }, [orders, searchTerm, statusFilter, packageFilter, sortBy]);\n\n\n  const fetchOrders = async () => {\n    try {\n      const response = await fetch('/api/orders');\n      const data = await response.json();\n      setOrders(data || []);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n    } finally {\n      setLoadingOrders(false);\n    }\n  };\n\n  const filterOrders = () => {\n    if (!Array.isArray(orders)) {\n      setFilteredOrders([]);\n      return;\n    }\n\n    let filtered = orders.filter(order => {\n      const matchesSearch = (order.plan_id || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           (order.user_id || '').toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesStatus = statusFilter === 'all' || (order.payment_status || 'pending') === statusFilter;\n      const matchesPackage = packageFilter === 'all' || (order.package_type || 'basic') === packageFilter;\n      return matchesSearch && matchesStatus && matchesPackage;\n    });\n\n    // Sort orders\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'newest':\n          return new Date(b.created_at || 0).getTime() - new Date(a.created_at || 0).getTime();\n        case 'oldest':\n          return new Date(a.created_at || 0).getTime() - new Date(b.created_at || 0).getTime();\n        case 'amount-high':\n          return (b.amount || 0) - (a.amount || 0);\n        case 'amount-low':\n          return (a.amount || 0) - (b.amount || 0);\n        default:\n          return 0;\n      }\n    });\n\n    setFilteredOrders(filtered);\n  };\n\n  if (loading || loadingOrders) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading orders...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAdmin) {\n    return null;\n  }\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/10\">\n      <AdminHeader />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">Order Management</h1>\n            <p className=\"text-muted-foreground\">View and manage customer orders</p>\n          </div>\n          <Button>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Orders\n          </Button>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Filter className=\"h-5 w-5\" />\n              <span>Filters</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search orders by Plan ID or User ID...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full md:w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Orders</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                  <SelectItem value=\"processing\">Processing</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={packageFilter} onValueChange={setPackageFilter}>\n                <SelectTrigger className=\"w-full md:w-48\">\n                  <SelectValue placeholder=\"Filter by package\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Packages</SelectItem>\n                  <SelectItem value=\"basic\">Basic</SelectItem>\n                  <SelectItem value=\"standard\">Standard</SelectItem>\n                  <SelectItem value=\"premium\">Premium</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-full md:w-48\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">Newest</SelectItem>\n                  <SelectItem value=\"oldest\">Oldest</SelectItem>\n                  <SelectItem value=\"amount-high\">Amount (High to Low)</SelectItem>\n                  <SelectItem value=\"amount-low\">Amount (Low to High)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <ShoppingCart className=\"h-5 w-5\" />\n              <span>Recent Orders</span>\n            </CardTitle>\n            <CardDescription>Latest customer orders and their status</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {loadingOrders ? (\n              <div className=\"space-y-3\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-muted animate-pulse rounded\"></div>\n                ))}\n              </div>\n            ) : filteredOrders.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <ShoppingCart className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No Orders Found</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {orders.length === 0\n                    ? \"Orders will appear here once customers start purchasing plans.\"\n                    : \"Try adjusting your search or filter criteria.\"\n                  }\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Order ID</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Plan</TableHead>\n                    <TableHead>Package</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {Array.isArray(filteredOrders) && filteredOrders.map((order) => (\n                    <TableRow key={order.id}>\n                      <TableCell className=\"font-medium\">#{(order.id || '').substring(0, 8)}</TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{order.plan_id || 'Unknown Plan'}</div>\n                          <div className=\"text-sm text-gray-500\">{order.user_id || 'Unknown User'}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={(order.package_type || 'basic') === 'premium' ? 'default' :\n                                      (order.package_type || 'basic') === 'standard' ? 'secondary' : 'outline'}>\n                          {order.package_type || 'basic'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">GH‚Çµ{order.amount || 0}</TableCell>\n                      <TableCell>\n                        <Badge variant={(order.payment_status || 'pending') === 'completed' ? 'default' :\n                                      (order.payment_status || 'pending') === 'processing' ? 'secondary' : 'destructive'}>\n                          {order.payment_status || 'pending'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-sm text-gray-500\">\n                        {new Date(order.created_at || Date.now()).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <Button size=\"sm\" variant=\"ghost\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminOrders;","size_bytes":10674},"client/src/pages/AdminPlans.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { api } from '@/lib/api';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, Edit, Trash2, ArrowLeft, Star, Eye, CheckCircle } from 'lucide-react';\n\ntype PlanType = 'villa' | 'bungalow' | 'townhouse' | 'duplex' | 'apartment' | 'commercial';\n\ninterface Plan {\n  id: string;\n  title: string;\n  description: string | null;\n  plan_type: string;\n  bedrooms: number | null;\n  bathrooms: number | null;\n  area_sqft: number | null;\n  basic_price: number;\n  standard_price: number;\n  premium_price: number;\n  featured: boolean;\n  status: string;\n  image_url?: string | null;\n  gallery_images?: any;\n  plan_files?: any;\n  created_at: string;\n}\n\nconst AdminPlans = () => {\n  const { user, isAdmin, loading } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [plans, setPlans] = useState<Plan[]>([]);\n  const [loadingPlans, setLoadingPlans] = useState(true);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingPlan, setEditingPlan] = useState<Plan | null>(null);\n\n  const [planForm, setPlanForm] = useState({\n    title: '',\n    description: '',\n    plan_type: 'villa' as PlanType,\n    bedrooms: 3,\n    bathrooms: 2,\n    area_sqft: 2000,\n    basic_price: 199.99,\n    standard_price: 399.99,\n    premium_price: 599.99,\n    featured: false,\n    status: 'active',\n    image_url: null as string | null,\n    gallery_images: null as any,\n    plan_files: null as any\n  });\n\n  const [uploadingImage, setUploadingImage] = useState(false);\n  const [uploadingFiles, setUploadingFiles] = useState(false);\n\n  useEffect(() => {\n    if (!loading && (!user || !isAdmin)) {\n      navigate('/admin/login');\n    }\n  }, [user, isAdmin, loading, navigate]);\n\n  useEffect(() => {\n    if (user && isAdmin) {\n      fetchPlans();\n    }\n  }, [user, isAdmin]);\n\n  const fetchPlans = async () => {\n    try {\n      const data = await api.getPlans();\n      setPlans(data || []);\n    } catch (error) {\n      console.error('Error fetching plans:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch plans\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoadingPlans(false);\n    }\n  };\n\n  const handleCreatePlan = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await api.createPlan(planForm);\n\n      toast({\n        title: \"Success\",\n        description: \"Plan created successfully\"\n      });\n      \n      setIsCreateModalOpen(false);\n      resetForm();\n      fetchPlans();\n    } catch (error) {\n      console.error('Error creating plan:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create plan\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleUpdatePlan = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingPlan) return;\n\n    try {\n      // Mock update for now\n      console.log('Update plan:', planForm);\n\n      toast({\n        title: \"Success\",\n        description: \"Plan updated successfully\"\n      });\n      \n      setEditingPlan(null);\n      resetForm();\n      fetchPlans();\n    } catch (error) {\n      console.error('Error updating plan:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update plan\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleDeletePlan = async (planId: string) => {\n    if (!confirm('Are you sure you want to delete this plan?')) return;\n\n    try {\n      // Mock delete for now\n      console.log('Delete plan:', planId);\n\n      toast({\n        title: \"Success\",\n        description: \"Plan deleted successfully\"\n      });\n      \n      fetchPlans();\n    } catch (error) {\n      console.error('Error deleting plan:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete plan\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const toggleFeatured = async (plan: Plan) => {\n    try {\n      // Mock toggle featured for now\n      console.log('Toggle featured for plan:', plan.id);\n\n      toast({\n        title: \"Success\",\n        description: `Plan ${!plan.featured ? 'featured' : 'unfeatured'} successfully`\n      });\n      \n      fetchPlans();\n    } catch (error) {\n      console.error('Error updating plan:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update plan\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setPlanForm({\n      title: '',\n      description: '',\n      plan_type: 'villa' as PlanType,\n      bedrooms: 3,\n      bathrooms: 2,\n      area_sqft: 2000,\n      basic_price: 199.99,\n      standard_price: 399.99,\n      premium_price: 599.99,\n      featured: false,\n      status: 'active',\n      image_url: null,\n      gallery_images: null,\n      plan_files: null\n    });\n  };\n\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setUploadingImage(true);\n    const formData = new FormData();\n    formData.append('image', file);\n\n    try {\n      const response = await fetch('/api/upload/image', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        setPlanForm(prev => ({ ...prev, image_url: result.url }));\n        toast({\n          title: \"Success\",\n          description: \"Image uploaded successfully\"\n        });\n      } else {\n        throw new Error('Upload failed');\n      }\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload image\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploadingImage(false);\n    }\n  };\n\n  const handlePlanFilesUpload = async (event: React.ChangeEvent<HTMLInputElement>, tier: string) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    setUploadingFiles(true);\n    const formData = new FormData();\n    \n    for (let i = 0; i < files.length; i++) {\n      formData.append(tier, files[i]);\n    }\n\n    try {\n      const response = await fetch('/api/upload/plan-files', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        setPlanForm(prev => ({ \n          ...prev, \n          plan_files: { \n            ...prev.plan_files, \n            [tier]: result.files[tier] || [] // Ensure tier-specific files are stored correctly\n          } \n        }));\n        toast({\n          title: \"Success\",\n          description: `${tier} plan files uploaded successfully`\n        });\n      } else {\n        throw new Error('Upload failed');\n      }\n    } catch (error) {\n      console.error('Error uploading plan files:', error);\n      toast({\n        title: \"Error\",\n        description: `Failed to upload ${tier} plan files`,\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploadingFiles(false);\n    }\n  };\n\n  const openEditModal = (plan: Plan) => {\n    setEditingPlan(plan);\n    setPlanForm({\n      title: plan.title,\n      description: plan.description || '',\n      plan_type: plan.plan_type as PlanType,\n      bedrooms: plan.bedrooms || 3,\n      bathrooms: plan.bathrooms || 2,\n      area_sqft: plan.area_sqft || 2000,\n      basic_price: plan.basic_price,\n      standard_price: plan.standard_price,\n      premium_price: plan.premium_price,\n      featured: plan.featured,\n      status: plan.status,\n      image_url: plan.image_url ?? null,\n      gallery_images: plan.gallery_images,\n      plan_files: plan.plan_files\n    });\n  };\n\n  if (loading || !user || !isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b bg-card\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate('/admin/dashboard')}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold\">Plan Management</h1>\n              <p className=\"text-sm text-muted-foreground\">Manage construction plans and pricing</p>\n            </div>\n          </div>\n          \n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add New Plan\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                        <DialogHeader>\n            <DialogTitle>Create New Plan</DialogTitle>\n            <DialogDescription>\n              Add a new construction plan with all the necessary details and pricing tiers.\n            </DialogDescription>\n          </DialogHeader>\n              <form onSubmit={handleCreatePlan} className=\"space-y-4\">\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Plan Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={planForm.title}\n                    onChange={(e) => setPlanForm(prev => ({ ...prev, title: e.target.value }))}\n                    required\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={planForm.description}\n                    onChange={(e) => setPlanForm(prev => ({ ...prev, description: e.target.value }))}\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"plan_type\">Plan Type</Label>\n                    <Select value={planForm.plan_type} onValueChange={(value) => setPlanForm(prev => ({ ...prev, plan_type: value as PlanType }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"villa\">Villa</SelectItem>\n                        <SelectItem value=\"bungalow\">Bungalow</SelectItem>\n                        <SelectItem value=\"townhouse\">Townhouse</SelectItem>\n                        <SelectItem value=\"duplex\">Duplex</SelectItem>\n                        <SelectItem value=\"apartment\">Apartment</SelectItem>\n                        <SelectItem value=\"commercial\">Commercial</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select value={planForm.status} onValueChange={(value) => setPlanForm(prev => ({ ...prev, status: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        <SelectItem value=\"draft\">Draft</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bedrooms\">Bedrooms</Label>\n                    <Input\n                      id=\"bedrooms\"\n                      type=\"number\"\n                      value={planForm.bedrooms}\n                      onChange={(e) => setPlanForm(prev => ({ ...prev, bedrooms: parseInt(e.target.value) }))}\n                      min=\"1\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bathrooms\">Bathrooms</Label>\n                    <Input\n                      id=\"bathrooms\"\n                      type=\"number\"\n                      value={planForm.bathrooms}\n                      onChange={(e) => setPlanForm(prev => ({ ...prev, bathrooms: parseInt(e.target.value) }))}\n                      min=\"1\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"area_sqft\">Area (sq ft)</Label>\n                    <Input\n                      id=\"area_sqft\"\n                      type=\"number\"\n                      value={planForm.area_sqft}\n                      onChange={(e) => setPlanForm(prev => ({ ...prev, area_sqft: parseInt(e.target.value) }))}\n                      min=\"100\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"basic_price\">Basic Price (‚Çµ)</Label>\n                    <Input\n                      id=\"basic_price\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={planForm.basic_price}\n                      onChange={(e) => setPlanForm(prev => ({ ...prev, basic_price: parseFloat(e.target.value) }))}\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"standard_price\">Standard Price (‚Çµ)</Label>\n                    <Input\n                      id=\"standard_price\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={planForm.standard_price}\n                      onChange={(e) => setPlanForm(prev => ({ ...prev, standard_price: parseFloat(e.target.value) }))}\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"premium_price\">Premium Price (‚Çµ)</Label>\n                    <Input\n                      id=\"premium_price\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={planForm.premium_price}\n                      onChange={(e) => setPlanForm(prev => ({ ...prev, premium_price: parseFloat(e.target.value) }))}\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n\n                {/* Image Upload Section */}\n                <div className=\"space-y-2\">\n                  <Label>Plan Image</Label>\n                  <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-4\">\n                    <div className=\"flex flex-col items-center space-y-2\">\n                      {planForm.image_url ? (\n                        <div className=\"space-y-2\">\n                          <img src={planForm.image_url} alt=\"Plan preview\" className=\"max-w-32 h-20 object-cover rounded\" />\n                          <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => setPlanForm(prev => ({ ...prev, image_url: null }))}>\n                            Remove Image\n                          </Button>\n                        </div>\n                      ) : (\n                        <>\n                          <div className=\"text-center\">\n                            <p className=\"text-sm text-muted-foreground\">Upload plan image (JPG, PNG)</p>\n                            <p className=\"text-xs text-muted-foreground\">Max size: 10MB</p>\n                          </div>\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleImageUpload}\n                            disabled={uploadingImage}\n                            className=\"max-w-xs\"\n                          />\n                          {uploadingImage && <p className=\"text-xs text-blue-600\">Uploading...</p>}\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Plan Files Upload Section */}\n                <div className=\"space-y-4\">\n                  <Label>Plan Files by Tier</Label>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {(['basic', 'standard', 'premium'] as const).map((tier) => (\n                      <div key={tier} className=\"border rounded-lg p-3\">\n                        <Label className=\"text-sm font-medium capitalize\">{tier} Files</Label>\n                        <div className=\"mt-2 space-y-2\">\n                          <Input\n                            type=\"file\"\n                            multiple\n                            accept=\".pdf,.dwg,.dxf,.zip\"\n                            onChange={(e) => handlePlanFilesUpload(e, tier)}\n                            disabled={uploadingFiles}\n                            className=\"text-xs\"\n                          />\n                          <p className=\"text-xs text-muted-foreground\">PDF, DWG, DXF, ZIP (Max 50MB each)</p>\n                          {planForm.plan_files?.[tier] && Array.isArray(planForm.plan_files[tier]) && planForm.plan_files[tier].length > 0 && (\n                            <div className=\"space-y-1\">\n                              <p className=\"text-xs font-medium\">{planForm.plan_files[tier].length} file(s) uploaded</p>\n                              {planForm.plan_files[tier].map((file: string, index: number) => (\n                                <p key={index} className=\"text-xs text-muted-foreground truncate\">\n                                  {file.split('/').pop()}\n                                </p>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  {uploadingFiles && <p className=\"text-sm text-blue-600\">Uploading files...</p>}\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"featured\"\n                    checked={planForm.featured}\n                    onChange={(e) => setPlanForm(prev => ({ ...prev, featured: e.target.checked }))}\n                  />\n                  <Label htmlFor=\"featured\">Featured Plan</Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateModalOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    Create Plan\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>All Plans ({plans.length})</CardTitle>\n            <CardDescription>Manage your construction plans and pricing tiers</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {loadingPlans ? (\n              <div className=\"space-y-3\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-muted animate-pulse rounded\"></div>\n                ))}\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Plan</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Specs</TableHead>\n                    <TableHead>Pricing</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {plans.map((plan) => (\n                    <TableRow key={plan.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium flex items-center\">\n                            {plan.title}\n                            {plan.featured && <Star className=\"w-4 h-4 ml-2 text-yellow-500\" />}\n                            {plan.plan_files && Object.values(plan.plan_files).some((files: any) => Array.isArray(files) && files?.length > 0) && (\n                              <div title=\"Has downloadable files\">\n                                <CheckCircle className=\"w-4 h-4 ml-2 text-green-500\" />\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                            {plan.description}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className=\"capitalize\">\n                          {plan.plan_type}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          {plan.bedrooms}BR / {plan.bathrooms}BA<br />\n                          {plan.area_sqft?.toLocaleString()} sq ft\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          Basic: ‚Çµ{plan.basic_price}<br />\n                          Standard: ‚Çµ{plan.standard_price}<br />\n                          Premium: ‚Çµ{plan.premium_price}\n                        </div>\n                        <div className=\"mt-2 flex gap-1\">\n                                                     {['basic', 'standard', 'premium'].map((tier) => (\n                             <Badge\n                               key={tier}\n                               className={cn(\n                                 \"text-xs font-semibold\",\n                                 plan.plan_files?.[tier] && Array.isArray(plan.plan_files[tier]) && plan.plan_files[tier].length > 0 \n                                   ? tier === 'basic' ? 'bg-tier-basic text-white' \n                                     : tier === 'standard' ? 'bg-tier-standard text-white'\n                                     : 'bg-tier-premium text-white'\n                                   : 'bg-gray-200 text-gray-600'\n                               )}\n                             >\n                               {tier}: {plan.plan_files?.[tier] && Array.isArray(plan.plan_files[tier]) ? plan.plan_files[tier].length : 0}\n                             </Badge>\n                           ))}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={plan.status === 'active' ? 'default' : 'secondary'}>\n                          {plan.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => toggleFeatured(plan)}\n                            title={plan.featured ? 'Remove from featured' : 'Mark as featured'}\n                          >\n                            <Star className={`w-4 h-4 ${plan.featured ? 'text-yellow-500 fill-current' : ''}`} />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => navigate(`/plans/${plan.id}`)}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => openEditModal(plan)}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleDeletePlan(plan.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Edit Modal */}\n      <Dialog open={!!editingPlan} onOpenChange={(open) => !open && setEditingPlan(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Plan</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleUpdatePlan} className=\"space-y-4\">\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-title\">Plan Title</Label>\n              <Input\n                id=\"edit-title\"\n                value={planForm.title}\n                onChange={(e) => setPlanForm(prev => ({ ...prev, title: e.target.value }))}\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-description\">Description</Label>\n              <Textarea\n                id=\"edit-description\"\n                value={planForm.description}\n                onChange={(e) => setPlanForm(prev => ({ ...prev, description: e.target.value }))}\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-plan_type\">Plan Type</Label>\n                <Select value={planForm.plan_type} onValueChange={(value) => setPlanForm(prev => ({ ...prev, plan_type: value as PlanType }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"villa\">Villa</SelectItem>\n                    <SelectItem value=\"bungalow\">Bungalow</SelectItem>\n                    <SelectItem value=\"townhouse\">Townhouse</SelectItem>\n                    <SelectItem value=\"duplex\">Duplex</SelectItem>\n                    <SelectItem value=\"apartment\">Apartment</SelectItem>\n                    <SelectItem value=\"commercial\">Commercial</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-status\">Status</Label>\n                <Select value={planForm.status} onValueChange={(value) => setPlanForm(prev => ({ ...prev, status: value }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-bedrooms\">Bedrooms</Label>\n                <Input\n                  id=\"edit-bedrooms\"\n                  type=\"number\"\n                  value={planForm.bedrooms}\n                  onChange={(e) => setPlanForm(prev => ({ ...prev, bedrooms: parseInt(e.target.value) }))}\n                  min=\"1\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-bathrooms\">Bathrooms</Label>\n                <Input\n                  id=\"edit-bathrooms\"\n                  type=\"number\"\n                  value={planForm.bathrooms}\n                  onChange={(e) => setPlanForm(prev => ({ ...prev, bathrooms: parseInt(e.target.value) }))}\n                  min=\"1\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-area_sqft\">Area (sq ft)</Label>\n                <Input\n                  id=\"edit-area_sqft\"\n                  type=\"number\"\n                  value={planForm.area_sqft}\n                  onChange={(e) => setPlanForm(prev => ({ ...prev, area_sqft: parseInt(e.target.value) }))}\n                  min=\"100\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-basic_price\">Basic Price (‚Çµ)</Label>\n                <Input\n                  id=\"edit-basic_price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={planForm.basic_price}\n                  onChange={(e) => setPlanForm(prev => ({ ...prev, basic_price: parseFloat(e.target.value) }))}\n                  min=\"0\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-standard_price\">Standard Price (‚Çµ)</Label>\n                <Input\n                  id=\"edit-standard_price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={planForm.standard_price}\n                  onChange={(e) => setPlanForm(prev => ({ ...prev, standard_price: parseFloat(e.target.value) }))}\n                  min=\"0\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-premium_price\">Premium Price (‚Çµ)</Label>\n                <Input\n                  id=\"edit-premium_price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={planForm.premium_price}\n                  onChange={(e) => setPlanForm(prev => ({ ...prev, premium_price: parseFloat(e.target.value) }))}\n                  min=\"0\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"edit-featured\"\n                checked={planForm.featured}\n                onChange={(e) => setPlanForm(prev => ({ ...prev, featured: e.target.checked }))}\n              />\n              <Label htmlFor=\"edit-featured\">Featured Plan</Label>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setEditingPlan(null)}>\n                Cancel\n              </Button>\n              <Button type=\"submit\">\n                Update Plan\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AdminPlans;\n","size_bytes":32615},"client/src/pages/AdminSettings.tsx":{"content":"\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Settings, Globe, Mail, CreditCard, Shield } from 'lucide-react';\nimport AdminHeader from '@/components/AdminHeader';\n\nconst AdminSettings = () => {\n  const { user, isAdmin, loading } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!loading && (!user || !isAdmin)) {\n      navigate('/admin/login');\n    }\n  }, [user, isAdmin, loading, navigate]);\n\n  if (loading || !user || !isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/10\">\n      <AdminHeader />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">Settings</h1>\n            <p className=\"text-muted-foreground\">Configure platform settings and preferences</p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"general\" className=\"space-y-8\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"general\">General</TabsTrigger>\n            <TabsTrigger value=\"payments\">Payments</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            <TabsTrigger value=\"security\">Security</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"general\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Globe className=\"h-5 w-5\" />\n                  <span>Site Settings</span>\n                </CardTitle>\n                <CardDescription>Configure basic site information</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"siteName\">Site Name</Label>\n                  <Input id=\"siteName\" placeholder=\"SAK Constructions\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"siteDescription\">Site Description</Label>\n                  <Textarea id=\"siteDescription\" placeholder=\"Premium construction plans for your dream home\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"contactEmail\">Contact Email</Label>\n                  <Input id=\"contactEmail\" type=\"email\" placeholder=\"sakconstructiongh@gmail.com\" />\n                </div>\n                <Button>Save Changes</Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"payments\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CreditCard className=\"h-5 w-5\" />\n                  <span>Payment Settings</span>\n                </CardTitle>\n                <CardDescription>Configure payment methods and pricing</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"paystackKey\">Paystack Public Key</Label>\n                  <Input id=\"paystackKey\" placeholder=\"pk_test_...\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currency\">Default Currency</Label>\n                  <Input id=\"currency\" value=\"GHS\" readOnly />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch id=\"enablePayments\" />\n                  <Label htmlFor=\"enablePayments\">Enable Online Payments</Label>\n                </div>\n                <Button>Save Payment Settings</Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Mail className=\"h-5 w-5\" />\n                  <span>Email Notifications</span>\n                </CardTitle>\n                <CardDescription>Configure when to send email notifications</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Switch id=\"orderNotifications\" defaultChecked />\n                  <Label htmlFor=\"orderNotifications\">New Order Notifications</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch id=\"userNotifications\" defaultChecked />\n                  <Label htmlFor=\"userNotifications\">New User Registration</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch id=\"paymentNotifications\" defaultChecked />\n                  <Label htmlFor=\"paymentNotifications\">Payment Confirmations</Label>\n                </div>\n                <Button>Save Notification Settings</Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  <span>Security Settings</span>\n                </CardTitle>\n                <CardDescription>Configure security and access controls</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Switch id=\"requireEmailVerification\" defaultChecked />\n                  <Label htmlFor=\"requireEmailVerification\">Require Email Verification</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch id=\"enableTwoFactor\" />\n                  <Label htmlFor=\"enableTwoFactor\">Enable Two-Factor Authentication</Label>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n                  <Input id=\"sessionTimeout\" type=\"number\" placeholder=\"60\" />\n                </div>\n                <Button>Save Security Settings</Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminSettings;\n","size_bytes":7458},"client/src/pages/AdminUsers.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Users, Search, UserPlus, MoreHorizontal } from 'lucide-react';\nimport AdminHeader from '@/components/AdminHeader';\n\nconst AdminUsers = () => {\n  const { user, isAdmin, loading } = useAuth();\n  const navigate = useNavigate();\n  const [users, setUsers] = useState<any[]>([]);\n  const [filteredUsers, setFilteredUsers] = useState<any[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [roleFilter, setRoleFilter] = useState('all');\n  const [sortBy, setSortBy] = useState('newest');\n  const [loadingUsers, setLoadingUsers] = useState(true);\n\n  useEffect(() => {\n    if (loading) return;\n\n    if (!isAdmin) {\n      navigate('/admin/login');\n      return;\n    }\n\n    fetchUsers();\n  }, [loading, isAdmin, navigate]);\n\n  const fetchUsers = async () => {\n    try {\n      setLoadingUsers(true);\n      const response = await fetch('/api/users');\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      const data = await response.json();\n      setUsers(Array.isArray(data) ? data : []);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setUsers([]);\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Filter and sort users\n  useEffect(() => {\n    if (!Array.isArray(users)) {\n      setFilteredUsers([]);\n      return;\n    }\n\n    let filtered = users.filter(user => {\n      const userName = user.firstName && user.lastName \n        ? `${user.firstName} ${user.lastName}` \n        : user.email || '';\n      const matchesSearch = userName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           (user.email || '').toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesRole = roleFilter === 'all' || (user.role || 'user') === roleFilter;\n      return matchesSearch && matchesRole;\n    });\n\n    // Sort users\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'newest':\n          return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n        case 'oldest':\n          return new Date(a.createdAt || 0).getTime() - new Date(b.createdAt || 0).getTime();\n        case 'name':\n          const aName = a.firstName && a.lastName \n            ? `${a.firstName} ${a.lastName}` \n            : a.email || '';\n          const bName = b.firstName && b.lastName \n            ? `${b.firstName} ${b.lastName}` \n            : b.email || '';\n          return aName.localeCompare(bName);\n        default:\n          return 0;\n      }\n    });\n\n    setFilteredUsers(filtered);\n  }, [users, searchTerm, roleFilter, sortBy]);\n\n  if (loading || loadingUsers) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading users...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAdmin) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/10\">\n      <AdminHeader />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">User Management</h1>\n            <p className=\"text-muted-foreground\">Manage registered users and their permissions</p>\n          </div>\n          <Button onClick={() => navigate('/admin/invite-user')}>\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Invite User\n          </Button>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Search className=\"h-5 w-5\" />\n              <span>Search & Filter Users</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by name or email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Filter by role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Roles</SelectItem>\n                <SelectItem value=\"admin\">Admin</SelectItem>\n                <SelectItem value=\"user\">User</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Sort by\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"newest\">Newest Joined</SelectItem>\n                <SelectItem value=\"oldest\">Oldest Joined</SelectItem>\n                <SelectItem value=\"name\">Name (A-Z)</SelectItem>\n              </SelectContent>\n            </Select>\n          </CardContent>\n        </Card>\n\n        {/* Users Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5\" />\n              <span>Registered Users</span>\n            </CardTitle>\n            <CardDescription>All users registered on the platform</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {loadingUsers ? (\n              <div className=\"space-y-3\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-muted animate-pulse rounded\"></div>\n                ))}\n              </div>\n            ) : filteredUsers.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No Users Found</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {users.length === 0 \n                    ? \"Users will appear here once they register on the platform.\"\n                    : \"Try adjusting your search criteria.\"\n                  }\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Joined</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {Array.isArray(filteredUsers) && filteredUsers.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar>\n                            <AvatarFallback className=\"bg-blue-100 text-blue-600\">\n                              {(user.firstName || user.email)?.charAt(0).toUpperCase() || 'U'}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <div className=\"font-medium\">\n                              {user.firstName && user.lastName \n                                ? `${user.firstName} ${user.lastName}` \n                                : user.email}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">{user.email}</div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{user.email}</TableCell>\n                      <TableCell>\n                        <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                          {user.role || 'user'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"default\">\n                          active\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-sm text-gray-500\">\n                        {new Date(user.createdAt || Date.now()).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <Button size=\"sm\" variant=\"ghost\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminUsers;","size_bytes":9903},"client/src/pages/Checkout.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { ArrowLeft, CreditCard, CheckCircle } from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { Link, useNavigate, useSearchParams } from 'react-router-dom';\nimport { PaystackPayment } from '@/components/PaystackPayment';\nimport { api } from '@/lib/api';\n\nconst Checkout = () => {\n  const [checkoutData, setCheckoutData] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\n  const [paymentError, setPaymentError] = useState('');\n  const [verifying, setVerifying] = useState(false);\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  // Mock user state for demonstration. Replace with actual auth state.\n  const user = null; // Example: user = { id: '123', name: 'John Doe' }\n  const selectedPackage = checkoutData?.package || 'basic'; // Default to basic\n  const plan = { title: checkoutData?.planTitle || 'Basic Plan' }; // Mock plan title\n  const packagePrices = {\n    basic: 50.00,\n    standard: 100.00,\n    premium: 150.00,\n  }; // Mock prices\n\n  useEffect(() => {\n    const verifyPayment = async () => {\n      const reference = searchParams.get('reference');\n      if (reference) {\n        setVerifying(true);\n        try {\n          const response = await api.post('/api/payments/verify', { reference });\n          if (response.data.success) {\n            setPaymentSuccess(true);\n            localStorage.removeItem('checkoutData');\n          } else {\n            setPaymentError('Payment verification failed');\n          }\n        } catch (error) {\n          setPaymentError('Payment verification failed');\n        } finally {\n          setVerifying(false);\n        }\n      }\n    };\n\n    // Get checkout data from localStorage\n    const data = localStorage.getItem('checkoutData');\n    if (data) {\n      setCheckoutData(JSON.parse(data));\n      verifyPayment();\n    } else if (!searchParams.get('reference')) {\n      // No checkout data and no payment reference, redirect to plans\n      navigate('/plans');\n    }\n    setLoading(false);\n  }, [navigate, searchParams]);\n\n  const handlePaymentSuccess = (paymentData: any) => {\n    console.log('Payment successful:', paymentData);\n\n    if (paymentData.order && paymentData.order.id) {\n      // For premium packages, require account creation\n      if (selectedPackage === 'premium' && !user) {\n        // Store order info in localStorage and redirect to register\n        localStorage.setItem('pendingPremiumOrder', JSON.stringify({\n          orderId: paymentData.order.id,\n          planTitle: plan.title,\n          packageType: selectedPackage\n        }));\n        navigate('/auth/register');\n      } else {\n        navigate(`/download/${paymentData.order.id}`);\n      }\n    } else {\n      console.error('Order ID not found in payment data');\n      setError('Payment completed but order information is missing. Please contact support.');\n    }\n  };\n\n  const handlePaymentError = (error: string) => {\n    setPaymentError(error);\n  };\n\n  if (loading || verifying) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">\n            {verifying ? 'Verifying payment...' : 'Loading checkout...'}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (paymentSuccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CheckCircle className=\"h-8 w-8 text-green-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold mb-4\">Payment Successful!</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            Thank you for your purchase. Your house plan will be available for download shortly.\n            A receipt has been sent to your email.\n          </p>\n          <div className=\"space-y-3\">\n            <Button asChild className=\"w-full\">\n              <Link to=\"/user/orders\">View My Orders</Link>\n            </Button>\n            <Button variant=\"outline\" asChild className=\"w-full\">\n              <Link to=\"/plans\">Browse More Plans</Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!checkoutData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">No Checkout Data</h1>\n          <p className=\"text-muted-foreground mb-6\">Please select a plan to checkout.</p>\n          <Button asChild>\n            <Link to=\"/plans\">Back to Plans</Link>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-construction-gray-light\">\n      {/* Header */}\n      <section className=\"py-16 bg-gradient-to-r from-primary/10 to-primary/5\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex items-center gap-4 mb-6\">\n              <Button variant=\"ghost\" size=\"sm\" asChild>\n                <Link to=\"/plans\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Plans\n                </Link>\n              </Button>\n              <Badge variant=\"secondary\">Checkout</Badge>\n            </div>\n\n            <div className=\"text-center\">\n              <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n                Complete Your Purchase\n              </h1>\n              <p className=\"text-lg text-muted-foreground\">\n                Secure payment for your house plan\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container px-4 py-12\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Order Summary */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Order Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"font-semibold\">{checkoutData.planTitle}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{checkoutData.packageName}</p>\n                      <p className=\"text-xs text-muted-foreground\">Designed by {checkoutData.architect}</p>\n                    </div>\n                    <Badge variant=\"secondary\">{checkoutData.package}</Badge>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium\">Package Type:</span>\n                      <Badge variant=\"secondary\" className=\"capitalize\">\n                        {selectedPackage}\n                      </Badge>\n                    </div>\n                    {selectedPackage === 'premium' && !user && (\n                      <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                        <p className=\"text-sm text-blue-800\">\n                          <strong>Premium Package:</strong> Account creation required for download access.\n                          You'll be prompted to create an account after payment.\n                        </p>\n                      </div>\n                    )}\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium\">Total Amount:</span>\n                      <span className=\"text-lg font-bold\">\n                        GH‚Çµ {packagePrices[selectedPackage].toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* What's Included */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>What's Included</CardTitle>\n                  <CardDescription>Your {checkoutData.packageName} includes:</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-primary\" />\n                      <span className=\"text-sm\">Professional architectural plans</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-primary\" />\n                      <span className=\"text-sm\">Instant download after payment</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-primary\" />\n                      <span className=\"text-sm\">Technical support</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-primary\" />\n                      <span className=\"text-sm\">30-day money-back guarantee</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Payment Section */}\n            <div className=\"space-y-6\">\n              {paymentError && (\n                <div className=\"p-4 bg-destructive/10 border border-destructive/20 rounded-lg\">\n                  <p className=\"text-destructive text-sm\">{paymentError}</p>\n                </div>\n              )}\n\n              <PaystackPayment\n                planId={checkoutData.planId}\n                planTitle={checkoutData.planTitle}\n                packageType={checkoutData.package}\n                amount={checkoutData.price}\n                onSuccess={handlePaymentSuccess}\n                onError={handlePaymentError}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Checkout;","size_bytes":10701},"client/src/pages/Contact.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  MapPin, \n  Phone, \n  Mail, \n  Clock, \n  MessageCircle, \n  Send,\n  CheckCircle \n} from 'lucide-react';\nimport { useState, useRef } from 'react';\n\nconst Contact = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    subject: '',\n    planType: '',\n    message: ''\n  });\n\n  const submitButtonRef = useRef<HTMLButtonElement>(null);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      // Show loading state\n      const submitButton = submitButtonRef.current;\n      if (submitButton) {\n        submitButton.disabled = true;\n        submitButton.innerHTML = '<div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>Sending...';\n      }\n      \n      // Prepare email data\n      const emailData = {\n        to: 'sakconstructiongh@gmail.com',\n        subject: formData.subject || 'Inquiry from SAK Constructions Website',\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone,\n        planType: formData.planType,\n        message: formData.message\n      };\n      \n      // Send email through backend API\n      const response = await fetch('/api/contact/send-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(emailData),\n      });\n      \n      if (response.ok) {\n        // Success - reset form and show success message\n        setFormData({\n          name: '',\n          email: '',\n          phone: '',\n          subject: '',\n          planType: '',\n          message: ''\n        });\n        \n        alert('Thank you! Your message has been sent successfully. We will get back to you within 24 hours.');\n      } else {\n        throw new Error('Failed to send email');\n      }\n      \n    } catch (error) {\n      console.error('Error sending email:', error);\n      alert('Sorry, there was an error sending your message. Please try again or contact us directly at sakconstructiongh@gmail.com');\n    } finally {\n      // Reset button state\n      const submitButton = submitButtonRef.current;\n      if (submitButton) {\n        submitButton.disabled = false;\n        submitButton.innerHTML = '<Send className=\"h-5 w-5 mr-2\" />Send Message';\n      }\n    }\n  };\n\n  const contactInfo = [\n    {\n      icon: Phone,\n      title: 'Phone',\n      details: ['0246798967', '0233798967'],\n      description: 'Mon-Fri 8AM-6PM GMT'\n    },\n    {\n      icon: Mail,\n      title: 'Email',\n      details: ['sakconstructiongh@gmail.com'],\n      description: 'We reply within 24 hours'\n    },\n    {\n      icon: MapPin,\n      title: 'Address',\n      details: ['Tema com 25, Greater Accra', 'around Devtraco Estates'],\n      description: 'Ghana'\n    },\n    {\n      icon: Clock,\n      title: 'Business Hours',\n      details: ['Monday - Friday: 8AM - 6PM', 'Saturday: 9AM - 4PM'],\n      description: 'Sunday: Closed'\n    }\n  ];\n\n  const faqs = [\n    {\n      question: 'How quickly will I receive my plans after purchase?',\n      answer: 'All plans are delivered instantly via email after successful payment. You will receive download links for all included files.'\n    },\n    {\n      question: 'Can I modify the plans to suit my needs?',\n      answer: 'Yes! Our Standard and Premium packages include modification rights. We also offer custom modification services for an additional fee.'\n    },\n    {\n      question: 'Do your plans comply with local building codes?',\n      answer: 'All our plans are designed by licensed architects and comply with Ghana Building Code. However, we recommend consulting with local authorities for specific requirements.'\n    },\n    {\n      question: 'What file formats do you provide?',\n      answer: 'We provide plans in PDF format for all packages. Standard and Premium packages also include AutoCAD (DWG) files for professional use.'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-r from-primary/10 to-primary/5\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-3xl mx-auto text-center space-y-6\">\n            <Badge variant=\"secondary\" className=\"mb-4\">\n              Contact Us\n            </Badge>\n            <h1 className=\"text-3xl md:text-5xl font-bold text-foreground\">\n              Let's Build Something\n                              <span className=\"bg-gradient-to-r from-primary to-primary bg-clip-text text-transparent\"> Amazing Together</span>\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Have questions about our plans? Need custom designs? Our team of experts is \n              here to help you create your dream home.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container px-4 py-16\">\n        <div className=\"grid lg:grid-cols-3 gap-12\">\n          {/* Contact Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"border-0 bg-gradient-card shadow-card\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl\">Send us a Message</CardTitle>\n                <CardDescription>\n                  Fill out the form below and click \"Send Message\" to send your inquiry directly to our team. Your message will be sent automatically to sakconstructiongh@gmail.com.\n                </CardDescription>\n              </CardHeader>\n              \n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Full Name *</Label>\n                      <Input\n                        id=\"name\"\n                        value={formData.name}\n                        onChange={(e) => setFormData({...formData, name: e.target.value})}\n                        placeholder=\"Enter your full name\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email Address *</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={(e) => setFormData({...formData, email: e.target.value})}\n                        placeholder=\"Enter your email\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"phone\">Phone Number</Label>\n                      <Input\n                        id=\"phone\"\n                        value={formData.phone}\n                        onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                        placeholder=\"0246798967\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"planType\">Plan Type of Interest</Label>\n                      <Select value={formData.planType} onValueChange={(value) => setFormData({...formData, planType: value})}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select plan type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"villa\">Villa</SelectItem>\n                          <SelectItem value=\"bungalow\">Bungalow</SelectItem>\n                          <SelectItem value=\"townhouse\">Townhouse</SelectItem>\n                          <SelectItem value=\"custom\">Custom Design</SelectItem>\n                          <SelectItem value=\"consultation\">Consultation</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"subject\">Subject *</Label>\n                    <Input\n                      id=\"subject\"\n                      value={formData.subject}\n                      onChange={(e) => setFormData({...formData, subject: e.target.value})}\n                      placeholder=\"What's this message about?\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"message\">Message *</Label>\n                    <Textarea\n                      id=\"message\"\n                      value={formData.message}\n                      onChange={(e) => setFormData({...formData, message: e.target.value})}\n                      placeholder=\"Tell us about your project, requirements, or any questions you have...\"\n                      className=\"min-h-32\"\n                      required\n                    />\n                  </div>\n\n                  <Button type=\"submit\" variant=\"cta\" size=\"lg\" className=\"w-full\" ref={submitButtonRef}>\n                    <Send className=\"h-5 w-5 mr-2\" />\n                    Send Message\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* FAQ Section */}\n            <Card className=\"mt-8 border-0 bg-gradient-card\">\n              <CardHeader>\n                <CardTitle className=\"text-xl\">Frequently Asked Questions</CardTitle>\n                <CardDescription>\n                  Quick answers to common questions\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {faqs.map((faq, index) => (\n                  <div key={index} className=\"space-y-3\">\n                    <h4 className=\"font-semibold text-foreground\">{faq.question}</h4>\n                    <p className=\"text-muted-foreground text-sm leading-relaxed\">{faq.answer}</p>\n                    {index < faqs.length - 1 && <div className=\"border-b border-border/50\" />}\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"space-y-6\">\n            {/* Contact Cards */}\n            <div className=\"space-y-4\">\n              {contactInfo.map((info, index) => (\n                <Card key={index} className=\"border-0 bg-gradient-card hover:shadow-construction transition-all duration-300\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start gap-4\">\n                      <div className=\"w-12 h-12 bg-construction-orange-light rounded-xl flex items-center justify-center flex-shrink-0\">\n                        <info.icon className=\"h-6 w-6 text-primary\" />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <h3 className=\"font-semibold text-foreground\">{info.title}</h3>\n                        {info.details.map((detail, idx) => (\n                          <p key={idx} className=\"text-sm text-muted-foreground\">{detail}</p>\n                        ))}\n                        <p className=\"text-xs text-muted-foreground\">{info.description}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Quick Response Promise */}\n            <Card className=\"border-primary/20 bg-gradient-to-br from-primary/5 to-primary/10\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <MessageCircle className=\"h-8 w-8 text-primary-foreground\" />\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Quick Response Guarantee</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  We respond to all inquiries within 24 hours during business days. \n                  Urgent matters are handled within 4 hours.\n                </p>\n                <div className=\"flex items-center justify-center gap-2 text-sm text-primary\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <span>Professional Support</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Office Hours */}\n            <Card className=\"border-0 bg-gradient-card\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Visit Our Office</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-foreground\">SAK Constructions GH</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Tema com 25, Greater Accra<br />\n                    around Devtraco Estates<br />\n                    Ghana\n                  </p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-foreground\">Office Hours:</p>\n                  <div className=\"text-sm text-muted-foreground space-y-1\">\n                    <p>Monday - Friday: 8:00 AM - 6:00 PM</p>\n                    <p>Saturday: 9:00 AM - 4:00 PM</p>\n                    <p>Sunday: Closed</p>\n                  </div>\n                </div>\n\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                  <MapPin className=\"h-4 w-4 mr-2\" />\n                  Get Directions\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Map Section */}\n      <section className=\"py-16 bg-construction-gray-light\">\n        <div className=\"container px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">Find Us</h2>\n            <p className=\"text-muted-foreground\">\n              Visit our office in the heart of Accra for personalized consultation\n            </p>\n          </div>\n          \n          {/* Placeholder for map */}\n          <Card className=\"border-0 bg-gradient-card h-96\">\n            <CardContent className=\"p-6 h-full flex items-center justify-center\">\n              <div className=\"text-center space-y-4\">\n                <MapPin className=\"h-16 w-16 text-primary mx-auto\" />\n                <div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Interactive Map</h3>\n                  <p className=\"text-muted-foreground\">\n                    Tema com 25, Greater Accra, around Devtraco Estates\n                  </p>\n                  <Button variant=\"outline\" className=\"mt-4\">\n                    Open in Google Maps\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Contact;","size_bytes":15671},"client/src/pages/Cookies.tsx":{"content":"import { \n  Cookie, \n  Settings, \n  Shield, \n  Eye, \n  Database, \n  Globe,\n  CheckCircle,\n  AlertTriangle,\n  ArrowRight,\n  Mail,\n  Phone,\n  Building2,\n  Info\n} from 'lucide-react';\nimport Header from '@/components/Header';\n\n\nconst Cookies = () => {\n  const cookieTypes = [\n    {\n      category: \"Essential Cookies\",\n      description: \"These cookies are necessary for the website to function properly. They enable basic functions like page navigation and access to secure areas of the website.\",\n      examples: [\"Authentication cookies\", \"Session management\", \"Security features\"],\n      duration: \"Session or up to 1 year\",\n      canDisable: false\n    },\n    {\n      category: \"Analytics Cookies\",\n      description: \"These cookies help us understand how visitors interact with our website by collecting and reporting information anonymously.\",\n      examples: [\"Page views\", \"User behavior\", \"Traffic sources\"],\n      duration: \"Up to 2 years\",\n      canDisable: true\n    },\n    {\n      category: \"Preference Cookies\",\n      description: \"These cookies allow the website to remember choices you make and provide enhanced, more personal features.\",\n      examples: [\"Language preferences\", \"Theme settings\", \"Customized content\"],\n      duration: \"Up to 1 year\",\n      canDisable: true\n    },\n    {\n      category: \"Marketing Cookies\",\n      description: \"These cookies are used to track visitors across websites to display relevant and engaging advertisements.\",\n      examples: [\"Ad targeting\", \"Social media integration\", \"Campaign tracking\"],\n      duration: \"Up to 2 years\",\n      canDisable: true\n    }\n  ];\n\n  const thirdPartyServices = [\n    {\n      name: \"Google Analytics\",\n      purpose: \"Website analytics and performance monitoring\",\n      cookies: [\"_ga\", \"_gid\", \"_gat\"],\n      privacyPolicy: \"https://policies.google.com/privacy\"\n    },\n    {\n      name: \"Paystack\",\n      purpose: \"Payment processing and security\",\n      cookies: [\"paystack_session\", \"paystack_token\"],\n      privacyPolicy: \"https://paystack.com/privacy\"\n    },\n    {\n      name: \"Cloudflare\",\n      purpose: \"Content delivery and security\",\n      cookies: [\"__cfduid\", \"cf_clearance\"],\n      privacyPolicy: \"https://www.cloudflare.com/privacy/\"\n    }\n  ];\n\n  const contactInfo = {\n          email: \"sakconstructiongh@gmail.com\",\n            phone: \"0246798967\",\n          address: \"Tema com 25, Greater Accra, around Devtraco Estates\"\n  };\n\n  return (\n    <>\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 bg-gradient-to-br from-background via-background to-accent/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground\">\n              Cookie\n              <span className=\"block gradient-text\"> Policy</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Learn how we use cookies and similar technologies to enhance your browsing experience and improve our services.\n            </p>\n            <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground\">\n              <Cookie className=\"w-4 h-4\" />\n              <span>Last updated: {new Date().toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto space-y-12\">\n            \n            {/* Introduction */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">What Are Cookies?</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Cookies are small text files that are placed on your device when you visit our website. They help us \n                provide you with a better experience by remembering your preferences, analyzing how you use our site, \n                and personalizing content. Cookies cannot access, read, or modify any other data on your device.\n              </p>\n            </div>\n\n            {/* Cookie Types */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold text-foreground text-center mb-8\">Types of Cookies We Use</h2>\n              {cookieTypes.map((cookieType, index) => (\n                <div key={index} className=\"admin-card\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-xl flex items-center justify-center flex-shrink-0\">\n                      <Cookie className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <h3 className=\"text-xl font-semibold text-foreground\">{cookieType.category}</h3>\n                        {!cookieType.canDisable && (\n                          <span className=\"px-2 py-1 bg-warning/20 text-warning text-xs rounded-full\">\n                            Required\n                          </span>\n                        )}\n                      </div>\n                      <p className=\"text-muted-foreground mb-4 leading-relaxed\">{cookieType.description}</p>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground mb-1\">Examples:</p>\n                          <ul className=\"space-y-1\">\n                            {cookieType.examples.map((example, exampleIndex) => (\n                              <li key={exampleIndex} className=\"flex items-center gap-2\">\n                                <CheckCircle className=\"w-3 h-3 text-success\" />\n                                {example}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground mb-1\">Duration:</p>\n                          <p className=\"text-foreground\">{cookieType.duration}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground mb-1\">Can Disable:</p>\n                          <p className=\"text-foreground\">{cookieType.canDisable ? 'Yes' : 'No'}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Third-Party Cookies */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-6\">Third-Party Cookies</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Some cookies on our website are set by third-party services that help us provide better functionality \n                and analyze our website performance. These services have their own privacy policies.\n              </p>\n              <div className=\"space-y-4\">\n                {thirdPartyServices.map((service, index) => (\n                  <div key={index} className=\"border border-border/30 rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h3 className=\"font-semibold text-foreground mb-2\">{service.name}</h3>\n                        <p className=\"text-muted-foreground text-sm mb-2\">{service.purpose}</p>\n                        <p className=\"text-muted-foreground text-xs\">\n                          <span className=\"font-medium\">Cookies:</span> {service.cookies.join(', ')}\n                        </p>\n                      </div>\n                      <a\n                        href={service.privacyPolicy}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-primary hover:text-primary/80 text-sm font-medium\"\n                      >\n                        Privacy Policy ‚Üí\n                      </a>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Cookie Management */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-6\">Managing Your Cookie Preferences</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center gap-2\">\n                    <Settings className=\"w-5 h-5 text-primary\" />\n                    Browser Settings\n                  </h3>\n                  <p className=\"text-muted-foreground text-sm mb-3\">\n                    You can control cookies through your browser settings. Most browsers allow you to:\n                  </p>\n                  <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                    <li>‚Ä¢ View and delete existing cookies</li>\n                    <li>‚Ä¢ Block cookies from specific websites</li>\n                    <li>‚Ä¢ Block all third-party cookies</li>\n                    <li>‚Ä¢ Clear cookies when you close your browser</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5 text-primary\" />\n                    Our Cookie Banner\n                  </h3>\n                  <p className=\"text-muted-foreground text-sm mb-3\">\n                    When you first visit our website, you'll see a cookie banner that allows you to:\n                  </p>\n                  <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                    <li>‚Ä¢ Accept all cookies</li>\n                    <li>‚Ä¢ Accept only essential cookies</li>\n                    <li>‚Ä¢ Customize your preferences</li>\n                    <li>‚Ä¢ Learn more about our cookie policy</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            {/* Impact of Disabling Cookies */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Impact of Disabling Cookies</h2>\n              <div className=\"bg-muted/30 rounded-lg p-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h3 className=\"font-semibold text-foreground mb-2 flex items-center gap-2\">\n                      <AlertTriangle className=\"w-4 h-4 text-warning\" />\n                      What Happens If You Disable Cookies\n                    </h3>\n                    <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                      <li>‚Ä¢ Some website features may not work properly</li>\n                      <li>‚Ä¢ You may need to re-enter information</li>\n                      <li>‚Ä¢ Personalized content may not be available</li>\n                      <li>‚Ä¢ Website performance may be affected</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"font-semibold text-foreground mb-2 flex items-center gap-2\">\n                      <Info className=\"w-4 h-4 text-primary\" />\n                      Essential vs. Optional\n                    </h3>\n                    <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                      <li>‚Ä¢ Essential cookies cannot be disabled</li>\n                      <li>‚Ä¢ Analytics cookies are optional</li>\n                      <li>‚Ä¢ Marketing cookies require consent</li>\n                      <li>‚Ä¢ Preference cookies enhance experience</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Updates and Changes */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Updates to This Policy</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We may update this Cookie Policy from time to time to reflect changes in our practices or for other \n                operational, legal, or regulatory reasons. We will notify you of any material changes by posting the \n                updated policy on our website and updating the \"Last updated\" date.\n              </p>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-6\">Questions About Cookies?</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                If you have any questions about our use of cookies or this Cookie Policy, please contact us:\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <Mail className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"font-medium text-foreground\">Email</p>\n                  <a href={`mailto:${contactInfo.email}`} className=\"text-primary hover:text-primary/80 text-sm\">\n                    {contactInfo.email}\n                  </a>\n                </div>\n                <div className=\"text-center\">\n                  <Phone className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"font-medium text-foreground\">Phone</p>\n                  <a href={`tel:${contactInfo.phone}`} className=\"text-primary hover:text-primary/80 text-sm\">\n                    {contactInfo.phone}\n                  </a>\n                </div>\n                <div className=\"text-center\">\n                  <Building2 className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"font-medium text-foreground\">Address</p>\n                  <p className=\"text-muted-foreground text-sm\">{contactInfo.address}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-secondary/5\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-8\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground\">\n              Control Your Cookie Preferences\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              We believe in transparency and giving you control over your data. Use our cookie banner to customize \n              your experience or contact us with any questions.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <a\n                href=\"/contact\"\n                className=\"btn-primary text-lg px-8 py-4 inline-flex items-center gap-2\"\n              >\n                Contact Us\n                <ArrowRight className=\"w-5 h-5\" />\n              </a>\n              <a\n                href=\"/privacy\"\n                className=\"btn-outline-modern text-lg px-8 py-4\"\n              >\n                Privacy Policy\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n    </>\n  );\n};\n\nexport default Cookies;\n","size_bytes":15615},"client/src/pages/DemoPayment.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle, Download, ArrowLeft } from 'lucide-react';\n\nexport default function DemoPayment() {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const [paymentStatus, setPaymentStatus] = useState<'processing' | 'success' | 'failed'>('processing');\n  \n  const reference = searchParams.get('reference');\n  const amount = searchParams.get('amount');\n  const email = searchParams.get('email');\n\n  useEffect(() => {\n    // Simulate payment processing\n    const timer = setTimeout(() => {\n      setPaymentStatus('success');\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleDownload = () => {\n    // In a real app, this would trigger the actual download\n    alert('Demo mode: Download would start here');\n  };\n\n  const handleBackToPlans = () => {\n    navigate('/plans');\n  };\n\n  if (paymentStatus === 'processing') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n              <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n            </div>\n            <CardTitle>Processing Payment...</CardTitle>\n            <CardDescription>Please wait while we process your demo payment</CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <div className=\"space-y-2 text-sm text-gray-600\">\n              <p>Reference: {reference}</p>\n              <p>Amount: GH‚Çµ{(Number(amount) / 100).toFixed(2)}</p>\n              <p>Email: {email}</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <CardTitle className=\"text-green-600\">Payment Successful!</CardTitle>\n          <CardDescription>Your demo payment has been processed successfully</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2 text-sm text-gray-600\">\n            <p>Reference: {reference}</p>\n            <p>Amount: GH‚Çµ{(Number(amount) / 100).toFixed(2)}</p>\n            <p>Email: {email}</p>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <Button \n              onClick={handleDownload} \n              className=\"w-full bg-green-600 hover:bg-green-700\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download Plans\n            </Button>\n            \n            <Button \n              onClick={handleBackToPlans} \n              variant=\"outline\" \n              className=\"w-full\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Plans\n            </Button>\n          </div>\n          \n          <div className=\"text-xs text-gray-500 text-center p-3 bg-gray-50 rounded-lg\">\n            <p>üí° This is a demo payment. In production, you would be redirected to Paystack for real payment processing.</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3870},"client/src/pages/DownloadPage.tsx":{"content":"\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, Download, Shield, Clock, CheckCircle } from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { Link, useParams, useNavigate } from 'react-router-dom';\nimport { DownloadManager } from '@/components/DownloadManager';\nimport { useAuth } from '@/hooks/useAuth';\n\nconst DownloadPage = () => {\n  const { user } = useAuth();\n  const { orderId } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Check for pending premium order that requires account creation\n    const pendingOrder = localStorage.getItem('pendingPremiumOrder');\n    if (pendingOrder && !user) {\n      const orderInfo = JSON.parse(pendingOrder);\n      if (orderInfo.orderId === orderId) {\n        navigate('/auth/register');\n        return;\n      }\n    }\n    \n    // For premium downloads, require user account\n    if (!user && orderId) {\n      // Check if this is a premium order by making a quick API call\n      const checkOrderType = async () => {\n        try {\n          const response = await fetch(`/api/downloads/${orderId}`);\n          const data = await response.json();\n          // Redirect to home page where user can access AuthModal\n          navigate('/');\n        } catch {\n          // Redirect to home page where user can access AuthModal\n          navigate('/');\n        }\n      };\n      checkOrderType();\n    }\n  }, [user, navigate, orderId]);\n\n  if (!orderId) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Invalid Download Link</h1>\n          <p className=\"text-muted-foreground mb-6\">The download link is invalid or missing.</p>\n          <Button asChild>\n            <Link to=\"/user/orders\">Back to Orders</Link>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-construction-gray-light\">\n      {/* Header */}\n      <section className=\"py-16 bg-gradient-to-r from-primary/10 to-primary/5\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex items-center gap-4 mb-6\">\n              <Button variant=\"ghost\" size=\"sm\" asChild>\n                <Link to=\"/user/orders\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Orders\n                </Link>\n              </Button>\n              <Badge variant=\"secondary\">Download Center</Badge>\n            </div>\n            \n            <div className=\"text-center\">\n              <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n                Download Your Plans\n              </h1>\n              <p className=\"text-lg text-muted-foreground\">\n                Access your purchased architectural plans and documents\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container px-4 py-12\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Download Manager */}\n            <div className=\"lg:col-span-2\">\n              <DownloadManager orderId={orderId} />\n            </div>\n\n            {/* Download Information */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Shield className=\"h-5 w-5\" />\n                    Download Security\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    <span>Secure download links</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    <span>Verified payment required</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Clock className=\"h-4 w-4 text-amber-600\" />\n                    <span>7-day download window</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Need Help?</CardTitle>\n                  <CardDescription>\n                    Having trouble with your download?\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    If you're experiencing issues downloading your files, please contact our support team.\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\" asChild className=\"w-full\">\n                    <Link to=\"/contact\">Contact Support</Link>\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DownloadPage;\n","size_bytes":5378},"client/src/pages/FAQ.tsx":{"content":"import { \n  HelpCircle, \n  ChevronDown, \n  Search, \n  FileText, \n  CreditCard, \n  Download, \n  Building2,\n  Shield,\n  Users,\n  Phone,\n  Mail,\n  MessageCircle\n} from 'lucide-react';\nimport { useState } from 'react';\nimport Header from '@/components/Header';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\ninterface FAQItem {\n  question: string;\n  answer: string;\n  category: string;\n}\n\nconst FAQ = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [activeCategory, setActiveCategory] = useState('all');\n  const [expandedItems, setExpandedItems] = useState<Set<number>>(new Set());\n\n  const faqData: FAQItem[] = [\n    // General Questions\n    {\n      question: \"What is SAK Constructions?\",\n      answer: \"SAK Constructions is a leading platform that provides professional architectural house plans. We offer a wide range of designs including villas, bungalows, and townhouses, all created by certified architects and engineers.\",\n      category: \"general\"\n    },\n    {\n      question: \"How do I get started with your platform?\",\n      answer: \"Getting started is easy! Simply browse our collection of house plans, choose your preferred design, select a package (Basic, Standard, or Premium), and complete your purchase. You'll get instant access to download your chosen plans.\",\n      category: \"general\"\n    },\n    {\n      question: \"Are your plans suitable for construction?\",\n      answer: \"Yes! All our plans are construction-ready and include detailed architectural drawings, structural specifications, and material lists. They meet local building codes and standards.\",\n      category: \"general\"\n    },\n\n    // Plans & Design\n    {\n      question: \"What types of house plans do you offer?\",\n      answer: \"We offer a comprehensive range of house plans including modern villas, traditional bungalows, contemporary townhouses, and custom architectural designs. Each plan comes with multiple package options.\",\n      category: \"plans\"\n    },\n    {\n      question: \"Can I customize the plans I purchase?\",\n      answer: \"Yes, our Premium package includes customization options. You can work with our team to modify layouts, adjust room sizes, or make other design changes to suit your specific needs.\",\n      category: \"plans\"\n    },\n    {\n      question: \"Do you provide 3D renderings?\",\n      answer: \"Yes, our Standard and Premium packages include 3D renderings that give you a realistic view of how your house will look when completed.\",\n      category: \"plans\"\n    },\n\n    // Pricing & Packages\n    {\n      question: \"What's the difference between Basic, Standard, and Premium packages?\",\n      answer: \"Basic: Core architectural drawings. Standard: Includes 3D renderings and additional details. Premium: Full customization, detailed specifications, and ongoing support from our team.\",\n      category: \"pricing\"\n    },\n    {\n      question: \"Are there any hidden fees?\",\n      answer: \"No hidden fees! The price you see is the price you pay. All packages include the complete set of plans and specifications as described.\",\n      category: \"pricing\"\n    },\n    {\n      question: \"Do you offer bulk discounts?\",\n      answer: \"Yes, we offer special pricing for contractors and developers purchasing multiple plans. Contact our sales team for custom quotes.\",\n      category: \"pricing\"\n    },\n\n    // Technical Support\n    {\n      question: \"What file formats do you provide?\",\n      answer: \"We provide plans in PDF format for easy viewing and printing. Premium packages also include CAD files for architects and contractors who need to make modifications.\",\n      category: \"technical\"\n    },\n    {\n      question: \"How long do I have access to my purchased plans?\",\n      answer: \"You have lifetime access to your purchased plans. You can download them anytime from your account dashboard.\",\n      category: \"technical\"\n    },\n    {\n      question: \"What if I have technical issues downloading my plans?\",\n      answer: \"Our support team is available 24/7 to help with any technical issues. Contact us via email, phone, or live chat for immediate assistance.\",\n      category: \"technical\"\n    },\n\n    // Payment & Security\n    {\n      question: \"What payment methods do you accept?\",\n      answer: \"We accept all major credit cards, debit cards, and mobile money payments through our secure payment gateway. All transactions are encrypted and secure.\",\n      category: \"payment\"\n    },\n    {\n      question: \"Is my payment information secure?\",\n      answer: \"Absolutely! We use industry-standard SSL encryption and secure payment processing. We never store your payment information on our servers.\",\n      category: \"payment\"\n    },\n    {\n      question: \"Do you offer refunds?\",\n      answer: \"We offer a 30-day money-back guarantee. If you're not satisfied with your purchase, contact us within 30 days for a full refund.\",\n      category: \"payment\"\n    },\n\n    // Construction Support\n    {\n      question: \"Do you provide construction support?\",\n      answer: \"Yes, our Premium package includes construction support. Our team of experts can answer questions and provide guidance throughout your building process.\",\n      category: \"construction\"\n    },\n    {\n      question: \"Can you recommend contractors in my area?\",\n      answer: \"We maintain a network of trusted contractors and can provide recommendations based on your location and project requirements.\",\n      category: \"construction\"\n    },\n    {\n      question: \"What if I need modifications during construction?\",\n      answer: \"Our team can help with modifications and adjustments during construction. Premium package customers get priority support for these services.\",\n      category: \"construction\"\n    }\n  ];\n\n  const categories = [\n    { id: 'all', label: 'All Questions', icon: HelpCircle },\n    { id: 'general', label: 'General', icon: Building2 },\n    { id: 'plans', label: 'Plans & Design', icon: FileText },\n    { id: 'pricing', label: 'Pricing & Packages', icon: CreditCard },\n    { id: 'technical', label: 'Technical Support', icon: Download },\n    { id: 'payment', label: 'Payment & Security', icon: Shield },\n    { id: 'construction', label: 'Construction Support', icon: Users }\n  ];\n\n  const filteredFAQs = faqData.filter(faq => {\n    const matchesSearch = faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         faq.answer.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = activeCategory === 'all' || faq.category === activeCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const toggleExpanded = (index: number) => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(index)) {\n      newExpanded.delete(index);\n    } else {\n      newExpanded.add(index);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  return (\n    <>\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 bg-gradient-to-br from-background via-background to-accent/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground\">\n              Frequently Asked\n              <span className=\"block gradient-text\"> Questions</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Find answers to common questions about our house plans, pricing, and services. Can't find what you're looking for? Contact our support team.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Search and Filter Section */}\n      <section className=\"py-12 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto space-y-8\">\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search for questions or keywords...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-12 pr-4 py-4 text-lg border-2 border-border/50 focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300\"\n              />\n            </div>\n\n            {/* Category Filter */}\n            <div className=\"flex flex-wrap gap-3 justify-center\">\n              {categories.map((category) => {\n                const Icon = category.icon;\n                return (\n                  <Button\n                    key={category.id}\n                    variant={activeCategory === category.id ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setActiveCategory(category.id)}\n                    className=\"flex items-center gap-2 px-4 py-2 rounded-xl transition-all duration-300\"\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {category.label}\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-20 bg-gradient-to-br from-muted/30 to-muted/10\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            {filteredFAQs.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <HelpCircle className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">No questions found</h3>\n                <p className=\"text-muted-foreground\">Try adjusting your search terms or category filter.</p>\n              </div>\n            ) : (\n              filteredFAQs.map((faq, index) => (\n                <div key={index} className=\"admin-card\">\n                  <button\n                    onClick={() => toggleExpanded(index)}\n                    className=\"w-full flex items-center justify-between text-left p-6 hover:bg-muted/50 transition-colors duration-300 rounded-xl\"\n                  >\n                    <h3 className=\"text-lg font-semibold text-foreground pr-4\">\n                      {faq.question}\n                    </h3>\n                    <ChevronDown \n                      className={`w-5 h-5 text-muted-foreground transition-transform duration-300 ${\n                        expandedItems.has(index) ? 'rotate-180' : ''\n                      }`} \n                    />\n                  </button>\n                  \n                  {expandedItems.has(index) && (\n                    <div className=\"px-6 pb-6\">\n                      <div className=\"border-t border-border/30 pt-4\">\n                        <p className=\"text-muted-foreground leading-relaxed\">\n                          {faq.answer}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Still Have Questions Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-8\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground\">\n              Still Have Questions?\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Our support team is here to help! Get in touch with us through any of these channels.\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"metric-card text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <Phone className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">Call Us</h3>\n                <p className=\"text-muted-foreground mb-4\">Speak directly with our experts</p>\n                <a href=\"tel:0246798967\" className=\"text-primary hover:text-primary/80 font-medium\">\n                  0246798967\n                </a>\n              </div>\n\n              <div className=\"metric-card text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <Mail className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">Email Us</h3>\n                <p className=\"text-muted-foreground mb-4\">Get detailed responses via email</p>\n                <a href=\"mailto:sakconstructiongh@gmail.com\" className=\"text-primary hover:text-primary/80 font-medium\">\n                  sakconstructiongh@gmail.com\n                </a>\n              </div>\n\n              <div className=\"metric-card text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <MessageCircle className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">Live Chat</h3>\n                <p className=\"text-muted-foreground mb-4\">Chat with us in real-time</p>\n                <Button className=\"btn-primary\">\n                  Start Chat\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n    </>\n  );\n};\n\nexport default FAQ;\n","size_bytes":13833},"client/src/pages/HowItWorks.tsx":{"content":"import { \n  Search, \n  CreditCard, \n  Download, \n  Building2, \n  CheckCircle, \n  ArrowRight,\n  FileText,\n  Users,\n  Shield,\n  Award,\n  Star,\n  Heart\n} from 'lucide-react';\nimport Header from '@/components/Header';\n\n\nconst HowItWorks = () => {\n  const steps = [\n    {\n      icon: Search,\n      title: \"Browse & Choose\",\n      description: \"Explore our extensive collection of professional house plans. Filter by style, size, budget, and more.\",\n      features: [\"50+ House Plans\", \"Multiple Styles\", \"Detailed Descriptions\", \"3D Renderings\"]\n    },\n    {\n      icon: CreditCard,\n      title: \"Purchase & Pay\",\n      description: \"Select your preferred package and complete secure payment through our trusted payment gateway.\",\n      features: [\"Secure Payments\", \"Multiple Packages\", \"Instant Access\", \"24/7 Support\"]\n    },\n    {\n      icon: Download,\n      title: \"Download & Build\",\n      description: \"Get immediate access to your chosen plans. Download high-quality PDFs and start building your dream home.\",\n      features: [\"Instant Download\", \"High-Quality Files\", \"Construction Ready\", \"Lifetime Access\"]\n    }\n  ];\n\n  const benefits = [\n    {\n      icon: Building2,\n      title: \"Professional Quality\",\n      description: \"All plans are designed by certified architects and engineers\"\n    },\n    {\n      icon: Shield,\n      title: \"Secure & Reliable\",\n      description: \"Your data and payments are protected with industry-standard security\"\n    },\n    {\n      icon: Award,\n      title: \"Cost Effective\",\n      description: \"Save thousands on architectural fees while getting professional designs\"\n    },\n    {\n      icon: Users,\n      title: \"Expert Support\",\n      description: \"Get help from our team of construction professionals\"\n    }\n  ];\n\n  const testimonials = [\n    {\n      name: \"Kwame Asante\",\n      role: \"Property Developer\",\n      content: \"SAK Constructions provided excellent house plans that saved us time and money. Highly recommended!\",\n      rating: 5\n    },\n    {\n      name: \"Ama Osei\",\n      role: \"Homeowner\",\n      content: \"The villa plan I purchased was perfect for my family. The quality exceeded my expectations.\",\n      rating: 5\n    },\n    {\n      name: \"Kofi Mensah\",\n      role: \"Contractor\",\n      content: \"Professional plans that make construction smooth and efficient. Great platform for contractors.\",\n      rating: 5\n    }\n  ];\n\n  return (\n    <>\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 bg-gradient-to-br from-background via-background to-accent/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground\">\n              How It\n              <span className=\"block gradient-text\"> Works</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Get your dream home plans in just three simple steps. Our platform makes it easy to find, purchase, and download professional architectural designs.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Process Steps */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n                Simple 3-Step Process\n              </h2>\n              <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n                From browsing to building, we've streamlined the entire process for you\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12\">\n              {steps.map((step, index) => {\n                const Icon = step.icon;\n                return (\n                  <div key={index} className=\"relative\">\n                    {/* Step Number */}\n                    <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center text-white font-bold text-xl shadow-lg\">\n                      {index + 1}\n                    </div>\n\n                    {/* Step Card */}\n                    <div className=\"admin-card pt-12 text-center\">\n                      <div className=\"w-16 h-16 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                        <Icon className=\"w-8 h-8 text-primary\" />\n                      </div>\n                      \n                      <h3 className=\"text-2xl font-bold text-foreground mb-4\">{step.title}</h3>\n                      <p className=\"text-muted-foreground mb-6 leading-relaxed\">{step.description}</p>\n                      \n                      <ul className=\"space-y-2 text-left\">\n                        {step.features.map((feature, featureIndex) => (\n                          <li key={featureIndex} className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <CheckCircle className=\"w-4 h-4 text-success\" />\n                            {feature}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    {/* Connector Arrow */}\n                    {index < steps.length - 1 && (\n                      <div className=\"hidden md:block absolute top-1/2 -right-6 transform -translate-y-1/2\">\n                        <ArrowRight className=\"w-8 h-8 text-primary\" />\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 bg-gradient-to-br from-muted/30 to-muted/10\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n                Why Choose SAK Constructions?\n              </h2>\n              <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n                We provide the best value and quality in architectural plans\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {benefits.map((benefit, index) => {\n                const Icon = benefit.icon;\n                return (\n                  <div key={index} className=\"metric-card text-center group\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-gradient-to-br group-hover:from-primary/20 group-hover:to-secondary/20 transition-all duration-300\">\n                      <Icon className=\"w-8 h-8 text-primary\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-foreground mb-3\">{benefit.title}</h3>\n                    <p className=\"text-muted-foreground text-sm leading-relaxed\">{benefit.description}</p>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n                What Our Customers Say\n              </h2>\n              <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n                Join thousands of satisfied customers who have built their dream homes with our plans\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {testimonials.map((testimonial, index) => (\n                <div key={index} className=\"admin-card\">\n                  <div className=\"flex items-center mb-4\">\n                    {[...Array(testimonial.rating)].map((_, i) => (\n                      <Star key={i} className=\"w-5 h-5 text-warning fill-current\" />\n                    ))}\n                  </div>\n                  <p className=\"text-muted-foreground mb-6 leading-relaxed\">\"{testimonial.content}\"</p>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-full flex items-center justify-center\">\n                      <Users className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-foreground\">{testimonial.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-secondary/5\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-8\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground\">\n              Ready to Start Building?\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Browse our collection of professional house plans and find the perfect design for your dream home.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <a\n                href=\"/plans\"\n                className=\"btn-primary text-lg px-8 py-4 inline-flex items-center gap-2\"\n              >\n                Browse Plans\n                <ArrowRight className=\"w-5 h-5\" />\n              </a>\n              <a\n                href=\"/contact\"\n                className=\"btn-outline-modern text-lg px-8 py-4\"\n              >\n                Get in Touch\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n    </>\n  );\n};\n\nexport default HowItWorks;\n","size_bytes":10383},"client/src/pages/Index.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { \n  Search, \n  Star, \n  Download, \n  Users, \n  Building2, \n  Award,\n  ArrowRight,\n  CheckCircle,\n  Heart,\n  Mail,\n  Phone,\n  MapPin,\n  Clock,\n  Shield,\n  Zap,\n  Bed,\n  Bath,\n  Square\n} from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '@/lib/api';\nimport Hero from '@/components/Hero';\nimport PlanCategories from '@/components/PlanCategories';\nimport Features from '@/components/Features';\n\nconst Index = () => {\n  const navigate = useNavigate();\n  const [featuredPlans, setFeaturedPlans] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [email, setEmail] = useState('');\n\n  useEffect(() => {\n    fetchFeaturedPlans();\n  }, []);\n\n  const fetchFeaturedPlans = async () => {\n    try {\n      const data = await api.getPlans({ status: 'active', featured: true });\n      setFeaturedPlans(data?.slice(0, 6) || []);\n    } catch (error) {\n      console.error('Error fetching featured plans:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleNewsletterSignup = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Handle newsletter signup\n    console.log('Newsletter signup:', email);\n    setEmail('');\n  };\n\n  const stats = [\n    { icon: Building2, value: '500+', label: 'House Plans' },\n    { icon: Users, value: '2,500+', label: 'Happy Customers' },\n    { icon: Download, value: '15,000+', label: 'Downloads' },\n    { icon: Award, value: '98%', label: 'Satisfaction Rate' }\n  ];\n\n  const testimonials = [\n    {\n      name: 'Kwame Asante',\n      role: 'Property Developer',\n      content: 'SAK Constructions provided excellent house plans that saved us time and money. The quality exceeded our expectations!',\n      rating: 5,\n      image: '/placeholder.svg'\n    },\n    {\n      name: 'Ama Osei',\n      role: 'Homeowner',\n      content: 'I found my dream home plan here. The process was smooth and the support team was incredibly helpful throughout.',\n      rating: 5,\n      image: '/placeholder.svg'\n    },\n    {\n      name: 'Kofi Mensah',\n      role: 'Contractor',\n      content: 'Professional plans that make construction smooth and efficient. Great platform for contractors like me.',\n      rating: 5,\n      image: '/placeholder.svg'\n    }\n  ];\n\n  const recentNews = [\n    {\n      title: 'New Villa Collection Released',\n      excerpt: 'Discover our latest luxury villa designs featuring modern amenities and sustainable building practices.',\n      date: '2024-01-15',\n      category: 'New Releases'\n    },\n    {\n      title: 'Building Permit Guide 2024',\n      excerpt: 'Everything you need to know about obtaining building permits in Ghana this year.',\n      date: '2024-01-10',\n      category: 'Guides'\n    },\n    {\n      title: 'Sustainable Building Trends',\n      excerpt: 'Explore the latest trends in eco-friendly construction and energy-efficient home design.',\n      date: '2024-01-05',\n      category: 'Trends'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <Hero />\n      \n      {/* Plan Categories */}\n      <PlanCategories />\n      \n      {/* Features */}\n      <Features />\n\n      {/* Featured Plans Section */}\n      <section className=\"py-20 bg-gradient-to-br from-muted/30 to-muted/10\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <Badge variant=\"secondary\" className=\"mb-4\">\n              Featured Plans\n            </Badge>\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Most Popular House Plans\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Discover our most sought-after designs, carefully crafted by leading architects\n            </p>\n          </div>\n\n          {loading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <div className=\"h-48 bg-muted rounded-t-lg\"></div>\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded mb-4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {featuredPlans.map((plan) => (\n                <Card key={plan.id} className=\"group hover:shadow-xl transition-all duration-300 cursor-pointer\">\n                  <div className=\"relative\">\n                    <img \n                      src={plan.image_url || '/placeholder.svg'} \n                      alt={plan.title}\n                      className=\"w-full h-48 object-cover rounded-t-lg group-hover:scale-105 transition-transform duration-300\"\n                    />\n                    {plan.featured && (\n                      <Badge className=\"absolute top-4 right-4 bg-primary\">\n                        <Star className=\"w-3 h-3 mr-1\" />\n                        Featured\n                      </Badge>\n                    )}\n                  </div>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {plan.plan_type}\n                      </Badge>\n                      <span className=\"text-2xl font-bold text-primary\">\n                        ‚Çµ{plan.basic_price?.toLocaleString()}\n                      </span>\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-foreground mb-2 group-hover:text-primary transition-colors\">\n                      {plan.title}\n                    </h3>\n                    <p className=\"text-muted-foreground mb-4 line-clamp-2\">\n                      {plan.description}\n                    </p>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <span className=\"flex items-center\">\n                          <Bed className=\"w-4 h-4 mr-1\" />\n                          {plan.bedrooms} BR\n                        </span>\n                        <span className=\"flex items-center\">\n                          <Bath className=\"w-4 h-4 mr-1\" />\n                          {plan.bathrooms} BA\n                        </span>\n                        <span className=\"flex items-center\">\n                          <Square className=\"w-4 h-4 mr-1\" />\n                          {plan.area_sqft?.toLocaleString()} sq ft\n                        </span>\n                      </div>\n                    </div>\n                    <Button \n                      className=\"w-full group-hover:bg-primary transition-colors\"\n                      onClick={() => navigate(`/plans/${plan.id}`)}\n                    >\n                      View Details\n                      <ArrowRight className=\"w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform\" />\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <Button \n              size=\"lg\" \n              className=\"btn-primary\"\n              onClick={() => navigate('/plans')}\n            >\n              View All Plans\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Statistics Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-secondary/5\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Trusted by Thousands\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Our platform has helped countless families build their dream homes\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {stats.map((stat, index) => {\n              const Icon = stat.icon;\n              return (\n                <div key={index} className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <Icon className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <div className=\"text-3xl md:text-4xl font-bold text-foreground mb-2\">\n                    {stat.value}\n                  </div>\n                  <div className=\"text-muted-foreground\">\n                    {stat.label}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              What Our Customers Say\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Real stories from real customers who have built their dream homes with us\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"text-center hover:shadow-lg transition-shadow duration-300\">\n                <CardContent className=\"p-8\">\n                  <div className=\"flex justify-center mb-4\">\n                    {[...Array(testimonial.rating)].map((_, i) => (\n                      <Star key={i} className=\"w-5 h-5 text-warning fill-current\" />\n                    ))}\n                  </div>\n                  <p className=\"text-muted-foreground mb-6 italic\">\n                    \"{testimonial.content}\"\n                  </p>\n                  <div className=\"flex items-center justify-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-full flex items-center justify-center\">\n                      <Users className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold text-foreground\">{testimonial.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{testimonial.role}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Recent News Section */}\n      <section className=\"py-20 bg-gradient-to-br from-muted/30 to-muted/10\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Latest News & Insights\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Stay updated with the latest trends, tips, and industry insights\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {recentNews.map((news, index) => (\n              <Card key={index} className=\"hover:shadow-lg transition-shadow duration-300 cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {news.category}\n                    </Badge>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {new Date(news.date).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-3 hover:text-primary transition-colors\">\n                    {news.title}\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4 line-clamp-3\">\n                    {news.excerpt}\n                  </p>\n                  <Button variant=\"ghost\" className=\"p-0 h-auto text-primary hover:text-primary/80\">\n                    Read More\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Newsletter Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-secondary/5\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <Mail className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Stay Updated\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto mb-8\">\n              Get the latest house plan releases, construction tips, and exclusive offers delivered to your inbox\n            </p>\n            \n            <form onSubmit={handleNewsletterSignup} className=\"flex flex-col sm:flex-row gap-4 max-w-md mx-auto\">\n              <Input\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"flex-1\"\n                required\n              />\n              <Button type=\"submit\" className=\"btn-primary\">\n                Subscribe\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </form>\n            \n            <p className=\"text-sm text-muted-foreground mt-4\">\n              No spam, unsubscribe at any time. We respect your privacy.\n            </p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":14806},"client/src/pages/Login.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Link } from 'react-router-dom';\nimport { ArrowLeft, Mail, Lock, User, Eye, EyeOff } from 'lucide-react';\nimport { useState } from 'react';\n\nconst Login = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    rememberMe: false\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Login attempted:', formData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-construction-gray-light to-background flex items-center justify-center p-4\">\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"w-full h-full bg-repeat opacity-20\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23f97316' fill-opacity='0.1'%3E%3Cpath d='M30 30c0-11.046-8.954-20-20-20s-20 8.954-20 20 8.954 20 20 20 20-8.954 20-20zM10 10c11.046 0 20 8.954 20 20s-8.954 20-20 20-20-8.954-20-20 8.954-20 20-20z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`\n        }} />\n      </div>\n\n      <div className=\"relative w-full max-w-md\">\n        {/* Back to Home */}\n        <div className=\"mb-6\">\n          <Link to=\"/\" className=\"inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Home\n          </Link>\n        </div>\n\n        {/* Login Card */}\n        <Card className=\"border-0 bg-card/95 backdrop-blur shadow-construction\">\n          <CardHeader className=\"text-center space-y-4\">\n            {/* Logo */}\n            <div className=\"flex items-center justify-center space-x-2\">\n              <img \n                src=\"/logo.png\" \n                alt=\"SAK Constructions\" \n                className=\"h-12 w-auto\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <CardTitle className=\"text-2xl font-bold\">Welcome Back</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                Sign in to access your account and continue building your dreams\n              </CardDescription>\n            </div>\n          </CardHeader>\n\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Email Field */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({...formData, email: e.target.value})}\n                    className=\"pl-10\"\n                    required\n                  />\n                </div>\n              </div>\n\n              {/* Password Field */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    value={formData.password}\n                    onChange={(e) => setFormData({...formData, password: e.target.value})}\n                    className=\"pl-10 pr-10\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-3 text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              {/* Remember Me & Forgot Password */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"rememberMe\" \n                    checked={formData.rememberMe}\n                    onCheckedChange={(checked) => setFormData({...formData, rememberMe: checked as boolean})}\n                  />\n                  <Label htmlFor=\"rememberMe\" className=\"text-sm text-muted-foreground\">\n                    Remember me\n                  </Label>\n                </div>\n                <Link to=\"/forgot-password\" className=\"text-sm text-primary hover:text-primary/80 transition-colors\">\n                  Forgot password?\n                </Link>\n              </div>\n\n              {/* Submit Button */}\n              <Button type=\"submit\" variant=\"cta\" size=\"lg\" className=\"w-full\">\n                Sign In\n              </Button>\n            </form>\n\n            {/* Divider */}\n            <div className=\"relative my-6\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-border\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"bg-card px-4 text-muted-foreground\">Or continue with</span>\n              </div>\n            </div>\n\n            {/* Social Login */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button variant=\"outline\" size=\"lg\">\n                <svg className=\"h-5 w-5 mr-2\" viewBox=\"0 0 24 24\">\n                  <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                Google\n              </Button>\n              <Button variant=\"outline\" size=\"lg\">\n                <svg className=\"h-5 w-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                </svg>\n                Facebook\n              </Button>\n            </div>\n\n            {/* Sign Up Link */}\n            <div className=\"text-center mt-6\">\n              <p className=\"text-sm text-muted-foreground\">\n                Don't have an account?{' '}\n                <Link to=\"/register\" className=\"text-primary hover:text-primary/80 font-medium transition-colors\">\n                  Create account\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Trust Indicators */}\n        <div className=\"mt-6 text-center\">\n          <div className=\"flex items-center justify-center gap-4 text-xs text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n              <span>Secure Login</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 bg-primary rounded-full\" />\n              <span>Trusted by 2000+</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","size_bytes":8510},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":739},"client/src/pages/PaymentVerification.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, CheckCircle, AlertCircle } from 'lucide-react';\nimport { api } from '@/lib/api';\n\nconst PaymentVerification = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const [verifying, setVerifying] = useState(true);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState('');\n  const [orderId, setOrderId] = useState('');\n\n  useEffect(() => {\n    const verifyPayment = async () => {\n      const reference = searchParams.get('reference');\n      const trxref = searchParams.get('trxref');\n      \n      if (!reference && !trxref) {\n        setError('No payment reference found');\n        setVerifying(false);\n        return;\n      }\n\n      try {\n        const paymentRef = reference || trxref;\n        console.log('Verifying payment with reference:', paymentRef);\n        \n        // Use GET request with reference as URL parameter\n        const response = await fetch(`/api/payments/verify/${paymentRef}`);\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('Payment verification failed:', response.status, errorText);\n          setError('Payment verification failed. Please contact support.');\n          return;\n        }\n        \n        const responseData = await response.json();\n        console.log('Payment verification response:', responseData);\n        \n        if (responseData.success && responseData.order) {\n          setSuccess(true);\n          setOrderId(responseData.order.id);\n          \n          // Redirect to download page after a short delay\n          setTimeout(() => {\n            navigate(`/download/${responseData.order.id}`);\n          }, 2000);\n        } else {\n          setError('Payment verification failed');\n        }\n      } catch (error) {\n        console.error('Payment verification error:', error);\n        setError('Failed to verify payment. Please contact support.');\n      } finally {\n        setVerifying(false);\n      }\n    };\n\n    verifyPayment();\n  }, [searchParams, navigate]);\n\n  if (verifying) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Loader2 className=\"h-6 w-6 animate-spin text-blue-600\" />\n              <span className=\"text-lg\">Verifying your payment...</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <CardTitle className=\"text-green-600\">Payment Successful!</CardTitle>\n            <CardDescription>Your payment has been verified successfully</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-center text-sm text-gray-600\">\n              Redirecting you to your downloads...\n            </p>\n            <Button \n              onClick={() => navigate(`/download/${orderId}`)}\n              className=\"w-full bg-green-600 hover:bg-green-700\"\n            >\n              Go to Downloads\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-pink-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n            <AlertCircle className=\"w-8 h-8 text-red-600\" />\n          </div>\n          <CardTitle className=\"text-red-600\">Payment Verification Failed</CardTitle>\n          <CardDescription>{error}</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button \n            onClick={() => navigate('/plans')}\n            variant=\"outline\"\n            className=\"w-full\"\n          >\n            Back to Plans\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default PaymentVerification;\n","size_bytes":4829},"client/src/pages/PlanDetail.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport PlanReviews from '@/components/PlanReviews';\nimport Plan3DViewer from '@/components/Plan3DViewer';\nimport { \n  ArrowLeft, \n  Star, \n  Bed, \n  Bath, \n  Square, \n  Download, \n  Share2, \n  Heart,\n  CheckCircle,\n  Ruler,\n  FileText,\n  Image as ImageIcon,\n  Box\n} from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { Link, useParams, useNavigate } from 'react-router-dom';\nimport { api } from '@/lib/api';\nimport villaImage from '@/assets/villa-plan.jpg';\nimport bungalowImage from '@/assets/bungalow-plan.jpg';\nimport townhouseImage from '@/assets/townhouse-plan.jpg';\n\nconst PlanDetail = () => {\n  const [selectedTier, setSelectedTier] = useState('standard');\n  const [plan, setPlan] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [show3DViewer, setShow3DViewer] = useState(false);\n  const [usingFallbackData, setUsingFallbackData] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n  \n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  // Create a comprehensive fallback plan\n  const createFallbackPlan = (planId: string) => ({\n    id: planId,\n    title: 'Modern Villa Design',\n    description: 'A stunning contemporary villa featuring open-concept living spaces, luxury amenities, and sustainable design principles. Perfect for families seeking modern comfort and elegant aesthetics.',\n    plan_type: 'villa',\n    bedrooms: 4,\n    bathrooms: 3,\n    area_sqft: 3200,\n    basic_price: 2800,\n    standard_price: 3800,\n    premium_price: 4800,\n    featured: true,\n    status: 'active',\n    image_url: null,\n    gallery_images: [],\n    plan_files: null,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  });\n\n  // Validate plan data to ensure it's actually a house plan\n  const validatePlanData = (planData: any) => {\n    // Check if this looks like travel data instead of plan data\n    if (planData.travel_date || planData.departure_time || planData.from || planData.to || planData.fare) {\n      console.warn('API returned travel data instead of plan data, using fallback');\n      return false;\n    }\n    \n    // Check if this has the expected plan structure\n    if (!planData.title || !planData.plan_type || planData.bedrooms === undefined) {\n      console.warn('Plan data missing required fields, using fallback');\n      return false;\n    }\n    \n    return true;\n  };\n\n  const fetchPlan = async () => {\n    try {\n      if (id) {\n        const data = await api.getPlan(id);\n        console.log('Fetched plan data:', data); // Debug log\n        console.log('Plan data type:', typeof data);\n        console.log('Plan data keys:', Object.keys(data || {}));\n        console.log('Plan data structure:', JSON.stringify(data, null, 2));\n        \n        // Validate the data\n        if (validatePlanData(data)) {\n          setPlan(data);\n          setUsingFallbackData(false);\n        } else {\n          // Use fallback data if API returns invalid data\n          console.warn('Using fallback plan data due to invalid API response');\n          setPlan(createFallbackPlan(id));\n          setUsingFallbackData(true);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching plan:', error);\n      // If API fails, create a fallback plan for demonstration\n      console.warn('API failed, using fallback plan data');\n      setPlan(createFallbackPlan(id || 'unknown'));\n      setUsingFallbackData(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check if plan is already in favorites on component mount\n  useEffect(() => {\n    if (plan) {\n      const existingFavorites = JSON.parse(localStorage.getItem('favoritePlans') || '[]');\n      const isPlanFavorite = existingFavorites.some((fav: any) => fav.id === plan.id);\n      setIsFavorite(isPlanFavorite);\n    }\n  }, [plan]);\n\n  // Fetch plan data when component mounts\n  useEffect(() => {\n    if (id) {\n      fetchPlan();\n    }\n  }, [id]);\n\n  const handleCheckout = () => {\n    const prices = {\n      basic: plan.basic_price,\n      standard: plan.standard_price,\n      premium: plan.premium_price\n    };\n    \n    const checkoutData = {\n      planId: plan.id,\n      planTitle: plan.title,\n      package: selectedTier,\n      packageName: `${selectedTier} Package`,\n      price: prices[selectedTier as keyof typeof prices],\n    };\n    \n    // Store checkout data in localStorage for the checkout page\n    localStorage.setItem('checkoutData', JSON.stringify(checkoutData));\n    \n    // Navigate to checkout page\n    navigate('/checkout');\n  };\n\n  const handleShare = async () => {\n    setIsSharing(true);\n    try {\n      const shareData = {\n        title: plan.title,\n        text: `Check out this amazing ${plan.plan_type} plan: ${plan.description}`,\n        url: window.location.href,\n      };\n\n      if (navigator.share && navigator.canShare(shareData)) {\n        // Use native sharing on mobile devices\n        await navigator.share(shareData);\n      } else {\n        // Fallback: copy to clipboard\n        await navigator.clipboard.writeText(window.location.href);\n        alert('Link copied to clipboard!');\n      }\n    } catch (error) {\n      console.error('Error sharing:', error);\n      // Fallback: copy to clipboard\n      try {\n        await navigator.clipboard.writeText(window.location.href);\n        alert('Link copied to clipboard!');\n      } catch (clipboardError) {\n        alert('Unable to share or copy link');\n      }\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  const handleFavorite = () => {\n    setIsFavorite(!isFavorite);\n    \n    // Get existing favorites from localStorage\n    const existingFavorites = JSON.parse(localStorage.getItem('favoritePlans') || '[]');\n    \n    if (isFavorite) {\n      // Remove from favorites\n      const updatedFavorites = existingFavorites.filter((fav: any) => fav.id !== plan.id);\n      localStorage.setItem('favoritePlans', JSON.stringify(updatedFavorites));\n    } else {\n      // Add to favorites\n      const planData = {\n        id: plan.id,\n        title: plan.title,\n        plan_type: plan.plan_type,\n        image_url: plan.image_url,\n        basic_price: plan.basic_price,\n        added_at: new Date().toISOString()\n      };\n      const updatedFavorites = [...existingFavorites, planData];\n      localStorage.setItem('favoritePlans', JSON.stringify(updatedFavorites));\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading plan details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!plan) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Plan Not Found</h1>\n          <p className=\"text-muted-foreground mb-6\">The plan you're looking for doesn't exist.</p>\n          <Button asChild>\n            <Link to=\"/plans\">Back to Plans</Link>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Similar plans would need a separate query\n  const similarPlans: any[] = [];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-construction-gray-light\">\n      {/* Header */}\n      <section className=\"py-16 bg-gradient-to-r from-primary/10 to-primary/5\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"flex items-center gap-4 mb-6\">\n              <Button variant=\"ghost\" size=\"sm\" asChild>\n                <Link to=\"/plans\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Plans\n            </Link>\n              </Button>\n              <Badge variant=\"secondary\">{plan.plan_type}</Badge>\n              {plan.featured && (\n                <Badge className=\"bg-primary text-primary-foreground\">\n                  <Star className=\"h-3 w-3 mr-1\" />\n                  Featured\n                </Badge>\n              )}\n      </div>\n\n            <div className=\"grid lg:grid-cols-2 gap-12 items-start\">\n              {/* Plan Image */}\n            <div className=\"space-y-4\">\n              <div className=\"relative h-96 rounded-2xl overflow-hidden\">\n                <img\n                    src={plan.image_url || villaImage}\n                  alt={plan.title}\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute top-4 right-4 flex gap-2\">\n                  <Button variant=\"secondary\" size=\"sm\" onClick={() => setShow3DViewer(true)}>\n                      <Box className=\"h-4 w-4\" />\n                  </Button>\n                  <Button \n                     variant=\"secondary\" \n                     size=\"sm\" \n                     onClick={handleShare}\n                     disabled={isSharing}\n                   >\n                     {isSharing ? (\n                       <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                     ) : (\n                       <Share2 className=\"h-4 w-4\" />\n                     )}\n                   </Button>\n                   <Button \n                     variant={isFavorite ? \"default\" : \"secondary\"}\n                     size=\"sm\" \n                     onClick={handleFavorite}\n                     className={isFavorite ? \"bg-red-500 hover:bg-red-600 text-white\" : \"\"}\n                   >\n                     <Heart className={`h-4 w-4 ${isFavorite ? 'fill-current' : ''}`} />\n                   </Button>\n                </div>\n              </div>\n              \n                {/* Additional Images */}\n              <div className=\"space-y-3\">\n                <h4 className=\"text-sm font-medium text-muted-foreground\">Additional Views</h4>\n                <div className=\"grid grid-cols-3 gap-3\">\n                  {plan.gallery_images?.slice(0, 3).map((image: string, index: number) => (\n                    <div key={index} className=\"h-24 rounded-lg overflow-hidden border border-border shadow-sm\">\n                      <img\n                        src={image}\n                        alt={`${plan.title} view ${index + 2}`}\n                        className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-200\"\n                      />\n                    </div>\n                  )) || [1, 2, 3].map((index) => (\n                    <div key={index} className=\"h-24 rounded-lg border-2 border-dashed border-muted-foreground/30 bg-muted/20 flex items-center justify-center\">\n                      <div className=\"text-center text-muted-foreground\">\n                        <ImageIcon className=\"w-6 h-6 mx-auto mb-1 opacity-50\" />\n                        <span className=\"text-xs\">View {index + 1}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n              {/* Plan Info */}\n            <div className=\"space-y-6\">\n              <div>\n                  <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n                  {plan.title}\n                </h1>\n                  <p className=\"text-lg text-muted-foreground leading-relaxed\">\n                    {plan.description}\n                </p>\n              </div>\n\n                {/* Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center p-4 bg-card rounded-lg\">\n                    <div className=\"flex items-center justify-center gap-1 mb-2\">\n                      <Bed className=\"h-5 w-5 text-primary\" />\n                      <span className=\"text-2xl font-bold\">{plan.bedrooms}</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Bedrooms</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-card rounded-lg\">\n                    <div className=\"flex items-center justify-center gap-1 mb-2\">\n                      <Bath className=\"h-5 w-5 text-primary\" />\n                      <span className=\"text-2xl font-bold\">{plan.bathrooms}</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Bathrooms</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-card rounded-lg\">\n                    <div className=\"flex items-center justify-center gap-1 mb-2\">\n                      <Square className=\"h-5 w-5 text-primary\" />\n                      <span className=\"text-2xl font-bold\">{plan.area_sqft}</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Sq Ft</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-card rounded-lg\">\n                    <div className=\"flex items-center justify-center gap-1 mb-2\">\n                      <Star className=\"h-5 w-5 text-primary fill-current\" />\n                      <span className=\"text-2xl font-bold\">4.5</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Rating</div>\n                  </div>\n                </div>\n\n                {/* Quick Info */}\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>Type: {plan.plan_type}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>Status: {plan.status}</span>\n                  </div>\n              </div>\n              \n\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Plan Details */}\n      <section className=\"py-16\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <Tabs defaultValue=\"overview\" className=\"space-y-8\">\n                          <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"features\">Features</TabsTrigger>\n              <TabsTrigger value=\"pricing\">Pricing</TabsTrigger>\n              <TabsTrigger value=\"reviews\">Reviews</TabsTrigger>\n              <TabsTrigger value=\"similar\">Similar Plans</TabsTrigger>\n            </TabsList>\n                \n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-8\">\n                  <div>\n                    <h3 className=\"text-xl font-semibold mb-4\">Plan Description</h3>\n                    <p className=\"text-muted-foreground leading-relaxed\">\n                      {plan.description}\n                    </p>\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-semibold mb-4\">Key Specifications</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Total Area:</span>\n                        <span className=\"font-medium\">{plan.area_sqft} sq ft</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Bedrooms:</span>\n                        <span className=\"font-medium\">{plan.bedrooms}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Bathrooms:</span>\n                        <span className=\"font-medium\">{plan.bathrooms}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Type:</span>\n                        <span className=\"font-medium\">{plan.plan_type}</span>\n                      </div>\n                    </div>\n                      </div>\n                    </div>\n              </TabsContent>\n\n              <TabsContent value=\"features\" className=\"space-y-6\">\n                <h3 className=\"text-xl font-semibold\">Plan Features</h3>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                    <span>Professional architectural plans</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                    <span>Detailed floor plans</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                    <span>Construction-ready drawings</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                    <span>Material specifications</span>\n                  </div>\n                  </div>\n                </TabsContent>\n\n              <TabsContent value=\"pricing\" className=\"space-y-6\">\n                <div className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"text-xl font-semibold mb-4\">Choose Your Package</h3>\n                    <p className=\"text-muted-foreground\">\n                      Select the package that best suits your needs. All packages include professional architectural plans.\n                    </p>\n          </div>\n\n                  <div className=\"grid md:grid-cols-3 gap-6\">\n                    {[\n                      {\n                        key: 'basic',\n                        name: 'Basic Package',\n                        description: 'Essential plans to get started',\n                        price: plan.basic_price,\n                        includes: ['Floor plans (PDF)', 'Basic elevations', 'Plot plan', 'Material list']\n                      },\n                      {\n                        key: 'standard',\n                        name: 'Standard Package', \n                        description: 'Complete construction package',\n                        price: plan.standard_price,\n                        includes: ['Everything in Basic', 'Detailed elevations', 'Cross sections', 'Construction details', 'Electrical layout', 'Plumbing layout']\n                      },\n                      {\n                        key: 'premium',\n                        name: 'Premium Package',\n                        description: 'Professional complete package', \n                        price: plan.premium_price,\n                        includes: ['Everything in Standard', '3D renderings', 'Interior layouts', 'Landscape design', 'Structural details', 'HVAC layout', 'Permit-ready drawings']\n                      }\n                    ].map((tier) => (\n                      <Card key={tier.key} className={`relative ${selectedTier === tier.key ? 'ring-2 ring-primary' : ''}`}>\n                        {selectedTier === tier.key && (\n                          <div className=\"absolute -top-2 -right-2\">\n                            <Badge className=\"bg-primary text-primary-foreground\">\n                              Selected\n                            </Badge>\n                          </div>\n                        )}\n              <CardHeader>\n                          <CardTitle className=\"text-lg\">{tier.name}</CardTitle>\n                          <CardDescription>{tier.description}</CardDescription>\n                          <div className=\"text-2xl font-bold text-primary\">‚Çµ{tier.price}</div>\n              </CardHeader>\n                        <CardContent>\n                          <ul className=\"space-y-2 mb-6\">\n                            {tier.includes.map((item: string, index: number) => (\n                              <li key={index} className=\"flex items-center gap-2 text-sm\">\n                                <CheckCircle className=\"h-4 w-4 text-primary flex-shrink-0\" />\n                                {item}\n                              </li>\n                            ))}\n                          </ul>\n                          <Button \n                            className=\"w-full\" \n                            variant={selectedTier === tier.key ? 'default' : 'outline'}\n                      onClick={() => setSelectedTier(tier.key)}\n                    >\n                            {selectedTier === tier.key ? 'Selected' : 'Select Package'}\n                          </Button>\n                        </CardContent>\n                      </Card>\n                  ))}\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                     <div className=\"flex items-center justify-between text-lg font-semibold\">\n                       <span>Total:</span>\n                       <span className=\"text-primary\">‚Çµ{selectedTier === 'basic' ? plan.basic_price : selectedTier === 'standard' ? plan.standard_price : plan.premium_price}</span>\n                  </div>\n                  \n                     <Button className=\"w-full\" size=\"lg\" onClick={handleCheckout}>\n                       Proceed to Checkout - ‚Çµ{selectedTier === 'basic' ? plan.basic_price : selectedTier === 'standard' ? plan.standard_price : plan.premium_price}\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"reviews\" className=\"space-y-6\">\n                <PlanReviews planId={plan.id} planTitle={plan.title} />\n              </TabsContent>\n\n              <TabsContent value=\"similar\" className=\"space-y-6\">\n                <h3 className=\"text-xl font-semibold\">Similar {plan.plan_type} Plans</h3>\n                <div className=\"grid md:grid-cols-3 gap-6\">\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <p>Similar plans coming soon...</p>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n        </div>\n              </div>\n      </section>\n\n      {/* 3D Viewer Modal */}\n      {plan && (\n        <Plan3DViewer \n          plan={plan}\n          isOpen={show3DViewer} \n          onClose={() => setShow3DViewer(false)} \n        />\n      )}\n    </div>\n  );\n};\n\nexport default PlanDetail;","size_bytes":23229},"client/src/pages/Plans.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search, Filter, Grid, List, Star, Bed, Bath, Square, Download, Scale, MapPin, Users, Building2, Sparkles, ArrowRight, Heart, Eye, Zap } from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '@/lib/api';\nimport PlanComparison from '@/components/PlanComparison';\nimport villaImage from '@/assets/villa-plan.jpg';\nimport bungalowImage from '@/assets/bungalow-plan.jpg';\nimport townhouseImage from '@/assets/townhouse-plan.jpg';\n\nconst Plans = () => {\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedType, setSelectedType] = useState('all');\n  const [selectedBedrooms, setSelectedBedrooms] = useState('all');\n  const [selectedPrice, setSelectedPrice] = useState('all');\n  const [selectedSort, setSelectedSort] = useState('featured');\n  const [plans, setPlans] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showComparison, setShowComparison] = useState(false);\n  \n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchPlans();\n  }, []);\n\n  const fetchPlans = async () => {\n    try {\n      const data = await api.getPlans({ status: 'active' });\n      setPlans(data || []);\n    } catch (error) {\n      console.error('Error fetching plans:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background via-background to-muted/20\">\n        <div className=\"text-center space-y-6\">\n          <div className=\"relative\">\n            <div className=\"w-16 h-16 border-4 border-primary/20 border-t-primary rounded-full animate-spin mx-auto\"></div>\n            <div className=\"absolute inset-0 w-16 h-16 border-4 border-transparent border-t-secondary rounded-full animate-spin mx-auto\" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"text-xl font-semibold text-foreground\">Loading Amazing Plans</h3>\n            <p className=\"text-muted-foreground\">Discovering the perfect designs for you...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Filter plans based on all criteria\n  const filteredPlans = plans.filter(plan => {\n    // Search filter\n    const matchesSearch = plan.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         plan.plan_type.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    // Type filter\n    const matchesType = selectedType === 'all' || plan.plan_type.toLowerCase() === selectedType.toLowerCase();\n    \n    // Bedrooms filter\n    const matchesBedrooms = selectedBedrooms === 'all' || plan.bedrooms >= parseInt(selectedBedrooms);\n    \n    // Price filter\n    let matchesPrice = true;\n    if (selectedPrice === 'low') {\n      matchesPrice = plan.basic_price < 2000;\n    } else if (selectedPrice === 'mid') {\n      matchesPrice = plan.basic_price >= 2000 && plan.basic_price <= 3500;\n    } else if (selectedPrice === 'high') {\n      matchesPrice = plan.basic_price > 3500;\n    }\n    \n    return matchesSearch && matchesType && matchesBedrooms && matchesPrice;\n  });\n\n  // Sort plans\n  const sortedPlans = [...filteredPlans].sort((a, b) => {\n    switch (selectedSort) {\n      case 'featured':\n        return b.featured ? 1 : -1;\n      case 'price-low':\n        return a.basic_price - b.basic_price;\n      case 'price-high':\n        return b.basic_price - a.basic_price;\n      case 'rating':\n        return 0; // Rating not implemented yet\n      case 'downloads':\n        return 0; // Downloads not tracked yet\n      default:\n        return 0;\n    }\n  });\n\n  const handleViewDetails = (planId: number) => {\n    navigate(`/plans/${planId}`);\n  };\n\n  const getPlanImage = (planType: string) => {\n    switch (planType.toLowerCase()) {\n      case 'villa':\n        return villaImage;\n      case 'bungalow':\n        return bungalowImage;\n      case 'townhouse':\n        return townhouseImage;\n      default:\n        return villaImage;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/10\">\n      {/* Hero Section */}\n      <section className=\"relative py-20 bg-gradient-to-br from-primary/5 via-primary/10 to-secondary/5 overflow-hidden\">\n        {/* Background Pattern */}\n        <div className=\"absolute inset-0 opacity-30\">\n          <div className=\"absolute top-0 left-0 w-full h-full bg-[radial-gradient(circle_at_1px_1px,rgba(59,130,246,0.1)_1px,transparent_0)] bg-[size:40px_40px]\"></div>\n        </div>\n        \n        <div className=\"container px-4 relative z-10\">\n          <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-primary/10 text-primary rounded-full text-sm font-medium border border-primary/20\">\n              <Sparkles className=\"w-4 h-4\" />\n              Premium House Plans\n            </div>\n            \n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground leading-tight\">\n              Discover Your Perfect\n              <span className=\"block bg-gradient-to-r from-primary via-primary to-secondary bg-clip-text text-transparent\">\n                Dream Home\n              </span>\n            </h1>\n            \n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed\">\n              Explore our curated collection of professionally designed architectural plans. \n              From modern villas to cozy bungalows, find the perfect design that matches your vision.\n            </p>\n            \n            <div className=\"flex flex-wrap justify-center gap-4 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                <Building2 className=\"w-4 h-4 text-primary\" />\n                <span>500+ Plans</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"w-4 h-4 text-primary\" />\n                <span>2,500+ Happy Customers</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <MapPin className=\"w-4 h-4 text-primary\" />\n                <span>Ghana's #1 Platform</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container px-4 py-16\">\n        {/* Enhanced Filters and Search */}\n        <div className=\"bg-white/80 backdrop-blur-sm rounded-3xl shadow-xl border border-white/20 p-8 mb-12\">\n          <div className=\"space-y-6\">\n            {/* Search Bar */}\n            <div className=\"relative max-w-2xl mx-auto\">\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search for plans, styles, or features...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-12 pr-6 py-4 text-lg border-2 border-muted/30 focus:border-primary focus:ring-4 focus:ring-primary/10 transition-all duration-300 rounded-2xl\"\n              />\n              <Button \n                size=\"sm\" \n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2 rounded-xl\"\n              >\n                <Search className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            {/* Filter Controls */}\n            <div className=\"flex flex-wrap gap-4 justify-center\">\n              <Select value={selectedType} onValueChange={setSelectedType}>\n                <SelectTrigger className=\"w-40 bg-white/50 border-muted/30 hover:bg-white/70 transition-colors rounded-xl\">\n                  <SelectValue placeholder=\"Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"villa\">Villas</SelectItem>\n                  <SelectItem value=\"bungalow\">Bungalows</SelectItem>\n                  <SelectItem value=\"townhouse\">Townhouses</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={selectedBedrooms} onValueChange={setSelectedBedrooms}>\n                <SelectTrigger className=\"w-40 bg-white/50 border-muted/30 hover:bg-white/70 transition-colors rounded-xl\">\n                  <SelectValue placeholder=\"Bedrooms\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Any Bedrooms</SelectItem>\n                  <SelectItem value=\"2\">2+ Bedrooms</SelectItem>\n                  <SelectItem value=\"3\">3+ Bedrooms</SelectItem>\n                  <SelectItem value=\"4\">4+ Bedrooms</SelectItem>\n                  <SelectItem value=\"5\">5+ Bedrooms</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={selectedPrice} onValueChange={setSelectedPrice}>\n                <SelectTrigger className=\"w-40 bg-white/50 border-muted/30 hover:bg-white/70 transition-colors rounded-xl\">\n                  <SelectValue placeholder=\"Price Range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Any Price</SelectItem>\n                  <SelectItem value=\"low\">Under ‚Çµ2,000</SelectItem>\n                  <SelectItem value=\"mid\">‚Çµ2,000 - ‚Çµ3,500</SelectItem>\n                  <SelectItem value=\"high\">‚Çµ3,500+</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={selectedSort} onValueChange={setSelectedSort}>\n                <SelectTrigger className=\"w-48 bg-white/50 border-muted/30 hover:bg-white/70 transition-colors rounded-xl\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"featured\">Featured First</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                  <SelectItem value=\"downloads\">Most Downloaded</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex items-center justify-center gap-4 pt-4\">\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                onClick={() => setShowComparison(true)}\n                className=\"flex items-center gap-3 px-6 py-3 rounded-xl border-2 hover:border-primary hover:bg-primary/5 transition-all duration-300\"\n              >\n                <Scale className=\"h-5 w-5\" />\n                Compare Plans\n              </Button>\n              \n              <div className=\"flex items-center gap-2 bg-muted/30 rounded-xl p-1\">\n                <Button\n                  variant={viewMode === 'grid' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('grid')}\n                  className=\"rounded-lg transition-all duration-300\"\n                >\n                  <Grid className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === 'list' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('list')}\n                  className=\"rounded-lg transition-all duration-300\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Results Header */}\n        <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between mb-12 gap-4\">\n          <div className=\"space-y-2\">\n            <h2 className=\"text-3xl font-bold text-foreground\">\n              {sortedPlans.length} Amazing Plans Found\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Professional architectural designs crafted by Ghana's top architects\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Badge variant=\"secondary\" className=\"px-4 py-2 text-sm\">\n              <Zap className=\"w-4 h-4 mr-2\" />\n              {sortedPlans.filter(p => p.featured).length} Featured\n            </Badge>\n          </div>\n        </div>\n\n        {/* Plans Grid/List */}\n        {viewMode === 'grid' ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {sortedPlans.map((plan) => (\n              <Card key={plan.id} className=\"group relative overflow-hidden border-0 bg-white/80 backdrop-blur-sm hover:bg-white/90 transition-all duration-500 transform hover:-translate-y-3 hover:shadow-2xl rounded-3xl\">\n                {/* Featured Badge */}\n                {plan.featured && (\n                  <div className=\"absolute top-4 left-4 z-20\">\n                    <Badge className=\"bg-gradient-to-r from-primary to-secondary text-white border-0 shadow-lg\">\n                      <Star className=\"h-3 w-3 mr-1 fill-current\" />\n                      Featured\n                    </Badge>\n                  </div>\n                )}\n                \n                {/* Plan Type Badge */}\n                <div className=\"absolute top-4 right-4 z-20\">\n                  <Badge variant=\"secondary\" className=\"bg-white/90 text-foreground border-0 shadow-lg\">\n                    {plan.plan_type}\n                  </Badge>\n                </div>\n                \n                {/* Image Section */}\n                <div className=\"relative h-56 overflow-hidden\">\n                  <img\n                    src={plan.image_url || getPlanImage(plan.plan_type)}\n                    alt={plan.title}\n                    className=\"w-full h-full object-cover transition-transform duration-700 group-hover:scale-110\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent\" />\n                  \n                  {/* Quick Actions Overlay */}\n                  <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center\">\n                    <div className=\"opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-4 group-hover:translate-y-0 flex gap-3\">\n                      <Button size=\"sm\" variant=\"secondary\" className=\"rounded-full w-10 h-10 p-0\">\n                        <Heart className=\"w-4 h-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"secondary\" className=\"rounded-full w-10 h-10 p-0\">\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"secondary\" className=\"rounded-full w-10 h-10 p-0\">\n                        <Download className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Content */}\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"text-xl font-bold group-hover:text-primary transition-colors duration-300 line-clamp-2\">\n                    {plan.title}\n                  </CardTitle>\n                  \n                  {/* Plan Features */}\n                  <div className=\"flex items-center justify-between text-sm text-muted-foreground pt-2\">\n                    <div className=\"flex items-center gap-1\">\n                      <Bed className=\"h-4 w-4 text-primary\" />\n                      <span>{plan.bedrooms}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Bath className=\"h-4 w-4 text-primary\" />\n                      <span>{plan.bathrooms}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Square className=\"h-4 w-4 text-primary\" />\n                      <span>{plan.area_sqft}</span>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-4\">\n                    {/* Pricing */}\n                    <div className=\"text-center p-4 bg-gradient-to-r from-primary/5 to-secondary/5 rounded-2xl border border-primary/10\">\n                      <div className=\"text-2xl font-bold text-primary\">\n                        From ‚Çµ{plan.basic_price.toLocaleString()}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Basic Package\n                      </div>\n                    </div>\n                    \n                    {/* Action Button */}\n                    <Button \n                      variant=\"default\" \n                      className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-white py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105\"\n                      onClick={() => handleViewDetails(plan.id)}\n                    >\n                      View Details\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {sortedPlans.map((plan) => (\n              <Card key={plan.id} className=\"group hover:shadow-xl transition-all duration-300 border-0 bg-white/80 backdrop-blur-sm rounded-2xl overflow-hidden\">\n                <div className=\"flex flex-col md:flex-row\">\n                  {/* Image */}\n                  <div className=\"relative w-full md:w-80 h-48 md:h-auto overflow-hidden\">\n                    <img\n                      src={plan.image_url || getPlanImage(plan.plan_type)}\n                      alt={plan.title}\n                      className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-105\"\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent\" />\n                    \n                    {plan.featured && (\n                      <div className=\"absolute top-4 left-4\">\n                        <Badge className=\"bg-gradient-to-r from-primary to-secondary text-white border-0\">\n                          <Star className=\"h-3 w-3 mr-1 fill-current\" />\n                          Featured\n                        </Badge>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Content */}\n                  <div className=\"flex-1 p-6\">\n                    <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4\">\n                      <div className=\"flex-1 space-y-4\">\n                        <div>\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {plan.plan_type}\n                            </Badge>\n                            <h3 className=\"text-2xl font-bold text-foreground group-hover:text-primary transition-colors\">\n                              {plan.title}\n                            </h3>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n                            <div className=\"flex items-center gap-2\">\n                              <Bed className=\"h-4 w-4 text-primary\" />\n                              <span>{plan.bedrooms} Bedrooms</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Bath className=\"h-4 w-4 text-primary\" />\n                              <span>{plan.bathrooms} Bathrooms</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Square className=\"h-4 w-4 text-primary\" />\n                              <span>{plan.area_sqft} sq ft</span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-3xl font-bold text-primary\">\n                          From ‚Çµ{plan.basic_price.toLocaleString()}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex flex-col gap-3\">\n                        <Button \n                          variant=\"default\" \n                          className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-white px-8 py-3 rounded-xl font-semibold\"\n                          onClick={() => handleViewDetails(plan.id)}\n                        >\n                          View Details\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                        \n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1 rounded-lg\">\n                            <Heart className=\"w-4 h-4 mr-2\" />\n                            Save\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1 rounded-lg\">\n                            <Download className=\"w-4 h-4 mr-2\" />\n                            Download\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Load More Section */}\n        {sortedPlans.length > 0 && (\n          <div className=\"text-center mt-16\">\n            <div className=\"space-y-4\">\n              <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-4 rounded-xl text-lg font-semibold hover:bg-primary hover:text-white transition-all duration-300\">\n                Load More Plans\n              </Button>\n              <p className=\"text-muted-foreground\">\n                Can't find what you're looking for? Contact us for custom designs.\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* Empty State */}\n        {sortedPlans.length === 0 && (\n          <div className=\"text-center py-20\">\n            <div className=\"max-w-md mx-auto space-y-6\">\n              <div className=\"w-24 h-24 bg-muted/30 rounded-full flex items-center justify-center mx-auto\">\n                <Search className=\"w-12 h-12 text-muted-foreground\" />\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"text-2xl font-semibold text-foreground\">No Plans Found</h3>\n                <p className=\"text-muted-foreground\">\n                  Try adjusting your search criteria or browse all available plans.\n                </p>\n              </div>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setSearchTerm('');\n                  setSelectedType('all');\n                  setSelectedBedrooms('all');\n                  setSelectedPrice('all');\n                }}\n                className=\"px-6 py-3 rounded-xl\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Plan Comparison Modal */}\n      <PlanComparison \n        isOpen={showComparison} \n        onClose={() => setShowComparison(false)} \n      />\n    </div>\n  );\n};\n\nexport default Plans;","size_bytes":24416},"client/src/pages/Privacy.tsx":{"content":"import { \n  Shield, \n  Eye, \n  Lock, \n  Users, \n  Database, \n  Globe,\n  CheckCircle,\n  AlertTriangle,\n  ArrowRight,\n  Mail,\n  Phone,\n  Building2\n} from 'lucide-react';\nimport Header from '@/components/Header';\n\n\nconst Privacy = () => {\n  const sections = [\n    {\n      title: \"Information We Collect\",\n      content: \"We collect information you provide directly to us, such as when you create an account, make a purchase, or contact our support team. This includes your name, email address, phone number, and payment information.\",\n      icon: Database\n    },\n    {\n      title: \"How We Use Your Information\",\n      content: \"We use the information we collect to provide, maintain, and improve our services, process transactions, send you technical notices and support messages, and respond to your comments and questions.\",\n      icon: Users\n    },\n    {\n      title: \"Information Sharing\",\n      content: \"We do not sell, trade, or otherwise transfer your personal information to third parties without your consent, except as described in this policy or as required by law.\",\n      icon: Lock\n    },\n    {\n      title: \"Data Security\",\n      content: \"We implement appropriate security measures to protect your personal information against unauthorized access, alteration, disclosure, or destruction. Your data is encrypted during transmission and storage.\",\n      icon: Shield\n    },\n    {\n      title: \"Your Rights\",\n      content: \"You have the right to access, update, or delete your personal information. You can also opt out of certain communications and request information about how your data is used.\",\n      icon: Eye\n    },\n    {\n      title: \"International Transfers\",\n      content: \"Your information may be transferred to and processed in countries other than your own. We ensure appropriate safeguards are in place to protect your data in accordance with this policy.\",\n      icon: Globe\n    }\n  ];\n\n  const dataTypes = [\n    {\n      category: \"Personal Information\",\n      examples: [\"Name\", \"Email address\", \"Phone number\", \"Billing address\"],\n      purpose: \"Account creation, communication, billing\"\n    },\n    {\n      category: \"Payment Information\",\n      examples: [\"Credit card details\", \"Payment history\", \"Transaction records\"],\n      purpose: \"Processing payments, order fulfillment\"\n    },\n    {\n      category: \"Usage Data\",\n      examples: [\"Website activity\", \"Download history\", \"Search queries\"],\n      purpose: \"Service improvement, user experience\"\n    },\n    {\n      category: \"Technical Data\",\n      examples: [\"IP address\", \"Browser type\", \"Device information\"],\n      purpose: \"Security, analytics, troubleshooting\"\n    }\n  ];\n\n  const contactInfo = {\n          email: \"sakconstructiongh@gmail.com\",\n            phone: \"0246798967\",\n          address: \"Tema com 25, Greater Accra, around Devtraco Estates\"\n  };\n\n  return (\n    <>\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 bg-gradient-to-br from-background via-background to-accent/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground\">\n              Privacy\n              <span className=\"block gradient-text\"> Policy</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              We are committed to protecting your privacy and ensuring the security of your personal information. Learn how we collect, use, and protect your data.\n            </p>\n            <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Last updated: {new Date().toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto space-y-12\">\n            \n            {/* Introduction */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Introduction</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                At SAK Constructions, we respect your privacy and are committed to protecting your personal information. \n                This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use \n                our website and services.\n              </p>\n            </div>\n\n            {/* Key Sections */}\n            <div className=\"space-y-6\">\n              {sections.map((section, index) => {\n                const Icon = section.icon;\n                return (\n                  <div key={index} className=\"admin-card\">\n                    <div className=\"flex items-start gap-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-xl flex items-center justify-center flex-shrink-0\">\n                        <Icon className=\"w-6 h-6 text-primary\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-semibold text-foreground mb-3\">\n                          {section.title}\n                        </h3>\n                        <p className=\"text-muted-foreground leading-relaxed\">\n                          {section.content}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Data Collection Details */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-6\">Data Collection Details</h2>\n              <div className=\"space-y-6\">\n                {dataTypes.map((dataType, index) => (\n                  <div key={index} className=\"border border-border/30 rounded-lg p-4\">\n                    <h3 className=\"font-semibold text-foreground mb-2\">{dataType.category}</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground mb-1\">Examples:</p>\n                        <ul className=\"space-y-1\">\n                          {dataType.examples.map((example, exampleIndex) => (\n                            <li key={exampleIndex} className=\"flex items-center gap-2\">\n                              <CheckCircle className=\"w-3 h-3 text-success\" />\n                              {example}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground mb-1\">Purpose:</p>\n                        <p className=\"text-foreground\">{dataType.purpose}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Cookies and Tracking */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Cookies and Tracking</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                We use cookies and similar tracking technologies to enhance your experience on our website. \n                These technologies help us remember your preferences, analyze site traffic, and personalize content.\n              </p>\n              <div className=\"bg-muted/30 rounded-lg p-4\">\n                <h3 className=\"font-semibold text-foreground mb-2\">Types of Cookies We Use:</h3>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>‚Ä¢ Essential cookies for website functionality</li>\n                  <li>‚Ä¢ Analytics cookies to understand site usage</li>\n                  <li>‚Ä¢ Preference cookies to remember your settings</li>\n                  <li>‚Ä¢ Security cookies to protect against fraud</li>\n                </ul>\n              </div>\n            </div>\n\n            {/* Data Retention */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Data Retention</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We retain your personal information only for as long as necessary to fulfill the purposes outlined \n                in this policy, unless a longer retention period is required or permitted by law. Account data is \n                retained while your account is active and for a reasonable period afterward.\n              </p>\n            </div>\n\n            {/* Third-Party Services */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Third-Party Services</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                We may use third-party service providers to help us operate our business and provide services to you. \n                These providers have access to your personal information only to perform specific tasks on our behalf \n                and are obligated not to disclose or use it for any other purpose.\n              </p>\n              <div className=\"bg-muted/30 rounded-lg p-4\">\n                <h3 className=\"font-semibold text-foreground mb-2\">Our Third-Party Partners:</h3>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>‚Ä¢ Payment processors for secure transactions</li>\n                  <li>‚Ä¢ Cloud hosting providers for data storage</li>\n                  <li>‚Ä¢ Analytics services for website improvement</li>\n                  <li>‚Ä¢ Customer support tools for better service</li>\n                </ul>\n              </div>\n            </div>\n\n            {/* Children's Privacy */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Children's Privacy</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Our services are not intended for children under the age of 18. We do not knowingly collect personal \n                information from children under 18. If you are a parent or guardian and believe your child has provided \n                us with personal information, please contact us immediately.\n              </p>\n            </div>\n\n            {/* Changes to Privacy Policy */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Changes to This Policy</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We may update this Privacy Policy from time to time. We will notify you of any changes by posting \n                the new Privacy Policy on this page and updating the \"Last updated\" date. We encourage you to review \n                this Privacy Policy periodically for any changes.\n              </p>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-6\">Contact Us</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                If you have any questions about this Privacy Policy or our data practices, please contact us:\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <Mail className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"font-medium text-foreground\">Email</p>\n                  <a href={`mailto:${contactInfo.email}`} className=\"text-primary hover:text-primary/80 text-sm\">\n                    {contactInfo.email}\n                  </a>\n                </div>\n                <div className=\"text-center\">\n                  <Phone className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"font-medium text-foreground\">Phone</p>\n                  <a href={`tel:${contactInfo.phone}`} className=\"text-primary hover:text-primary/80 text-sm\">\n                    {contactInfo.phone}\n                  </a>\n                </div>\n                <div className=\"text-center\">\n                  <Building2 className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"font-medium text-foreground\">Address</p>\n                  <p className=\"text-muted-foreground text-sm\">{contactInfo.address}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-secondary/5\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-8\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground\">\n              Your Privacy Matters to Us\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              We're committed to transparency and protecting your data. If you have any concerns about your privacy, \n              don't hesitate to reach out to our team.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <a\n                href=\"/contact\"\n                className=\"btn-primary text-lg px-8 py-4 inline-flex items-center gap-2\"\n              >\n                Contact Us\n                <ArrowRight className=\"w-5 h-5\" />\n              </a>\n              <a\n                href=\"/terms\"\n                className=\"btn-outline-modern text-lg px-8 py-4\"\n              >\n                View Terms\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n    </>\n  );\n};\n\nexport default Privacy;\n","size_bytes":14000},"client/src/pages/Register.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Link } from 'react-router-dom';\nimport { ArrowLeft, Mail, Lock, User, Eye, EyeOff, Phone } from 'lucide-react';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate\nimport { useAuth } from '@/context/AuthContext'; // Assuming AuthContext provides login function\nimport api from '@/lib/api'; // Assuming api is imported correctly\n\nconst Register = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    password: '',\n    confirmPassword: '',\n    agreeToTerms: false,\n    receiveUpdates: false\n  });\n  const [loading, setLoading] = useState(false); // Add loading state\n  const [error, setError] = useState(''); // Add error state\n  const navigate = useNavigate(); // Initialize navigate\n  const { login } = useAuth(); // Get login function from AuthContext\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n    if (!formData.agreeToTerms) {\n      setError('You must agree to the Terms of Service.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(''); // Clear previous errors\n\n      // Create user profile\n      const profileData = {\n        user_id: 'guest-' + Date.now(), // Temporary ID generation\n        email: formData.email,\n        first_name: formData.firstName,\n        last_name: formData.lastName,\n        phone: formData.phone || null,\n        role: 'user',\n      };\n\n      await api.post('/api/profiles', profileData);\n\n      // For demo purposes, auto-login after registration\n      login({\n        id: profileData.user_id,\n        email: profileData.email,\n        firstName: profileData.first_name,\n        lastName: profileData.last_name,\n        phone: profileData.phone,\n        role: profileData.role,\n      });\n\n      // Check for pending premium order\n      const pendingOrder = localStorage.getItem('pendingPremiumOrder');\n      if (pendingOrder) {\n        const orderInfo = JSON.parse(pendingOrder);\n        localStorage.removeItem('pendingPremiumOrder');\n        navigate(`/download/${orderInfo.orderId}`);\n      } else {\n        navigate('/user/dashboard');\n      }\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      setError(error.response?.data?.message || 'Failed to create account. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-construction-gray-light to-background flex items-center justify-center p-4\">\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"w-full h-full bg-repeat opacity-20\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23f97316' fill-opacity='0.1'%3E%3Cpath d='M30 30c0-11.046-8.954-20-20-20s-20 8.954-20 20 8.954 20 20 20 20-8.954 20-20zM10 10c11.046 0 20 8.954 20 20s-8.954 20-20 20-20-8.954-20-20 8.954-20 20-20z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`\n        }} />\n      </div>\n\n      <div className=\"relative w-full max-w-md\">\n        {/* Back to Home */}\n        <div className=\"mb-6\">\n          <Link to=\"/\" className=\"inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-primary transition-colors\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Home\n          </Link>\n        </div>\n\n        {/* Register Card */}\n        <Card className=\"border-0 bg-card/95 backdrop-blur shadow-construction\">\n          <CardHeader className=\"text-center space-y-4\">\n            {/* Logo */}\n            <div className=\"flex items-center justify-center space-x-2\">\n              <img \n                src=\"/logo.png\" \n                alt=\"SAK Constructions\" \n                className=\"h-12 w-auto\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <CardTitle className=\"text-2xl font-bold\">Create Account</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                Join thousands of customers building their dreams with our plans\n              </CardDescription>\n            </div>\n          </CardHeader>\n\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {/* Name Fields */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"firstName\"\n                      placeholder=\"First name\"\n                      value={formData.firstName}\n                      onChange={(e) => setFormData({...formData, firstName: e.target.value})}\n                      className=\"pl-10\"\n                      required\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    placeholder=\"Last name\"\n                    value={formData.lastName}\n                    onChange={(e) => setFormData({...formData, lastName: e.target.value})}\n                    required\n                  />\n                </div>\n              </div>\n\n              {/* Email Field */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({...formData, email: e.target.value})}\n                    className=\"pl-10\"\n                    required\n                  />\n                </div>\n              </div>\n\n              {/* Phone Field */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"phone\"\n                                            placeholder=\"0246798967\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              {/* Password Fields */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Create password\"\n                    value={formData.password}\n                    onChange={(e) => setFormData({...formData, password: e.target.value})}\n                    className=\"pl-10 pr-10\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-3 text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder=\"Confirm password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => setFormData({...formData, confirmPassword: e.target.value})}\n                    className=\"pl-10 pr-10\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-3 top-3 text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              {/* Checkboxes */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-2\">\n                  <Checkbox\n                    id=\"agreeToTerms\"\n                    checked={formData.agreeToTerms}\n                    onCheckedChange={(checked) => setFormData({...formData, agreeToTerms: checked as boolean})}\n                    required\n                  />\n                  <Label htmlFor=\"agreeToTerms\" className=\"text-sm text-muted-foreground leading-relaxed\">\n                    I agree to the{' '}\n                    <Link to=\"/terms\" className=\"text-primary hover:text-primary/80\">\n                      Terms of Service\n                    </Link>{' '}\n                    and{' '}\n                    <Link to=\"/privacy\" className=\"text-primary hover:text-primary/80\">\n                      Privacy Policy\n                    </Link>\n                  </Label>\n                </div>\n\n                <div className=\"flex items-start space-x-2\">\n                  <Checkbox\n                    id=\"receiveUpdates\"\n                    checked={formData.receiveUpdates}\n                    onCheckedChange={(checked) => setFormData({...formData, receiveUpdates: checked as boolean})}\n                  />\n                  <Label htmlFor=\"receiveUpdates\" className=\"text-sm text-muted-foreground\">\n                    I'd like to receive updates about new plans and special offers\n                  </Label>\n                </div>\n              </div>\n              {error && <p className=\"text-sm text-red-500 text-center\">{error}</p>}\n\n              {/* Submit Button */}\n              <Button type=\"submit\" variant=\"cta\" size=\"lg\" className=\"w-full\" disabled={loading}>\n                {loading ? 'Creating Account...' : 'Create Account'}\n              </Button>\n            </form>\n\n            {/* Divider */}\n            <div className=\"relative my-6\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-border\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"bg-card px-4 text-muted-foreground\">Or sign up with</span>\n              </div>\n            </div>\n\n            {/* Social Registration */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button variant=\"outline\" size=\"lg\">\n                <svg className=\"h-5 w-5 mr-2\" viewBox=\"0 0 24 24\">\n                  <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                Google\n              </Button>\n              <Button variant=\"outline\" size=\"lg\">\n                <svg className=\"h-5 w-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                </svg>\n                Facebook\n              </Button>\n            </div>\n\n            {/* Sign In Link */}\n            <div className=\"text-center mt-6\">\n              <p className=\"text-sm text-muted-foreground\">\n                Already have an account?{' '}\n                <Link to=\"/login\" className=\"text-primary hover:text-primary/80 font-medium transition-colors\">\n                  Sign in\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Trust Indicators */}\n        <div className=\"mt-6 text-center\">\n          <div className=\"flex items-center justify-center gap-4 text-xs text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n              <span>Secure & Private</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 bg-primary rounded-full\" />\n              <span>Join 2000+ Users</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;","size_bytes":14521},"client/src/pages/Services.tsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Building2, \n  Palette, \n  Ruler, \n  FileText, \n  Phone, \n  Mail, \n  ArrowRight,\n  CheckCircle,\n  Users,\n  Clock,\n  Award,\n  Home,\n  Eye,\n  Settings,\n  Briefcase,\n  Target,\n  Heart,\n  Shield,\n  Truck\n} from 'lucide-react';\n\nconst Services = () => {\n  const services = [\n    {\n      icon: Briefcase,\n      title: 'Project Management',\n      description: 'Our project management experts offer a flexible and highly bespoke service based on a robust and well proven formula for delivery. Our team of Project Managers are highly trained in project management softwares for drawing up project plans and sophisticated schedules for complex projects.',\n      pricing: 'Cost based on project level and complexity - clients assured of good deals',\n      features: [\n        'Flexible and bespoke service delivery',\n        'Project planning and sophisticated scheduling',\n        'Complex project management',\n        'Robust delivery formulas',\n        'Professional project management software expertise'\n      ]\n    },\n    {\n      icon: Building2,\n      title: 'Architectural Designs',\n      description: 'Our teams of Architects endeavor to create sustainable modern green buildings that are functional, structurally sound, aesthetically pleasing and also within the cost and budget of the client.',\n      pricing: 'GHS 70 per square meter for residential projects - cost varies by project complexity',\n      features: [\n        'Sustainable modern green buildings',\n        'Functional and structurally sound designs',\n        'Aesthetically pleasing architecture',\n        'Budget-conscious planning',\n        'Client-focused design approach'\n      ]\n    },\n    {\n      icon: Ruler,\n      title: 'Structural Designs',\n      description: 'Our team of Structural Engineers work along with Architects, and other professionals such as Geotechnical engineers and use their findings to design the most suitable and robust structures for your building.',\n      pricing: 'GHS 70 per square meter for residential projects - cost varies by project complexity',\n      features: [\n        'Collaboration with Architects and Geotechnical engineers',\n        'Robust structural design',\n        'Suitable building structures',\n        'Professional engineering expertise',\n        'Comprehensive structural analysis'\n      ]\n    },\n    {\n      icon: FileText,\n      title: 'Cost Planning and Quantity Surveying',\n      description: 'Our cost planning experts work along with the Architects and Engineers and other professionals to plan the Cost of a project and achieve a design within the clients\\' budget. They also provide cost estimates, tender and contract documents.',\n      pricing: 'Cost based on project level and complexity - clients assured of good deals',\n      features: [\n        'Project cost planning',\n        'Budget-conscious design achievement',\n        'Cost estimates and tender documents',\n        'Contract documentation',\n        'Professional quantity surveying'\n      ]\n    },\n    {\n      icon: Shield,\n      title: 'Contract Administration',\n      description: 'SAK Construction-gh unites a team of construction professionals which makes possible to administer any contract be it big or small. Our team prepares, monitors and administers the tendering and contract award process.',\n      pricing: 'Cost based on project level and complexity - clients assured of good deals',\n      features: [\n        'Contract administration for all project sizes',\n        'Tendering process management',\n        'Contract award monitoring',\n        'Professional construction team',\n        'Start-to-finish contract oversight'\n      ]\n    },\n    {\n      icon: Eye,\n      title: 'Construction Supervision',\n      description: 'We use our expertise and knowledge of the entire construction cycle to develop sound strategies which are then translated into fully achievable programs and plans to monitor and supervise contractors/construction teams.',\n      pricing: 'Cost based on project level and complexity - clients assured of good deals',\n      features: [\n        'Entire construction cycle expertise',\n        'Sound strategy development',\n        'Achievable program planning',\n        'Contractor supervision',\n        'Construction team monitoring'\n      ]\n    },\n    {\n      icon: Target,\n      title: 'Strategic Sourcing and Procurement',\n      description: 'SAK Construction-gh also has a team of procurement experts that help in the global sourcing of products for the use of construction and non-construction related purposes.',\n      pricing: 'Cost based on project level and complexity - clients assured of good deals',\n      features: [\n        'Global product sourcing',\n        'Construction material procurement',\n        'Non-construction product sourcing',\n        'Procurement expertise',\n        'Strategic sourcing solutions'\n      ]\n    },\n    {\n      icon: Heart,\n      title: 'Cost Management',\n      description: 'SAK Construction-gh offers contract service team which provides project cost management, contractual assurance to our clients through intelligent procurement, contract management and dispute resolution.',\n      pricing: 'Cost based on project level and complexity - clients assured of good deals',\n      features: [\n        'Project cost management',\n        'Contractual assurance',\n        'Intelligent procurement',\n        'Contract management',\n        'Dispute resolution'\n      ]\n    },\n    {\n      icon: Truck,\n      title: 'General Construction and Roads',\n      description: 'SAK Construction-gh acquired K3 D3 contractor\\'s license from Ministry of Works & Housing. We plan, design and deliver projects within constraints of time, cost and specifications. Quality is our hallmark.',\n      pricing: 'Cost based on project level and complexity - clients assured of good deals',\n      features: [\n        'K3 D3 contractor\\'s license',\n        'One-stop service provider',\n        'Time, cost and specification management',\n        'Quality-focused delivery',\n        'Plant and machinery equipped'\n      ]\n    },\n    {\n      icon: Award,\n      title: 'Refurbishments',\n      description: 'Our design and Construction team work hand in hand with the clients to plan, design and execute demolishing and refurbishment project. We pride in our ability to deliver very beautiful finishes for very complex projects.',\n      pricing: 'Cost based on project level and complexity - clients assured of good deals',\n      features: [\n        'Demolition and refurbishment planning',\n        'Design and execution services',\n        'Beautiful finish delivery',\n        'Complex project handling',\n        'Client collaboration approach'\n      ]\n    },\n    {\n      icon: Settings,\n      title: 'Construction Quality Control and Quality Assurance',\n      description: 'Our team undertakes Construction Quality control and Quality assurance on new and ongoing projects to achieve quality works and completion that match international standards.',\n      pricing: 'Cost based on project level and complexity - clients assured of good deals',\n      features: [\n        'Quality control on new projects',\n        'Quality assurance on ongoing projects',\n        'International standards compliance',\n        'Quality works achievement',\n        'Project completion quality assurance'\n      ]\n    }\n  ];\n\n  const process = [\n    {\n      step: '01',\n      title: 'Initial Consultation',\n      description: 'We discuss your vision, requirements, and budget to understand your project needs.'\n    },\n    {\n      step: '02',\n      title: 'Site Analysis',\n      description: 'Our team visits your plot to assess conditions, constraints, and opportunities.'\n    },\n    {\n      step: '03',\n      title: 'Design Development',\n      description: 'We create detailed designs and plans based on your requirements and site conditions.'\n    },\n    {\n      step: '04',\n      title: 'Construction Planning',\n      description: 'Comprehensive planning including timelines, budgets, and resource allocation.'\n    },\n    {\n      step: '05',\n      title: 'Construction & Supervision',\n      description: 'Professional construction with continuous supervision and quality control.'\n    },\n    {\n      step: '06',\n      title: 'Project Completion',\n      description: 'Final inspection, handover, and post-construction support.'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-muted/20\">\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-r from-primary/10 to-secondary/10\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Badge variant=\"secondary\" className=\"mb-4\">\n              Our Services\n            </Badge>\n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n              Smart Modular Plans and \n              <span className=\"text-primary\"> Comprehensive Services</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground leading-relaxed mb-8\">\n              From project management to construction completion, we provide comprehensive \n              construction services with transparent pricing and quality assurance to bring your vision to life.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" asChild>\n                <Link to=\"/contact\">Get Started</Link>\n              </Button>\n              <Button variant=\"outline\" size=\"lg\">\n                View Portfolio\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-20\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Our Comprehensive Services\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              From project management to construction completion, we provide 11 comprehensive services \n              with transparent pricing and quality assurance\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.map((service, index) => (\n              <Card key={index} className=\"border-0 shadow-lg hover:shadow-xl transition-all duration-300\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-center w-16 h-16 bg-primary/10 rounded-xl mb-4 mx-auto\">\n                    <service.icon className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-xl text-center\">{service.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription className=\"text-base mb-4 leading-relaxed\">\n                    {service.description}\n                  </CardDescription>\n                  <div className=\"bg-primary/5 rounded-lg p-3 mb-4\">\n                    <p className=\"text-sm font-semibold text-primary\">\n                      {service.pricing}\n                    </p>\n                  </div>\n                  <ul className=\"space-y-2\">\n                    {service.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-start space-x-2\">\n                        <CheckCircle className=\"w-4 h-4 text-primary mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-sm text-muted-foreground\">\n                          {feature}\n                        </span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Our Process\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              A systematic approach to ensure your project is completed successfully\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {process.map((step, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-16 h-16 bg-primary text-primary-foreground rounded-full flex items-center justify-center mx-auto mb-4 text-xl font-bold\">\n                  {step.step}\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n                  {step.title}\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  {step.description}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Card className=\"border-0 shadow-2xl bg-gradient-to-r from-primary/10 to-secondary/10\">\n              <CardContent className=\"p-12\">\n                <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n                  Ready to Start Your Project?\n                </h2>\n                <p className=\"text-lg text-muted-foreground mb-8\">\n                  Contact us today for a free consultation and let's discuss how we can help bring your vision to life.\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <Button size=\"lg\" asChild>\n                    <Link to=\"/contact\">Get Free Consultation</Link>\n                  </Button>\n                  <Button variant=\"outline\" size=\"lg\" asChild>\n                    <Link to=\"/plans\">View Plans</Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Services;\n","size_bytes":14569},"client/src/pages/Terms.tsx":{"content":"import { \n  FileText, \n  Shield, \n  Users, \n  CreditCard, \n  Download, \n  Building2,\n  CheckCircle,\n  AlertTriangle,\n  ArrowRight,\n  Mail\n} from 'lucide-react';\nimport Header from '@/components/Header';\n\nimport { Button } from '@/components/ui/button';\n\nconst Terms = () => {\n  const sections = [\n    {\n      title: \"Acceptance of Terms\",\n      content: \"By accessing and using SAK Constructions' website and services, you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\",\n      icon: CheckCircle\n    },\n    {\n      title: \"Service Description\",\n      content: \"SAK Constructions provides architectural house plans, design services, and related construction support. Our services include the sale and licensing of house plans, 3D renderings, and technical specifications for residential construction projects.\",\n      icon: Building2\n    },\n    {\n      title: \"User Accounts\",\n      content: \"To access certain features of our service, you must create an account. You are responsible for maintaining the confidentiality of your account information and for all activities that occur under your account.\",\n      icon: Users\n    },\n    {\n      title: \"Payment Terms\",\n      content: \"All purchases are final and non-refundable except as provided in our refund policy. Prices are subject to change without notice. Payment must be completed before access to purchased plans is granted.\",\n      icon: CreditCard\n    },\n    {\n      title: \"License and Usage\",\n      content: \"Purchased plans are licensed for single-use construction projects. Plans may not be resold, redistributed, or used for multiple projects without additional licensing. Modifications are permitted for personal use only.\",\n      icon: Download\n    },\n    {\n      title: \"Intellectual Property\",\n      content: \"All house plans, designs, and related materials are the exclusive property of SAK Constructions and are protected by copyright laws. Unauthorized use, reproduction, or distribution is strictly prohibited.\",\n      icon: Shield\n    }\n  ];\n\n  const importantNotes = [\n    \"Plans are for residential use only and may require local building permits\",\n    \"We are not responsible for construction costs or project outcomes\",\n    \"Local building codes and regulations must be followed\",\n    \"Professional consultation may be required for complex projects\",\n    \"All measurements and specifications are approximate\"\n  ];\n\n  const contactInfo = {\n          email: \"sakconstructiongh@gmail.com\",\n            phone: \"0246798967\",\n          address: \"Tema com 25, Greater Accra, around Devtraco Estates\"\n  };\n\n  return (\n    <>\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 bg-gradient-to-br from-background via-background to-accent/10\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground\">\n              Terms of\n              <span className=\"block gradient-text\"> Service</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Please read these terms carefully before using our services. By using our platform, you agree to be bound by these terms.\n            </p>\n            <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground\">\n              <FileText className=\"w-4 h-4\" />\n              <span>Last updated: {new Date().toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto space-y-12\">\n            \n            {/* Introduction */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Introduction</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                These Terms of Service (\"Terms\") govern your use of the SAK Constructions website and services. \n                By accessing or using our services, you agree to be bound by these Terms. If you disagree with any \n                part of these terms, then you may not access our services.\n              </p>\n            </div>\n\n            {/* Key Sections */}\n            <div className=\"space-y-6\">\n              {sections.map((section, index) => {\n                const Icon = section.icon;\n                return (\n                  <div key={index} className=\"admin-card\">\n                    <div className=\"flex items-start gap-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-xl flex items-center justify-center flex-shrink-0\">\n                        <Icon className=\"w-6 h-6 text-primary\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-semibold text-foreground mb-3\">\n                          {section.title}\n                        </h3>\n                        <p className=\"text-muted-foreground leading-relaxed\">\n                          {section.content}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Important Notes */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-6 flex items-center gap-2\">\n                <AlertTriangle className=\"w-6 h-6 text-warning\" />\n                Important Notes\n              </h2>\n              <div className=\"space-y-3\">\n                {importantNotes.map((note, index) => (\n                  <div key={index} className=\"flex items-start gap-3\">\n                    <div className=\"w-2 h-2 bg-warning rounded-full mt-2 flex-shrink-0\"></div>\n                    <p className=\"text-muted-foreground\">{note}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Refund Policy */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Refund Policy</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                We offer a 30-day money-back guarantee for all purchases. If you are not satisfied with your \n                purchase, contact us within 30 days of your purchase date for a full refund. Refunds will be \n                processed within 5-7 business days.\n              </p>\n              <div className=\"bg-muted/30 rounded-lg p-4\">\n                <h3 className=\"font-semibold text-foreground mb-2\">Refund Conditions:</h3>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>‚Ä¢ Request must be made within 30 days of purchase</li>\n                  <li>‚Ä¢ Plans must not have been downloaded or used</li>\n                  <li>‚Ä¢ Valid reason for refund must be provided</li>\n                  <li>‚Ä¢ One refund per customer per plan</li>\n                </ul>\n              </div>\n            </div>\n\n            {/* Limitation of Liability */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Limitation of Liability</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                SAK Constructions shall not be liable for any indirect, incidental, special, consequential, \n                or punitive damages, including without limitation, loss of profits, data, use, goodwill, or \n                other intangible losses, resulting from your use of our services.\n              </p>\n            </div>\n\n            {/* Changes to Terms */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Changes to Terms</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We reserve the right to modify or replace these Terms at any time. If a revision is material, \n                we will try to provide at least 30 days notice prior to any new terms taking effect. What \n                constitutes a material change will be determined at our sole discretion.\n              </p>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"admin-card\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-6\">Contact Information</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                If you have any questions about these Terms of Service, please contact us:\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <Mail className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"font-medium text-foreground\">Email</p>\n                  <a href={`mailto:${contactInfo.email}`} className=\"text-primary hover:text-primary/80 text-sm\">\n                    {contactInfo.email}\n                  </a>\n                </div>\n                <div className=\"text-center\">\n                  <Building2 className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"font-medium text-foreground\">Phone</p>\n                  <a href={`tel:${contactInfo.phone}`} className=\"text-primary hover:text-primary/80 text-sm\">\n                    {contactInfo.phone}\n                  </a>\n                </div>\n                <div className=\"text-center\">\n                  <Shield className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"font-medium text-foreground\">Address</p>\n                  <p className=\"text-muted-foreground text-sm\">{contactInfo.address}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-secondary/5\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto space-y-8\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground\">\n              Ready to Get Started?\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Now that you understand our terms, explore our collection of professional house plans and start building your dream home.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <a\n                href=\"/plans\"\n                className=\"btn-primary text-lg px-8 py-4 inline-flex items-center gap-2\"\n              >\n                Browse Plans\n                <ArrowRight className=\"w-5 h-5\" />\n              </a>\n              <a\n                href=\"/contact\"\n                className=\"btn-outline-modern text-lg px-8 py-4\"\n              >\n                Contact Support\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n    </>\n  );\n};\n\nexport default Terms;\n","size_bytes":11272},"client/src/pages/UserDashboard.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  User, \n  Heart, \n  ShoppingBag, \n  Settings, \n  Download, \n  Star, \n  Calendar,\n  MapPin,\n  Phone,\n  Mail,\n  Edit,\n  Plus,\n  ArrowRight,\n  Home,\n  FileText,\n  CreditCard\n} from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport villaImage from '@/assets/villa-plan.jpg';\nimport bungalowImage from '@/assets/bungalow-plan.jpg';\nimport townhouseImage from '@/assets/townhouse-plan.jpg';\nimport UserHeader from '@/components/UserHeader';\n\nconst UserDashboard = () => {\n  const { user, profile, signOut } = useAuth();\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('overview');\n  const [userStats, setUserStats] = useState({\n    totalOrders: 0,\n    totalSpent: 0,\n    favoritePlans: 0,\n    downloads: 0\n  });\n  const [recentOrders, setRecentOrders] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      fetchUserData();\n    }\n  }, [user]);\n\n  const fetchUserData = async () => {\n    if (!user) return;\n    \n    try {\n      // Fetch user analytics from API\n      const analyticsResponse = await fetch(`/api/analytics/user/${user.id}`);\n      if (!analyticsResponse.ok) throw new Error('Failed to fetch user analytics');\n      \n      const analytics = await analyticsResponse.json();\n      \n      setUserStats({\n        totalOrders: analytics.totalOrders || 0,\n        totalSpent: analytics.totalSpent || 0,\n        favoritePlans: 0, // TODO: Implement favorites\n        downloads: analytics.totalDownloads || 0\n      });\n\n      setRecentOrders(analytics.recentOrders || []);\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  const favoritePlans = [\n    {\n      id: 1,\n      title: 'Luxury Villa Paradise',\n      type: 'Villa',\n      bedrooms: 5,\n      bathrooms: 4,\n      area: 3200,\n      price: 4500,\n      image: villaImage\n    },\n    {\n      id: 7,\n      title: 'Modern Family Bungalow',\n      type: 'Bungalow',\n      bedrooms: 3,\n      bathrooms: 2,\n      area: 1800,\n      price: 3100,\n      image: bungalowImage\n    },\n    {\n      id: 13,\n      title: 'Contemporary Townhouse',\n      type: 'Townhouse',\n      bedrooms: 4,\n      bathrooms: 3,\n      area: 2400,\n      price: 3800,\n      image: townhouseImage\n    }\n  ];\n\n  const recentActivity = [\n    {\n      type: 'purchase',\n      message: 'Purchased Luxury Villa Paradise - Premium Package',\n      date: '2024-01-15',\n      amount: 4500\n    },\n    {\n      type: 'favorite',\n      message: 'Added Modern Family Bungalow to favorites',\n      date: '2024-01-12'\n    },\n    {\n      type: 'download',\n      message: 'Downloaded Contemporary Townhouse plans',\n      date: '2024-01-10'\n    },\n    {\n      type: 'purchase',\n      message: 'Purchased Modern Family Bungalow - Standard Package',\n      date: '2024-01-10',\n      amount: 2300\n    }\n  ];\n\n  useEffect(() => {\n    if (!user) {\n      navigate('/');\n    }\n  }, [user, navigate]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Use mock profile data if real profile is not available\n  const userProfile = profile || {\n    id: 'mock-id',\n    user_id: user?.id || '',\n    email: user?.email || '',\n    first_name: 'John',\n    last_name: 'Doe',\n    role: 'user' as const,\n    avatar_url: undefined\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'processing':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'pending':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'purchase':\n        return <ShoppingBag className=\"h-4 w-4\" />;\n      case 'favorite':\n        return <Heart className=\"h-4 w-4\" />;\n      case 'download':\n        return <Download className=\"h-4 w-4\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-construction-gray-light\">\n      <UserHeader \n        title={`Welcome back, ${userProfile.first_name || 'User'}!`}\n        subtitle=\"Manage your account, view orders, and explore plans\"\n        showBackButton={false}\n        showUserInfo={false}\n        actions={\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"outline\" asChild>\n              <Link to=\"/plans\">\n                <Plus className=\"h-4 h-4 mr-2\" />\n                Browse Plans\n              </Link>\n            </Button>\n            <Button variant=\"outline\" onClick={signOut}>\n              Sign Out\n            </Button>\n          </div>\n        }\n      />\n\n      {/* Dashboard Content */}\n      <section className=\"py-16\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-7xl mx-auto\">\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-8\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n                <TabsTrigger value=\"favorites\">Favorites</TabsTrigger>\n                <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\" className=\"space-y-8\">\n                {/* Stats Cards */}\n                <div className=\"grid md:grid-cols-4 gap-6\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"p-3 bg-primary/10 rounded-lg\">\n                          <ShoppingBag className=\"h-6 w-6 text-primary\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Total Orders</p>\n                          <p className=\"text-2xl font-bold\">{userStats.totalOrders}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"p-3 bg-green-500/10 rounded-lg\">\n                          <CreditCard className=\"h-6 w-6 text-green-500\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Total Spent</p>\n                          <p className=\"text-2xl font-bold\">‚Çµ{userStats.totalSpent.toLocaleString()}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"p-3 bg-red-500/10 rounded-lg\">\n                          <Heart className=\"h-6 w-6 text-red-500\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Favorite Plans</p>\n                          <p className=\"text-2xl font-bold\">{userStats.favoritePlans}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"p-3 bg-blue-500/10 rounded-lg\">\n                          <Download className=\"h-6 w-6 text-blue-500\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Downloads</p>\n                          <p className=\"text-2xl font-bold\">{userStats.downloads}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Recent Orders & Quick Actions */}\n                <div className=\"grid lg:grid-cols-2 gap-8\">\n                  {/* Recent Orders */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <ShoppingBag className=\"h-5 w-5\" />\n                        Recent Orders\n                      </CardTitle>\n                      <CardDescription>Your latest plan purchases</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {recentOrders.slice(0, 3).map((order) => (\n                          <div key={order.id} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                            <img\n                              src={order.plans?.image_url || villaImage}\n                              alt={order.plans?.title}\n                              className=\"w-16 h-16 object-cover rounded-lg\"\n                            />\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium\">{order.plans?.title}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{order.tier} Package</p>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Badge className={getStatusColor(order.status)}>\n                                  {order.status}\n                                </Badge>\n                                <span className=\"text-sm text-muted-foreground\">‚Çµ{order.amount}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                      <Button variant=\"outline\" className=\"w-full mt-4\" asChild>\n                        <Link to=\"/user/orders\">\n                          View All Orders\n                          <ArrowRight className=\"h-4 w-4 ml-2\" />\n                        </Link>\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  {/* Quick Actions */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Settings className=\"h-5 w-5\" />\n                        Quick Actions\n                      </CardTitle>\n                      <CardDescription>Common tasks and shortcuts</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid gap-3\">\n                        <Button variant=\"outline\" className=\"justify-start\" asChild>\n                          <Link to=\"/plans\">\n                            <Home className=\"h-4 w-4 mr-3\" />\n                            Browse House Plans\n                          </Link>\n                        </Button>\n                        <Button variant=\"outline\" className=\"justify-start\" asChild>\n                          <Link to=\"/user/favorites\">\n                            <Heart className=\"h-4 w-4 mr-3\" />\n                            View Favorites\n                          </Link>\n                        </Button>\n                        <Button variant=\"outline\" className=\"justify-start\" asChild>\n                          <Link to=\"/user/profile\">\n                            <User className=\"h-4 w-4 mr-3\" />\n                            Edit Profile\n                          </Link>\n                        </Button>\n                        <Button variant=\"outline\" className=\"justify-start\" asChild>\n                          <Link to=\"/user/settings\">\n                            <Settings className=\"h-4 w-4 mr-3\" />\n                            Account Settings\n                          </Link>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"orders\" className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-xl font-semibold\">Order History</h3>\n                  <Button asChild>\n                    <Link to=\"/plans\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Browse More Plans\n                    </Link>\n                  </Button>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {recentOrders.map((order) => (\n                    <Card key={order.id}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center gap-6\">\n                          <img\n                            src={order.image}\n                            alt={order.planTitle}\n                            className=\"w-24 h-24 object-cover rounded-lg\"\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h4 className=\"text-lg font-semibold\">{order.planTitle}</h4>\n                              <Badge className={getStatusColor(order.status)}>\n                                {order.status}\n                              </Badge>\n                            </div>\n                            <p className=\"text-muted-foreground mb-2\">{order.package}</p>\n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                              <span>Order ID: {order.id}</span>\n                              <span>Date: {new Date(order.date).toLocaleDateString()}</span>\n                              <span className=\"font-semibold text-foreground\">‚Çµ{order.amount}</span>\n                            </div>\n                          </div>\n                          <Button variant=\"outline\" asChild>\n                            <Link to={`/plans/${order.id}`}>View Plan</Link>\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"favorites\" className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-xl font-semibold\">Favorite Plans</h3>\n                  <Button asChild>\n                    <Link to=\"/plans\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Browse More Plans\n                    </Link>\n                  </Button>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {favoritePlans.map((plan) => (\n                    <Card key={plan.id} className=\"group hover:shadow-construction transition-all duration-300\">\n                      <div className=\"relative h-48 overflow-hidden\">\n                        <img\n                          src={plan.image}\n                          alt={plan.title}\n                          className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n                        />\n                        <div className=\"absolute top-2 right-2\">\n                          <Button size=\"sm\" variant=\"secondary\" className=\"h-8 w-8 p-0\">\n                            <Heart className=\"h-4 w-4 fill-current text-red-500\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <CardHeader>\n                        <CardTitle className=\"text-lg\">{plan.title}</CardTitle>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <Home className=\"h-4 w-4\" />\n                            {plan.bedrooms}\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Star className=\"h-4 w-4\" />\n                            {plan.bathrooms}\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <FileText className=\"h-4 w-4\" />\n                            {plan.area} sq ft\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-lg font-semibold text-primary\">\n                            ‚Çµ{plan.price}\n                          </span>\n                          <Button variant=\"outline\" size=\"sm\" asChild>\n                            <Link to={`/plans/${plan.id}`}>View Details</Link>\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"activity\" className=\"space-y-6\">\n                <h3 className=\"text-xl font-semibold\">Recent Activity</h3>\n                <div className=\"space-y-4\">\n                  {recentActivity.map((activity, index) => (\n                    <Card key={index}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"p-2 bg-primary/10 rounded-lg\">\n                            {getActivityIcon(activity.type)}\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium\">{activity.message}</p>\n                            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                              <Calendar className=\"h-4 w-4\" />\n                              {new Date(activity.date).toLocaleDateString()}\n                              {activity.amount && (\n                                <span className=\"font-semibold text-foreground\">‚Çµ{activity.amount}</span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default UserDashboard;\n","size_bytes":19980},"client/src/pages/UserFavorites.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  ArrowLeft, \n  Search, \n  Filter, \n  Heart, \n  Eye, \n  ShoppingBag,\n  Plus,\n  Trash2,\n  Star,\n  Bed,\n  Bath,\n  Square,\n  Home,\n  Building,\n  MapPin,\n  Calendar\n} from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport UserHeader from '@/components/UserHeader';\nimport villaImage from '@/assets/villa-plan.jpg';\nimport bungalowImage from '@/assets/bungalow-plan.jpg';\nimport townhouseImage from '@/assets/townhouse-plan.jpg';\n\nconst UserFavorites = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [priceFilter, setPriceFilter] = useState('all');\n  const [favorites, setFavorites] = useState<any[]>([]);\n\n  // Mock favorites data - in a real app, this would come from your backend\n  const mockFavorites = [\n    {\n      id: 1,\n      title: 'Luxury Villa Paradise',\n      type: 'Villa',\n      bedrooms: 5,\n      bathrooms: 4,\n      area: 3200,\n      price: 4500,\n      image: villaImage,\n      architect: 'Samuel Kwame Architecture',\n      rating: 4.9,\n      reviews: 47,\n      addedDate: '2024-01-15',\n      featured: true,\n      description: 'This stunning luxury villa combines contemporary African design with modern amenities.'\n    },\n    {\n      id: 7,\n      title: 'Modern Family Bungalow',\n      type: 'Bungalow',\n      bedrooms: 3,\n      bathrooms: 2,\n      area: 1800,\n      price: 3100,\n      image: bungalowImage,\n      architect: 'Ama Osei Architecture',\n      rating: 4.7,\n      reviews: 34,\n      addedDate: '2024-01-12',\n      featured: false,\n      description: 'A modern family bungalow designed for comfort and functionality.'\n    },\n    {\n      id: 13,\n      title: 'Contemporary Townhouse',\n      type: 'Townhouse',\n      bedrooms: 4,\n      bathrooms: 3,\n      area: 2400,\n      price: 3800,\n      image: townhouseImage,\n      architect: 'Kwame Asante Architecture',\n      rating: 4.8,\n      reviews: 41,\n      addedDate: '2024-01-10',\n      featured: true,\n      description: 'A contemporary townhouse designed for urban living with modern aesthetics.'\n    },\n    {\n      id: 2,\n      title: 'Executive Villa Estate',\n      type: 'Villa',\n      bedrooms: 6,\n      bathrooms: 5,\n      area: 4100,\n      price: 5500,\n      image: villaImage,\n      architect: 'Samuel Kwame Architecture',\n      rating: 4.9,\n      reviews: 52,\n      addedDate: '2024-01-08',\n      featured: false,\n      description: 'An executive villa designed for luxury living with premium finishes.'\n    },\n    {\n      id: 8,\n      title: 'Coastal Bungalow Retreat',\n      type: 'Bungalow',\n      bedrooms: 4,\n      bathrooms: 3,\n      area: 2200,\n      price: 2800,\n      image: bungalowImage,\n      architect: 'Ama Osei Architecture',\n      rating: 4.6,\n      reviews: 28,\n      addedDate: '2024-01-05',\n      featured: false,\n      description: 'A beautiful coastal bungalow with ocean views and modern amenities.'\n    },\n    {\n      id: 14,\n      title: 'Urban Townhouse Complex',\n      type: 'Townhouse',\n      bedrooms: 3,\n      bathrooms: 2,\n      area: 2000,\n      price: 3200,\n      image: townhouseImage,\n      architect: 'Kwame Asante Architecture',\n      rating: 4.5,\n      reviews: 35,\n      addedDate: '2024-01-03',\n      featured: false,\n      description: 'Modern urban townhouse perfect for city living.'\n    }\n  ];\n\n  useEffect(() => {\n    if (!user) {\n      navigate('/');\n      return;\n    }\n\n    // In a real app, you would fetch favorites from your backend\n    setFavorites(mockFavorites);\n  }, [user, navigate]);\n\n  const filteredFavorites = favorites.filter(favorite => {\n    const matchesSearch = favorite.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         favorite.architect.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = typeFilter === 'all' || favorite.type.toLowerCase() === typeFilter;\n    const matchesPrice = priceFilter === 'all' || \n                        (priceFilter === 'low' && favorite.price <= 3000) ||\n                        (priceFilter === 'medium' && favorite.price > 3000 && favorite.price <= 4500) ||\n                        (priceFilter === 'high' && favorite.price > 4500);\n    \n    return matchesSearch && matchesType && matchesPrice;\n  });\n\n  const removeFavorite = (planId: number) => {\n    setFavorites(prev => prev.filter(fav => fav.id !== planId));\n  };\n\n  const getTypeStats = () => {\n    const total = favorites.length;\n    const villas = favorites.filter(f => f.type === 'Villa').length;\n    const bungalows = favorites.filter(f => f.type === 'Bungalow').length;\n    const townhouses = favorites.filter(f => f.type === 'Townhouse').length;\n    const totalValue = favorites.reduce((sum, f) => sum + f.price, 0);\n\n    return { total, villas, bungalows, townhouses, totalValue };\n  };\n\n  const stats = getTypeStats();\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading favorites...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-construction-gray-light\">\n      <UserHeader \n        title=\"My Favorites\"\n        subtitle=\"Your saved house plans and designs\"\n        actions={\n          <Button asChild>\n            <Link to=\"/plans\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Browse More Plans\n            </Link>\n          </Button>\n        }\n      />\n\n      {/* Stats Cards */}\n      <section className=\"py-16\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-red-500/10 rounded-lg\">\n                      <Heart className=\"h-6 w-6 text-red-500\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Total Favorites</p>\n                      <p className=\"text-2xl font-bold\">{stats.total}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-primary/10 rounded-lg\">\n                      <Home className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Villas</p>\n                      <p className=\"text-2xl font-bold\">{stats.villas}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-green-500/10 rounded-lg\">\n                      <Building className=\"h-6 w-6 text-green-500\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Bungalows</p>\n                      <p className=\"text-2xl font-bold\">{stats.bungalows}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-blue-500/10 rounded-lg\">\n                      <MapPin className=\"h-6 w-6 text-blue-500\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Townhouses</p>\n                      <p className=\"text-2xl font-bold\">{stats.townhouses}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Favorites Content */}\n      <section className=\"py-16\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Filters */}\n            <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search favorites by plan name or architect...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <SelectValue placeholder=\"Filter by type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"villa\">Villas</SelectItem>\n                  <SelectItem value=\"bungalow\">Bungalows</SelectItem>\n                  <SelectItem value=\"townhouse\">Townhouses</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={priceFilter} onValueChange={setPriceFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <SelectValue placeholder=\"Filter by price\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Prices</SelectItem>\n                  <SelectItem value=\"low\">Under ‚Çµ3,000</SelectItem>\n                  <SelectItem value=\"medium\">‚Çµ3,000 - ‚Çµ4,500</SelectItem>\n                  <SelectItem value=\"high\">Over ‚Çµ4,500</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Favorites Grid */}\n            {filteredFavorites.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <Heart className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No favorites found</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    {searchTerm || typeFilter !== 'all' || priceFilter !== 'all'\n                      ? 'Try adjusting your search or filters'\n                      : 'You haven\\'t added any plans to your favorites yet'\n                    }\n                  </p>\n                  <Button asChild>\n                    <Link to=\"/plans\">Browse Plans</Link>\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredFavorites.map((plan) => (\n                  <Card key={plan.id} className=\"group hover:shadow-construction transition-all duration-300\">\n                    <div className=\"relative h-48 overflow-hidden\">\n                      <img\n                        src={plan.image}\n                        alt={plan.title}\n                        className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n                      />\n                      <div className=\"absolute top-2 right-2 flex gap-2\">\n                        {plan.featured && (\n                          <Badge className=\"bg-primary text-primary-foreground\">\n                            Featured\n                          </Badge>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"h-8 w-8 p-0 rounded-full bg-white/90 hover:bg-white\"\n                          onClick={() => removeFavorite(plan.id)}\n                        >\n                          <Heart className=\"h-4 w-4 fill-current text-red-500\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">{plan.title}</CardTitle>\n                      <CardDescription className=\"line-clamp-2\">\n                        {plan.description}\n                      </CardDescription>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\">\n                          <Bed className=\"h-4 w-4\" />\n                          {plan.bedrooms}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Bath className=\"h-4 w-4\" />\n                          {plan.bathrooms}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Square className=\"h-4 w-4\" />\n                          {plan.area} sq ft\n                        </div>\n                      </div>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center gap-2\">\n                          <Star className=\"h-4 w-4 fill-current text-yellow-400\" />\n                          <span className=\"text-sm font-medium\">{plan.rating}</span>\n                          <span className=\"text-sm text-muted-foreground\">({plan.reviews})</span>\n                        </div>\n                        <Badge variant=\"outline\">{plan.type}</Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-lg font-semibold text-primary\">‚Çµ{plan.price}</p>\n                          <p className=\"text-sm text-muted-foreground\">{plan.architect}</p>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" asChild>\n                            <Link to={`/plans/${plan.id}`}>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              View\n                            </Link>\n                          </Button>\n                          <Button size=\"sm\" asChild>\n                            <Link to={`/plans/${plan.id}`}>\n                              <ShoppingBag className=\"h-4 w-4 mr-2\" />\n                              Buy\n                            </Link>\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-4 pt-4 border-t\">\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>Added {new Date(plan.addedDate).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n\n            {/* Quick Actions */}\n            {filteredFavorites.length > 0 && (\n              <div className=\"mt-12\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Quick Actions</CardTitle>\n                    <CardDescription>\n                      Manage your favorites and discover new plans\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid md:grid-cols-3 gap-4\">\n                      <Button variant=\"outline\" className=\"justify-start\" asChild>\n                        <Link to=\"/plans\">\n                          <Plus className=\"h-4 w-4 mr-3\" />\n                          Browse More Plans\n                        </Link>\n                      </Button>\n                      <Button variant=\"outline\" className=\"justify-start\">\n                        <Trash2 className=\"h-4 w-4 mr-3\" />\n                        Clear All Favorites\n                      </Button>\n                      <Button variant=\"outline\" className=\"justify-start\">\n                        <Heart className=\"h-4 w-4 mr-3\" />\n                        Share Favorites\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default UserFavorites;\n","size_bytes":17483},"client/src/pages/UserOrders.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  ArrowLeft, \n  Search, \n  Filter, \n  Download, \n  Eye, \n  Calendar,\n  ShoppingBag,\n  CreditCard,\n  Truck,\n  CheckCircle,\n  Clock,\n  AlertCircle,\n  FileText,\n  Star,\n  Bed,\n  Bath,\n  Square,\n  X\n} from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport UserHeader from '@/components/UserHeader';\nimport villaImage from '@/assets/villa-plan.jpg';\nimport bungalowImage from '@/assets/bungalow-plan.jpg';\nimport townhouseImage from '@/assets/townhouse-plan.jpg';\n\nconst UserOrders = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [orders, setOrders] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [activeTab, setActiveTab] = useState('all');\n  const [selectedOrderForDownload, setSelectedOrderForDownload] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (user) {\n      fetchOrders();\n    }\n  }, [user]);\n\n  const fetchOrders = async () => {\n    if (!user) return;\n\n    try {\n      // Fetch real orders from API\n      const response = await fetch(`/api/orders?userId=${user.id}`);\n      if (!response.ok) throw new Error('Failed to fetch orders');\n      \n      const orders = await response.json();\n      \n      // Transform orders to match the expected format\n      const transformedOrders = await Promise.all(orders.map(async (order: any) => {\n        // Fetch plan details for each order\n        const planResponse = await fetch(`/api/plans/${order.plan_id}`);\n        const plan = await planResponse.json();\n        \n        return {\n          id: order.id,\n          planTitle: plan.title,\n          planType: plan.plan_type,\n          packageType: order.tier,\n          amount: parseFloat(order.amount),\n          paymentMethod: 'paystack',\n          status: order.status,\n          createdAt: new Date(order.created_at).toLocaleDateString(),\n          architect: 'SAKConstruction',\n          image: plan.image_url || villaImage, // Fallback to default image\n          bedrooms: plan.bedrooms,\n          bathrooms: plan.bathrooms,\n          area: plan.area_sqft,\n          downloadCount: 0, // TODO: Implement download tracking\n          downloadExpiry: null // TODO: Implement expiry logic\n        };\n      }));\n      \n      setOrders(transformedOrders);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      setOrders([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!user) {\n      navigate('/');\n    }\n  }, [user, navigate]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading orders...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'processing':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'pending':\n        return 'bg-blue-100 text-blue-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'processing':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'pending':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case 'cancelled':\n        return <X className=\"h-4 w-4\" />;\n      default:\n        return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const filteredOrders = orders.filter(order => {\n    const matchesSearch = order.plans?.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.id.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || order.status === statusFilter;\n    const matchesTab = activeTab === 'all' || order.status === activeTab;\n\n    return matchesSearch && matchesStatus && matchesTab;\n  });\n\n  const getOrderStats = () => {\n    const total = orders.length;\n    const completed = orders.filter(o => o.status === 'completed').length;\n    const processing = orders.filter(o => o.status === 'processing').length;\n    const pending = orders.filter(o => o.status === 'pending').length;\n    const totalSpent = orders.filter(o => o.status === 'completed').reduce((sum, o) => sum + o.amount, 0);\n\n    return { total, completed, processing, pending, totalSpent };\n  };\n\n  const stats = getOrderStats();\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading orders...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-construction-gray-light\">\n      <UserHeader \n        title=\"My Orders\"\n        subtitle=\"View and manage your plan purchases\"\n        actions={\n          <Button asChild>\n            <Link to=\"/plans\">\n              <ShoppingBag className=\"h-4 w-4 mr-2\" />\n              Browse More Plans\n            </Link>\n          </Button>\n        }\n      />\n\n      {/* Stats Cards */}\n      <section className=\"py-16\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-primary/10 rounded-lg\">\n                      <ShoppingBag className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Total Orders</p>\n                      <p className=\"text-2xl font-bold\">{stats.total}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-green-500/10 rounded-lg\">\n                      <CheckCircle className=\"h-6 w-6 text-green-500\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Completed</p>\n                      <p className=\"text-2xl font-bold\">{stats.completed}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-yellow-500/10 rounded-lg\">\n                      <Clock className=\"h-6 w-6 text-yellow-500\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Processing</p>\n                      <p className=\"text-2xl font-bold\">{stats.processing}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-blue-500/10 rounded-lg\">\n                      <CreditCard className=\"h-6 w-6 text-blue-500\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Total Spent</p>\n                      <p className=\"text-2xl font-bold\">‚Çµ{stats.totalSpent.toLocaleString()}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Orders Content */}\n      <section className=\"py-16\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-7xl mx-auto\">\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-8\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"all\">All Orders ({stats.total})</TabsTrigger>\n                <TabsTrigger value=\"completed\">Completed ({stats.completed})</TabsTrigger>\n                <TabsTrigger value=\"processing\">Processing ({stats.processing})</TabsTrigger>\n                <TabsTrigger value=\"pending\">Pending ({stats.pending})</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value={activeTab} className=\"space-y-6\">\n                {/* Filters */}\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <div className=\"relative flex-1\">\n                    <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search orders by plan name or order ID...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-full sm:w-48\">\n                      <Filter className=\"h-4 w-4 mr-2\" />\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"processing\">Processing</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Orders List */}\n                <div className=\"space-y-6\">\n                  {filteredOrders.length === 0 ? (\n                    <Card>\n                      <CardContent className=\"p-12 text-center\">\n                        <ShoppingBag className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">No orders found</h3>\n                        <p className=\"text-muted-foreground mb-6\">\n                          {searchTerm || statusFilter !== 'all' \n                            ? 'Try adjusting your search or filters'\n                            : 'You haven\\'t placed any orders yet'\n                          }\n                        </p>\n                        <Button asChild>\n                          <Link to=\"/plans\">Browse Plans</Link>\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    filteredOrders.map((order) => (\n                      <Card key={order.id} className=\"overflow-hidden\">\n                        <CardContent className=\"p-0\">\n                          <div className=\"flex flex-col lg:flex-row\">\n                            {/* Order Image */}\n                            <div className=\"lg:w-64 h-48 lg:h-auto\">\n                              <img\n                                src={order.image || villaImage}\n                                alt={order.planTitle}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n\n                            {/* Order Details */}\n                            <div className=\"flex-1 p-6\">\n                              <div className=\"flex items-start justify-between mb-4\">\n                                <div>\n                                  <h3 className=\"text-xl font-semibold mb-2\">{order.planTitle}</h3>\n                                  <p className=\"text-muted-foreground mb-2\">{order.packageType} Package</p>\n                                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                                    <span>Order ID: {order.id}</span>\n                                    <span>Date: {new Date(order.createdAt).toLocaleDateString()}</span>\n                                  </div>\n                                </div>\n                                <div className=\"text-right\">\n                                  <Badge className={`${getStatusColor(order.status)} mb-2`}>\n                                    {getStatusIcon(order.status)}\n                                    <span className=\"ml-1 capitalize\">{order.status}</span>\n                                  </Badge>\n                                  <p className=\"text-2xl font-bold text-primary\">‚Çµ{order.amount}</p>\n                                </div>\n                              </div>\n\n                              {/* Package Info */}\n                              <div className=\"mb-4\">\n                                <h4 className=\"font-medium mb-2\">Package Details:</h4>\n                                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Plan Type:</span> {order.planType}\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Bedrooms:</span> {order.bedrooms}\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Bathrooms:</span> {order.bathrooms}\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Area:</span> {order.area} sq ft\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Actions */}\n                              <div className=\"flex items-center justify-between pt-4 border-t\">\n                                <div className=\"flex gap-2\">\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <Eye className=\"w-3 h-3 mr-1\" />\n                                    View Details\n                                  </Button>\n                                  {order.status === 'completed' && (\n                                    <Button \n                                      variant=\"default\" \n                                      size=\"sm\"\n                                      asChild\n                                    >\n                                      <Link to={`/user/downloads/${order.id}`}>\n                                        <Download className=\"w-3 h-3 mr-1\" />\n                                        Download\n                                      </Link>\n                                    </Button>\n                                  )}\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <FileText className=\"h-4 w-4 mr-2\" />\n                                    Invoice\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default UserOrders;","size_bytes":16717},"client/src/pages/UserProfile.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  User, \n  Mail, \n  Phone, \n  MapPin, \n  Calendar,\n  Camera,\n  Save,\n  Edit,\n  X,\n  Check,\n  Shield,\n  Building\n} from 'lucide-react';\nimport { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport UserHeader from '@/components/UserHeader';\n\nconst UserProfile = () => {\n  const { user, profile, signOut } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isUploadingAvatar, setIsUploadingAvatar] = useState(false);\n  const [formData, setFormData] = useState({\n    first_name: '',\n    last_name: '',\n    email: '',\n    phone: '',\n    address: '',\n    city: '',\n    country: 'Ghana',\n    bio: '',\n    company: '',\n    website: ''\n  });\n  const [userStats, setUserStats] = useState({\n    totalOrders: 0,\n    totalSpent: 0,\n    favoritePlans: 0,\n    downloads: 0\n  });\n\n  useEffect(() => {\n    if (!user) {\n      navigate('/');\n      return;\n    }\n\n    setFormData({\n      first_name: profile?.first_name || '',\n      last_name: profile?.last_name || '',\n      email: profile?.email || user.email || '',\n      phone: profile?.phone || '',\n      address: profile?.address || '',\n      city: profile?.city || '',\n      country: profile?.country || 'Ghana',\n      bio: profile?.bio || '',\n      company: profile?.company || '',\n      website: profile?.website || ''\n    });\n\n    // Fetch real user statistics\n    if (user.id) {\n      fetchUserStats();\n    }\n  }, [user, profile, navigate]);\n\n  const fetchUserStats = async () => {\n    try {\n      const response = await fetch(`/api/analytics/user/${user.id}`);\n      if (response.ok) {\n        const analytics = await response.json();\n        setUserStats({\n          totalOrders: analytics.totalOrders || 0,\n          totalSpent: analytics.totalSpent || 0,\n          favoritePlans: 0, // TODO: Implement favorites API\n          downloads: analytics.totalDownloads || 0\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching user stats:', error);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSave = async () => {\n    setIsLoading(true);\n    try {\n      // Update profile in backend\n      const response = await fetch(`/api/profiles/${profile?.user_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Profile updated!\",\n          description: \"Your profile information has been saved successfully.\",\n        });\n        setIsEditing(false);\n      } else {\n        throw new Error('Failed to update profile');\n      }\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast({\n        title: \"Update failed\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    // Reset form data to original values\n    setFormData({\n      first_name: profile?.first_name || '',\n      last_name: profile?.last_name || '',\n      email: profile?.email || user?.email || '',\n      phone: profile?.phone || '',\n      address: profile?.address || '',\n      city: profile?.city || '',\n      country: profile?.country || 'Ghana',\n      bio: profile?.bio || '',\n      company: profile?.company || '',\n      website: profile?.website || ''\n    });\n    setIsEditing(false);\n  };\n\n  const handleAvatarClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleAvatarUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file (JPG, PNG, GIF, etc.)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Image size must be less than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploadingAvatar(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch('/api/upload/image', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to upload image');\n      }\n\n      const result = await response.json();\n      \n      // Update profile with new avatar URL\n      const updateResponse = await fetch(`/api/profiles/${profile?.user_id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          avatar_url: result.url\n        }),\n      });\n\n      if (updateResponse.ok) {\n        toast({\n          title: \"Avatar updated!\",\n          description: \"Your profile picture has been updated successfully.\",\n        });\n        // Refresh the page or update the profile state\n        window.location.reload();\n      } else {\n        throw new Error('Failed to update profile');\n      }\n    } catch (error) {\n      console.error('Error uploading avatar:', error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload avatar. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploadingAvatar(false);\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-construction-gray-light\">\n      <UserHeader \n        title=\"Profile Settings\"\n        subtitle=\"Manage your account information and preferences\"\n        actions={\n          !isEditing ? (\n            <Button onClick={() => setIsEditing(true)}>\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit Profile\n            </Button>\n          ) : (\n            <>\n              <Button variant=\"outline\" onClick={handleCancel} disabled={isLoading}>\n                <X className=\"h-4 w-4 mr-2\" />\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={isLoading}>\n                {isLoading ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <Check className=\"h-4 w-4 mr-2\" />\n                )}\n                Save Changes\n              </Button>\n            </>\n          )\n        }\n      />\n\n      {/* Profile Content */}\n      <section className=\"py-16\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              {/* Profile Card */}\n              <div className=\"lg:col-span-1\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"relative inline-block group\">\n                        <Avatar className=\"h-24 w-24 mx-auto transition-all duration-300 group-hover:scale-105\">\n                          <AvatarImage src={profile?.avatar_url} />\n                          <AvatarFallback className=\"text-2xl\">\n                            {profile?.first_name?.[0]}{profile?.last_name?.[0] || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        {isEditing && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"secondary\"\n                            className=\"absolute -bottom-2 -right-2 h-8 w-8 p-0 rounded-full shadow-lg hover:scale-110 transition-transform duration-200\"\n                            onClick={handleAvatarClick}\n                            disabled={isUploadingAvatar}\n                            title=\"Change avatar\"\n                          >\n                            {isUploadingAvatar ? (\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current\"></div>\n                            ) : (\n                              <Camera className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        )}\n                        \n                        {/* Hidden file input for avatar upload */}\n                        <input\n                          ref={fileInputRef}\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleAvatarUpload}\n                          className=\"hidden\"\n                        />\n                        \n                        {/* Upload hint */}\n                        {isEditing && (\n                          <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-full flex items-center justify-center\">\n                            <p className=\"text-white text-xs font-medium\">Click to change</p>\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <h2 className=\"text-xl font-semibold\">\n                          {profile?.first_name} {profile?.last_name}\n                        </h2>\n                        <p className=\"text-muted-foreground\">{profile?.email}</p>\n                        <Badge variant=\"secondary\" className=\"mt-2\">\n                          {profile?.role}\n                        </Badge>\n                      </div>\n\n                      <Separator />\n\n                                             <div className=\"space-y-3 text-sm\">\n                         <div className=\"flex items-center gap-2 text-muted-foreground\">\n                           <Calendar className=\"h-4 w-4\" />\n                           <span>Member since {user.created_at ? new Date(user.created_at).toLocaleDateString() : 'Recently'}</span>\n                         </div>\n                        {profile?.phone && (\n                          <div className=\"flex items-center gap-2 text-muted-foreground\">\n                            <Phone className=\"h-4 w-4\" />\n                            <span>{profile.phone}</span>\n                          </div>\n                        )}\n                        {profile?.city && (\n                          <div className=\"flex items-center gap-2 text-muted-foreground\">\n                            <MapPin className=\"h-4 w-4\" />\n                            <span>{profile.city}, {profile.country}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                                 {/* Account Stats */}\n                 <Card className=\"mt-6\">\n                   <CardHeader>\n                     <CardTitle className=\"text-lg\">Account Statistics</CardTitle>\n                   </CardHeader>\n                   <CardContent>\n                     <div className=\"space-y-4\">\n                       <div className=\"flex items-center justify-between\">\n                         <span className=\"text-sm text-muted-foreground\">Total Orders</span>\n                         <span className=\"font-semibold\">{userStats.totalOrders}</span>\n                       </div>\n                       <div className=\"flex items-center justify-between\">\n                         <span className=\"text-sm text-muted-foreground\">Favorite Plans</span>\n                         <span className=\"font-semibold\">{userStats.favoritePlans}</span>\n                       </div>\n                       <div className=\"flex items-center justify-between\">\n                         <span className=\"text-sm text-muted-foreground\">Downloads</span>\n                         <span className=\"font-semibold\">{userStats.downloads}</span>\n                       </div>\n                       <div className=\"flex items-center justify-between\">\n                         <span className=\"text-sm text-muted-foreground\">Total Spent</span>\n                         <span className=\"font-semibold\">‚Çµ{userStats.totalSpent.toLocaleString()}</span>\n                       </div>\n                     </div>\n                   </CardContent>\n                 </Card>\n              </div>\n\n              {/* Profile Form */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                {/* Personal Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <User className=\"h-5 w-5\" />\n                      Personal Information\n                    </CardTitle>\n                    <CardDescription>\n                      Update your personal details and contact information\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"first_name\">First Name</Label>\n                        <Input\n                          id=\"first_name\"\n                          value={formData.first_name}\n                          onChange={(e) => handleInputChange('first_name', e.target.value)}\n                          disabled={!isEditing}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"last_name\">Last Name</Label>\n                        <Input\n                          id=\"last_name\"\n                          value={formData.last_name}\n                          onChange={(e) => handleInputChange('last_name', e.target.value)}\n                          disabled={!isEditing}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={(e) => handleInputChange('email', e.target.value)}\n                        disabled={!isEditing}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"phone\">Phone Number</Label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        value={formData.phone}\n                        onChange={(e) => handleInputChange('phone', e.target.value)}\n                        disabled={!isEditing}\n                        placeholder=\"0246798967\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"bio\">Bio</Label>\n                      <Textarea\n                        id=\"bio\"\n                        value={formData.bio}\n                        onChange={(e) => handleInputChange('bio', e.target.value)}\n                        disabled={!isEditing}\n                        placeholder=\"Tell us about yourself...\"\n                        rows={3}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Address Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-5 w-5\" />\n                      Address Information\n                    </CardTitle>\n                    <CardDescription>\n                      Your location and address details\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"address\">Street Address</Label>\n                      <Input\n                        id=\"address\"\n                        value={formData.address}\n                        onChange={(e) => handleInputChange('address', e.target.value)}\n                        disabled={!isEditing}\n                        placeholder=\"Enter your street address\"\n                      />\n                    </div>\n\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"city\">City</Label>\n                        <Input\n                          id=\"city\"\n                          value={formData.city}\n                          onChange={(e) => handleInputChange('city', e.target.value)}\n                          disabled={!isEditing}\n                          placeholder=\"Accra\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"country\">Country</Label>\n                        <Input\n                          id=\"country\"\n                          value={formData.country}\n                          onChange={(e) => handleInputChange('country', e.target.value)}\n                          disabled={!isEditing}\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Professional Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Building className=\"h-5 w-5\" />\n                      Professional Information\n                    </CardTitle>\n                    <CardDescription>\n                      Your professional details and company information\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"company\">Company/Organization</Label>\n                      <Input\n                        id=\"company\"\n                        value={formData.company}\n                        onChange={(e) => handleInputChange('company', e.target.value)}\n                        disabled={!isEditing}\n                        placeholder=\"Your company name\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"website\">Website</Label>\n                      <Input\n                        id=\"website\"\n                        type=\"url\"\n                        value={formData.website}\n                        onChange={(e) => handleInputChange('website', e.target.value)}\n                        disabled={!isEditing}\n                        placeholder=\"https://yourwebsite.com\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Account Security */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Shield className=\"h-5 w-5\" />\n                      Account Security\n                    </CardTitle>\n                    <CardDescription>\n                      Manage your account security and privacy settings\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">Change Password</h4>\n                        <p className=\"text-sm text-muted-foreground\">Update your account password</p>\n                      </div>\n                      <Button variant=\"outline\">Change</Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">Two-Factor Authentication</h4>\n                        <p className=\"text-sm text-muted-foreground\">Add an extra layer of security</p>\n                      </div>\n                      <Button variant=\"outline\">Enable</Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">Account Deactivation</h4>\n                        <p className=\"text-sm text-muted-foreground\">Temporarily disable your account</p>\n                      </div>\n                      <Button variant=\"destructive\" onClick={signOut}>Sign Out</Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default UserProfile;","size_bytes":22350},"client/src/pages/UserSettings.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  ArrowLeft, \n  Settings, \n  Bell, \n  Shield, \n  Eye, \n  EyeOff,\n  Lock,\n  Mail,\n  Globe,\n  Palette,\n  Smartphone,\n  CreditCard,\n  Trash2,\n  Download,\n  Upload,\n  Save,\n  X,\n  Check,\n  AlertTriangle,\n  Info\n} from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\nimport UserHeader from '@/components/UserHeader';\n\nconst UserSettings = () => {\n  const { user, profile, signOut } = useAuth();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  \n  const [settings, setSettings] = useState({\n    // Notifications\n    emailNotifications: true,\n    smsNotifications: false,\n    marketingEmails: true,\n    orderUpdates: true,\n    newPlans: false,\n    priceAlerts: true,\n    \n    // Privacy\n    profileVisibility: 'public',\n    showEmail: false,\n    showPhone: false,\n    allowMessages: true,\n    \n    // Preferences\n    language: 'en',\n    currency: 'GHS',\n    timezone: 'Africa/Accra',\n    theme: 'system',\n    \n    // Security\n    twoFactorAuth: false,\n    loginAlerts: true,\n    sessionTimeout: '24h',\n    \n    // Data\n    autoBackup: true,\n    dataRetention: '2years'\n  });\n\n  const [passwordForm, setPasswordForm] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n\n  useEffect(() => {\n    if (!user) {\n      navigate('/');\n    }\n  }, [user, navigate]);\n\n  // Use mock profile data if real profile is not available\n  const userProfile = profile || {\n    id: 'mock-id',\n    user_id: user?.id || '',\n    email: user?.email || '',\n    first_name: 'John',\n    last_name: 'Doe',\n    role: 'user' as const,\n    avatar_url: undefined\n  };\n\n  const handleSettingChange = (key: string, value: any) => {\n    setSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  const handlePasswordChange = (field: string, value: string) => {\n    setPasswordForm(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const saveSettings = async () => {\n    setIsLoading(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      console.log('Settings saved:', settings);\n      // You could show a success toast here\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      // You could show an error toast here\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const changePassword = async () => {\n    if (passwordForm.newPassword !== passwordForm.confirmPassword) {\n      alert('New passwords do not match');\n      return;\n    }\n    \n    setIsLoading(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      console.log('Password changed');\n      setPasswordForm({\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      });\n      // You could show a success toast here\n    } catch (error) {\n      console.error('Error changing password:', error);\n      // You could show an error toast here\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const exportData = () => {\n    const data = {\n      profile: userProfile,\n      settings,\n      orders: [], // This would be fetched from your backend\n      favorites: [] // This would be fetched from your backend\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `user-data-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const deleteAccount = () => {\n    if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {\n      // Handle account deletion\n      console.log('Account deletion requested');\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-construction-gray-light\">\n      <UserHeader \n        title=\"Account Settings\"\n        subtitle=\"Manage your account preferences and security\"\n        actions={\n          <Button onClick={saveSettings} disabled={isLoading}>\n            {isLoading ? (\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n            ) : (\n              <Save className=\"h-4 w-4 mr-2\" />\n            )}\n            Save Changes\n          </Button>\n        }\n      />\n\n      {/* Settings Content */}\n      <section className=\"py-16\">\n        <div className=\"container px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              {/* Settings Navigation */}\n              <div className=\"lg:col-span-1\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Settings</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <nav className=\"space-y-2\">\n                      <a href=\"#notifications\" className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-muted transition-colors\">\n                        <Bell className=\"h-4 w-4\" />\n                        <span>Notifications</span>\n                      </a>\n                      <a href=\"#privacy\" className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-muted transition-colors\">\n                        <Eye className=\"h-4 w-4\" />\n                        <span>Privacy</span>\n                      </a>\n                      <a href=\"#preferences\" className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-muted transition-colors\">\n                        <Palette className=\"h-4 w-4\" />\n                        <span>Preferences</span>\n                      </a>\n                      <a href=\"#security\" className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-muted transition-colors\">\n                        <Shield className=\"h-4 w-4\" />\n                        <span>Security</span>\n                      </a>\n                      <a href=\"#data\" className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-muted transition-colors\">\n                        <Download className=\"h-4 w-4\" />\n                        <span>Data & Export</span>\n                      </a>\n                    </nav>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Settings Forms */}\n              <div className=\"lg:col-span-2 space-y-8\">\n                {/* Notifications */}\n                <Card id=\"notifications\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Bell className=\"h-5 w-5\" />\n                      Notifications\n                    </CardTitle>\n                    <CardDescription>\n                      Manage how you receive notifications and updates\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"email-notifications\">Email Notifications</Label>\n                          <p className=\"text-sm text-muted-foreground\">Receive notifications via email</p>\n                        </div>\n                        <Switch\n                          id=\"email-notifications\"\n                          checked={settings.emailNotifications}\n                          onCheckedChange={(checked) => handleSettingChange('emailNotifications', checked)}\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"sms-notifications\">SMS Notifications</Label>\n                          <p className=\"text-sm text-muted-foreground\">Receive notifications via SMS</p>\n                        </div>\n                        <Switch\n                          id=\"sms-notifications\"\n                          checked={settings.smsNotifications}\n                          onCheckedChange={(checked) => handleSettingChange('smsNotifications', checked)}\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"marketing-emails\">Marketing Emails</Label>\n                          <p className=\"text-sm text-muted-foreground\">Receive promotional emails and offers</p>\n                        </div>\n                        <Switch\n                          id=\"marketing-emails\"\n                          checked={settings.marketingEmails}\n                          onCheckedChange={(checked) => handleSettingChange('marketingEmails', checked)}\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"order-updates\">Order Updates</Label>\n                          <p className=\"text-sm text-muted-foreground\">Get notified about order status changes</p>\n                        </div>\n                        <Switch\n                          id=\"order-updates\"\n                          checked={settings.orderUpdates}\n                          onCheckedChange={(checked) => handleSettingChange('orderUpdates', checked)}\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"new-plans\">New Plans</Label>\n                          <p className=\"text-sm text-muted-foreground\">Get notified when new house plans are added</p>\n                        </div>\n                        <Switch\n                          id=\"new-plans\"\n                          checked={settings.newPlans}\n                          onCheckedChange={(checked) => handleSettingChange('newPlans', checked)}\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"price-alerts\">Price Alerts</Label>\n                          <p className=\"text-sm text-muted-foreground\">Get notified about price changes on favorited plans</p>\n                        </div>\n                        <Switch\n                          id=\"price-alerts\"\n                          checked={settings.priceAlerts}\n                          onCheckedChange={(checked) => handleSettingChange('priceAlerts', checked)}\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Privacy */}\n                <Card id=\"privacy\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Eye className=\"h-5 w-5\" />\n                      Privacy\n                    </CardTitle>\n                    <CardDescription>\n                      Control your privacy settings and profile visibility\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"profile-visibility\">Profile Visibility</Label>\n                        <Select value={settings.profileVisibility} onValueChange={(value) => handleSettingChange('profileVisibility', value)}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"public\">Public</SelectItem>\n                            <SelectItem value=\"private\">Private</SelectItem>\n                            <SelectItem value=\"friends\">Friends Only</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"show-email\">Show Email</Label>\n                          <p className=\"text-sm text-muted-foreground\">Allow others to see your email address</p>\n                        </div>\n                        <Switch\n                          id=\"show-email\"\n                          checked={settings.showEmail}\n                          onCheckedChange={(checked) => handleSettingChange('showEmail', checked)}\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"show-phone\">Show Phone</Label>\n                          <p className=\"text-sm text-muted-foreground\">Allow others to see your phone number</p>\n                        </div>\n                        <Switch\n                          id=\"show-phone\"\n                          checked={settings.showPhone}\n                          onCheckedChange={(checked) => handleSettingChange('showPhone', checked)}\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"allow-messages\">Allow Messages</Label>\n                          <p className=\"text-sm text-muted-foreground\">Allow other users to send you messages</p>\n                        </div>\n                        <Switch\n                          id=\"allow-messages\"\n                          checked={settings.allowMessages}\n                          onCheckedChange={(checked) => handleSettingChange('allowMessages', checked)}\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Preferences */}\n                <Card id=\"preferences\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Palette className=\"h-5 w-5\" />\n                      Preferences\n                    </CardTitle>\n                    <CardDescription>\n                      Customize your experience and display preferences\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"language\">Language</Label>\n                        <Select value={settings.language} onValueChange={(value) => handleSettingChange('language', value)}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"en\">English</SelectItem>\n                            <SelectItem value=\"fr\">French</SelectItem>\n                            <SelectItem value=\"es\">Spanish</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"currency\">Currency</Label>\n                        <Select value={settings.currency} onValueChange={(value) => handleSettingChange('currency', value)}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"GHS\">Ghanaian Cedi (‚Çµ)</SelectItem>\n                            <SelectItem value=\"USD\">US Dollar ($)</SelectItem>\n                            <SelectItem value=\"EUR\">Euro (‚Ç¨)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"timezone\">Timezone</Label>\n                        <Select value={settings.timezone} onValueChange={(value) => handleSettingChange('timezone', value)}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Africa/Accra\">Africa/Accra (GMT+0)</SelectItem>\n                            <SelectItem value=\"UTC\">UTC (GMT+0)</SelectItem>\n                            <SelectItem value=\"America/New_York\">Eastern Time (GMT-5)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"theme\">Theme</Label>\n                        <Select value={settings.theme} onValueChange={(value) => handleSettingChange('theme', value)}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"light\">Light</SelectItem>\n                            <SelectItem value=\"dark\">Dark</SelectItem>\n                            <SelectItem value=\"system\">System</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Security */}\n                <Card id=\"security\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Shield className=\"h-5 w-5\" />\n                      Security\n                    </CardTitle>\n                    <CardDescription>\n                      Manage your account security and authentication\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"two-factor\">Two-Factor Authentication</Label>\n                          <p className=\"text-sm text-muted-foreground\">Add an extra layer of security to your account</p>\n                        </div>\n                        <Switch\n                          id=\"two-factor\"\n                          checked={settings.twoFactorAuth}\n                          onCheckedChange={(checked) => handleSettingChange('twoFactorAuth', checked)}\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"login-alerts\">Login Alerts</Label>\n                          <p className=\"text-sm text-muted-foreground\">Get notified of new login attempts</p>\n                        </div>\n                        <Switch\n                          id=\"login-alerts\"\n                          checked={settings.loginAlerts}\n                          onCheckedChange={(checked) => handleSettingChange('loginAlerts', checked)}\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"session-timeout\">Session Timeout</Label>\n                        <Select value={settings.sessionTimeout} onValueChange={(value) => handleSettingChange('sessionTimeout', value)}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"1h\">1 Hour</SelectItem>\n                            <SelectItem value=\"8h\">8 Hours</SelectItem>\n                            <SelectItem value=\"24h\">24 Hours</SelectItem>\n                            <SelectItem value=\"7d\">7 Days</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Change Password */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium\">Change Password</h4>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"current-password\">Current Password</Label>\n                          <div className=\"relative\">\n                            <Input\n                              id=\"current-password\"\n                              type={showCurrentPassword ? \"text\" : \"password\"}\n                              value={passwordForm.currentPassword}\n                              onChange={(e) => handlePasswordChange('currentPassword', e.target.value)}\n                              className=\"pr-10\"\n                            />\n                            <button\n                              type=\"button\"\n                              onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                              className=\"absolute right-3 top-3 text-muted-foreground hover:text-foreground\"\n                            >\n                              {showCurrentPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                            </button>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"new-password\">New Password</Label>\n                          <div className=\"relative\">\n                            <Input\n                              id=\"new-password\"\n                              type={showNewPassword ? \"text\" : \"password\"}\n                              value={passwordForm.newPassword}\n                              onChange={(e) => handlePasswordChange('newPassword', e.target.value)}\n                              className=\"pr-10\"\n                            />\n                            <button\n                              type=\"button\"\n                              onClick={() => setShowNewPassword(!showNewPassword)}\n                              className=\"absolute right-3 top-3 text-muted-foreground hover:text-foreground\"\n                            >\n                              {showNewPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                            </button>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n                          <div className=\"relative\">\n                            <Input\n                              id=\"confirm-password\"\n                              type={showConfirmPassword ? \"text\" : \"password\"}\n                              value={passwordForm.confirmPassword}\n                              onChange={(e) => handlePasswordChange('confirmPassword', e.target.value)}\n                              className=\"pr-10\"\n                            />\n                            <button\n                              type=\"button\"\n                              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                              className=\"absolute right-3 top-3 text-muted-foreground hover:text-foreground\"\n                            >\n                              {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                            </button>\n                          </div>\n                        </div>\n                        \n                        <Button onClick={changePassword} disabled={isLoading}>\n                          <Lock className=\"h-4 w-4 mr-2\" />\n                          Change Password\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Data & Export */}\n                <Card id=\"data\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Download className=\"h-5 w-5\" />\n                      Data & Export\n                    </CardTitle>\n                    <CardDescription>\n                      Manage your data and export options\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <Label htmlFor=\"auto-backup\">Auto Backup</Label>\n                          <p className=\"text-sm text-muted-foreground\">Automatically backup your data</p>\n                        </div>\n                        <Switch\n                          id=\"auto-backup\"\n                          checked={settings.autoBackup}\n                          onCheckedChange={(checked) => handleSettingChange('autoBackup', checked)}\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"data-retention\">Data Retention</Label>\n                        <Select value={settings.dataRetention} onValueChange={(value) => handleSettingChange('dataRetention', value)}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"1year\">1 Year</SelectItem>\n                            <SelectItem value=\"2years\">2 Years</SelectItem>\n                            <SelectItem value=\"5years\">5 Years</SelectItem>\n                            <SelectItem value=\"forever\">Forever</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium\">Data Export</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Download a copy of your data including profile, orders, and preferences\n                      </p>\n                      <Button variant=\"outline\" onClick={exportData}>\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Export Data\n                      </Button>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium text-red-600\">Danger Zone</h4>\n                      <div className=\"p-4 border border-red-200 rounded-lg bg-red-50\">\n                        <div className=\"flex items-start gap-3\">\n                          <AlertTriangle className=\"h-5 w-5 text-red-600 mt-0.5\" />\n                          <div className=\"flex-1\">\n                            <h5 className=\"font-medium text-red-900\">Delete Account</h5>\n                            <p className=\"text-sm text-red-700 mt-1\">\n                              Once you delete your account, there is no going back. Please be certain.\n                            </p>\n                            <Button \n                              variant=\"destructive\" \n                              size=\"sm\" \n                              className=\"mt-3\"\n                              onClick={deleteAccount}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete Account\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default UserSettings;\n","size_bytes":29879},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-construction transition-all duration-300\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-primary text-primary hover:bg-primary hover:text-primary-foreground transition-all duration-300\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        hero: \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-hero text-lg font-semibold transition-all duration-300 transform hover:scale-105\",\n        cta: \"bg-gradient-to-r from-primary to-primary text-primary-foreground hover:shadow-construction transition-all duration-300 font-semibold\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2289},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"api/index.ts":{"content":"// Vercel serverless function entry point\nimport { VercelRequest, VercelResponse } from '@vercel/node';\nimport app from '../server/index.js';\n\nexport default app;","size_bytes":162}},"version":1}